(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[974],{143:()=>{},1934:(e,t,n)=>{Promise.resolve().then(n.bind(n,2589))},2009:()=>{},2589:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>f});var o=n(5155),i=n(2115),a=n(7228);class s{async bootstrapFromTokenizer(){console.log("\uD83D\uDD27 Bootstrapping chatbot knowledge from tokenizer...");try{let e=await this.extractTokenizerVocabulary();console.log("\uD83D\uDCDA Extracted ".concat(e.length," vocabulary words"));let t=await this.generateVocabularyEmbeddings(e);console.log("\uD83E\uDDE0 Generated embeddings for ".concat(t.size," words"));let n=this.buildSemanticClusters(t);console.log("\uD83D\uDD17 Built semantic clusters for ".concat(n.size," concepts"));let o=this.createKnowledgeBase(t,n);return console.log("✅ Knowledge base bootstrap complete"),o}catch(e){throw console.error("❌ Knowledge bootstrap failed:",e),Error("Knowledge bootstrap failed: ".concat(e instanceof Error?e.message:String(e)))}}async extractTokenizerVocabulary(){console.log("\uD83D\uDD0D Attempting to extract tokenizer vocabulary...");let e=this.embeddingPipeline.tokenizer;if(console.log("Tokenizer available:",!!e),!e)throw Error("Tokenizer not available in embedding pipeline");console.log("Tokenizer properties:",Object.keys(e));let t=null;if(e.model&&e.model.vocab){let n=e.model.vocab;console.log("Vocab object type:",typeof n),console.log("Vocab object keys sample:",Object.keys(n).slice(0,20));let o=Object.keys(n)[0],i=n[o];console.log("First vocab entry:",o,"->",i),"number"==typeof i?(t=Object.keys(n),console.log("Found word->ID mapping, using keys as vocabulary")):"string"==typeof o&&/^\d+$/.test(o)?(t=Object.values(n),console.log("Found ID->word mapping, using values as vocabulary")):(t=Object.keys(n),console.log("Using keys as vocabulary (default)")),console.log("Extracted vocab length:",t.length),console.log("Sample vocab words:",t.slice(0,20))}else if(e.vocab)console.log("Found vocab via tokenizer.vocab:",(t=Object.keys(e.vocab)).length);else if(e.getVocab)console.log("Found vocab via tokenizer.getVocab():",(t=Object.keys(e.getVocab())).length);else throw Error("Unable to access tokenizer vocabulary - no known vocabulary access method found");if(!t||0===t.length)throw Error("Tokenizer vocabulary is empty or null");let n=this.filterMeaningfulWords(t);if(console.log("Filtered vocabulary:",n.length),0===n.length)throw Error("No meaningful words found in tokenizer vocabulary after filtering");return n}filterMeaningfulWords(e){if(console.log("\uD83D\uDD0D Filtering vocabulary from",e.length,"words"),console.log("Sample vocab words:",e.slice(0,20)),e.slice(0,100).every(e=>/^\d+$/.test(e)))throw Error("Detected numeric tokenizer with token IDs instead of vocabulary words - cannot extract meaningful vocabulary");let t=e.filter(e=>!(e.startsWith("[")||e.startsWith("<")||e.startsWith("##")||e.length<2||e.length>15||/^\d+$/.test(e))&&!!/^[a-zA-Z]+$/.test(e)).slice(0,800);return console.log("Filtered to",t.length,"meaningful words"),console.log("Sample filtered words:",t.slice(0,20)),t}async generateVocabularyEmbeddings(e){let t=new Map;for(let n=0;n<e.length;n+=50){for(let o of e.slice(n,n+50))try{let e=await this.embeddingPipeline(o),n=Array.from(e.data);t.set(o,n)}catch(e){console.warn("⚠️ Failed to generate embedding for word: ".concat(o))}n+50<e.length&&await new Promise(e=>setTimeout(e,10))}return t}buildSemanticClusters(e){let t=new Map;for(let[n,o]of e){let i=this.findSimilarWords(n,o,e);t.set(n,i)}return t}findSimilarWords(e,t,n){let o=[];for(let[i,a]of n)if(i!==e){let e=this.calculateCosineSimilarity(t,a);o.push({word:i,similarity:e})}return o.sort((e,t)=>t.similarity-e.similarity).slice(0,5).map(e=>e.word)}calculateCosineSimilarity(e,t){let n=e.reduce((e,n,o)=>e+n*t[o],0),o=Math.sqrt(e.reduce((e,t)=>e+t*t,0)),i=Math.sqrt(t.reduce((e,t)=>e+t*t,0));return o&&i?n/(o*i):0}createKnowledgeBase(e,t){let n=new Map,o=new Map;for(let[i,a]of e){let e=this.embeddingsToPrimes(a),s=t.get(i)||[];n.set(i,{word:i,embedding:a,primeFactors:e,similarWords:s}),o.set(i,e)}return{vocabulary:n,semanticClusters:t,conceptEmbeddings:e,vocabularyPrimes:o}}embeddingsToPrimes(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.02,n=this.generatePrimes(e.length),o={};return e.forEach((e,i)=>{if(Math.abs(e)>t){let t=n[i%n.length],a=Math.floor(1e3*Math.abs(e))+1;o[t]=(o[t]||0)+a}}),o}generatePrimes(e){let t=[2],n=3;for(;t.length<e;){let e=!0;for(let o=0;o<t.length&&t[o]*t[o]<=n;o++)if(n%t[o]==0){e=!1;break}e&&t.push(n),n+=2}return t}constructor(e){this.embeddingPipeline=e}}class r{findMostResonantWords(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:3;console.log("\uD83D\uDD22 Finding resonant words using direct prime comparison..."),console.log("Input primes:",this.formatPrimes(e));let o=[];for(let[n,i]of t){let t=this.calculatePrimeResonance(e,i),a=this.findSharedPrimes(e,i),s=this.findHarmonicMatches(e,i),r=this.calculateCoherenceScore(e,i);o.push({word:n,resonance:t,sharedPrimes:a,harmonicMatches:s,coherenceScore:r})}let i=o.sort((e,t)=>t.resonance-e.resonance).slice(0,2*n).filter(e=>e.resonance>0);return console.log("Top resonance results:",i.slice(0,5).map(e=>"".concat(e.word,": ").concat(e.resonance.toFixed(1)," (shared: ").concat(e.sharedPrimes.length,", harmonic: ").concat(e.harmonicMatches.length,")"))),i.slice(0,n)}calculatePrimeResonance(e,t){let n=0;for(let[o,i]of Object.entries(e)){let e=t[parseInt(o)];e&&(n+=Math.sqrt(i*e))}return n+.3*this.calculateHarmonicResonance(e,t)}findSharedPrimes(e,t){let n=[];for(let o of Object.keys(e)){let e=parseInt(o);t[e]&&n.push(e)}return n.sort((e,t)=>e-t)}findHarmonicMatches(e,t){let n=[];for(let[o]of Object.entries(e)){let e=parseInt(o);for(let o of[2*e,3*e,e+2,e-2,Math.floor(e/2),Math.floor(e/3)].filter(e=>e>1&&Number.isInteger(e)))t[o]&&n.push(o)}return[...new Set(n)].sort((e,t)=>e-t)}calculateHarmonicResonance(e,t){let n=0;for(let[o,i]of Object.entries(e)){let e=parseInt(o);for(let o of[2*e,e+2,e-2]){let e=t[o];e&&(n+=.5*Math.sqrt(i*e))}}return n}calculateCoherenceScore(e,t){let n={};for(let[o,i]of Object.entries(e)){let e=parseInt(o),a=t[e];a&&(n[e]=Math.sqrt(i*a))}let o=this.calculateMagnitude(n),i=Math.sqrt(this.calculateMagnitude(e)*this.calculateMagnitude(t));return i>0?o/i:0}calculateMagnitude(e){return Math.sqrt(Object.values(e).reduce((e,t)=>e+t*t,0))}formatPrimes(e){let t=Object.entries(e).sort((e,t)=>{let[,n]=e,[,o]=t;return o-n}).slice(0,5).map(e=>{let[t,n]=e;return"".concat(t,":").concat(Math.floor(n))});return"{".concat(t.join(", "),"}")}applyContextualWeighting(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1.5,o=t.join(" ").toLowerCase().split(/\W+/).filter(e=>e.length>2);return e.map(e=>{let t=e.resonance;return o.includes(e.word.toLowerCase())&&(t*=n,console.log('\uD83C\uDFAF Context boost for "'.concat(e.word,'": ').concat(e.resonance.toFixed(1)," → ").concat(t.toFixed(1)))),{...e,resonance:t}})}}class c{static generatePrimes(e){if(this.primes.length>=e)return this.primes.slice(0,e);let t=[2],n=3;for(;t.length<e;){let e=!0;for(let o=0;o<t.length&&t[o]*t[o]<=n;o++)if(n%t[o]==0){e=!1;break}e&&t.push(n),n+=2}return this.primes=t,t}static embeddingsToPrimes(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.02,n=this.generatePrimes(e.length),o={};return e.forEach((e,i)=>{if(Math.abs(e)>t){let t=n[i%n.length],a=Math.floor(1e3*Math.abs(e))+1;o[t]=(o[t]||0)+a}}),o}static calculateCoherence(e,t){let n={};Object.keys(e).forEach(o=>{let i=parseInt(o);t[i]&&(n[i]=Math.sqrt(e[i]*t[i]))});let o=this.calculateMagnitude(n),i=Math.sqrt(this.calculateMagnitude(e)*this.calculateMagnitude(t));return i>0?o/i:0}static calculateMagnitude(e){return Math.sqrt(Object.values(e).reduce((e,t)=>e+t*t,0))}static combineFactors(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.5,o={};return Object.entries(e).forEach(e=>{let[t,i]=e;o[parseInt(t)]=Math.floor(i*n)}),Object.entries(t).forEach(e=>{let[t,i]=e,a=parseInt(t);o[a]=(o[a]||0)+Math.floor(i*(1-n))}),o}}c.primes=[];class l{initializeBasicSchema(){this.addEntity("Thing",{type:"Thing",properties:["name","description","identifier"],relationships:[],parentTypes:[],description:"The most generic type of item"}),this.addEntity("Person",{type:"Person",properties:["name","givenName","familyName","email","telephone"],relationships:["knows","owns","memberOf","worksFor"],parentTypes:["Thing"],description:"A person (alive, dead, undead, or fictional)"}),this.addEntity("Animal",{type:"Animal",properties:["name","species","breed","age","color"],relationships:["ownedBy","livesAt","relatedTo"],parentTypes:["Thing"],description:"Animals including pets, wildlife, etc."}),this.addEntity("Place",{type:"Place",properties:["name","address","geo","telephone"],relationships:["containedInPlace","contains","near"],parentTypes:["Thing"],description:"Entities that have a somewhat fixed, physical extension"}),this.addEntity("Organization",{type:"Organization",properties:["name","description","email","telephone","address"],relationships:["member","parentOrganization","subOrganization"],parentTypes:["Thing"],description:"An organization such as a school, NGO, corporation, club, etc."}),this.addEntity("Vehicle",{type:"Vehicle",properties:["name","model","manufacturer","color","year"],relationships:["ownedBy","locatedAt"],parentTypes:["Thing"],description:"A vehicle is a device that is designed or used to transport people or cargo"}),this.addEntity("Product",{type:"Product",properties:["name","description","brand","model","color"],relationships:["ownedBy","manufacturedBy"],parentTypes:["Thing"],description:"Any offered product or service"}),this.addRelationship("hasName",{property:"hasName",domain:["Thing"],range:["Text"],description:"The name of the item"}),this.addRelationship("owns",{property:"owns",domain:["Person"],range:["Thing"],description:"Products owned by the person"}),this.addRelationship("ownedBy",{property:"ownedBy",domain:["Thing"],range:["Person"],description:"The person who owns this item"}),this.addRelationship("knows",{property:"knows",domain:["Person"],range:["Person"],description:"The most generic bi-directional social/work relation"}),this.addRelationship("livesAt",{property:"livesAt",domain:["Person","Animal"],range:["Place"],description:"The place where the person or animal lives"}),this.addRelationship("worksFor",{property:"worksFor",domain:["Person"],range:["Organization"],description:"Organizations that the person works for"}),console.log("\uD83D\uDCDA Schema.org vocabulary initialized with",this.entities.size,"entities and",this.relationships.size,"relationships")}addEntity(e,t){this.entities.set(e,t)}addRelationship(e,t){this.relationships.set(e,t)}inferEntityType(e,t){let n=e.toLowerCase(),o={dog:"Animal",cat:"Animal",pet:"Animal",bird:"Animal",fish:"Animal",horse:"Animal",car:"Vehicle",truck:"Vehicle",bike:"Vehicle",motorcycle:"Vehicle",house:"Place",home:"Place",office:"Place",school:"Place",company:"Organization",business:"Organization",team:"Organization",friend:"Person",family:"Person",brother:"Person",sister:"Person",mother:"Person",father:"Person",phone:"Product",computer:"Product",book:"Product"},i=o[n];return i?(console.log("\uD83D\uDD0D Inferred entity type: ".concat(e," → ").concat(i)),i):t&&t.includes("name")&&!o[n]?"Person":null}getValidRelationships(e){let t=this.entities.get(e);if(!t)return[];let n=[...t.relationships];return t.parentTypes.forEach(e=>{let t=this.entities.get(e);t&&n.push(...t.relationships)}),[...new Set(n)]}getValidProperties(e){let t=this.entities.get(e);if(!t)return[];let n=[...t.properties];return t.parentTypes.forEach(e=>{let t=this.entities.get(e);t&&n.push(...t.properties)}),[...new Set(n)]}parseSemanticRelationships(e){console.log("\uD83D\uDD0D Parsing semantic relationships in:",e);let t=e.match(/my\s+(\w+)'?s?\s+name\s+is\s+(\w+)/i);if(t){let e=t[1],n=t[2],o=this.inferEntityType(e);return{subject:{text:e,type:o},predicate:"hasName",object:{text:n,type:"Text"},confidence:.9}}let n=e.match(/i\s+have\s+a\s+(\w+)/i);if(n){let e=n[1],t=this.inferEntityType(e);return{subject:{text:"I",type:"Person"},predicate:"owns",object:{text:e,type:t},confidence:.8}}let o=e.match(/my\s+name\s+is\s+(\w+)/i);return o?{subject:{text:"I",type:"Person"},predicate:"hasName",object:{text:o[1],type:"Text"},confidence:.95}:null}generateSemanticQuery(e){console.log("\uD83D\uDD0D Generating semantic query for:",e);let t=e.match(/what\s+is\s+my\s+(\w+)'?s?\s+(\w+)/i);if(t){let e=t[1],n=t[2],o=this.inferEntityType(e);if("name"===n)return{queryType:"retrieve",subject:e,predicate:"hasName",entityType:o||void 0}}return/what\s+is\s+my\s+name/i.test(e)?{queryType:"retrieve",subject:"user",predicate:"hasName"}:null}getEntityInfo(e){return this.entities.get(e)||null}getRelationshipInfo(e){return this.relationships.get(e)||null}isValidRelationship(e,t,n){let o=this.relationships.get(t);if(!o)return!1;let i=o.domain.includes(e)||o.domain.includes("Thing"),a=o.range.includes(n)||o.range.includes("Thing")||o.range.includes("Text");return i&&a}getAllEntityTypes(){return Array.from(this.entities.keys())}getAllRelationshipTypes(){return Array.from(this.relationships.keys())}getDebugInfo(){return{entityCount:this.entities.size,relationshipCount:this.relationships.size,entities:Object.fromEntries(this.entities),relationships:Object.fromEntries(this.relationships)}}constructor(){this.entities=new Map,this.relationships=new Map,this.initializeBasicSchema()}}class h{initializePatterns(){this.patterns=[{pattern:/my name is (\w+)/i,intent:"IDENTITY_INTRODUCTION",semanticBoosts:["name","identity","person","individual","called","known"],responseTemplate:"Nice to meet you, {name}! I'm PrimeBot."},{pattern:/i am (\w+)/i,intent:"IDENTITY_INTRODUCTION",semanticBoosts:["name","identity","person","individual"],responseTemplate:"Nice to meet you, {name}! I'm PrimeBot."},{pattern:/my (\w+)'?s? name is (\w+)/i,intent:"ENTITY_INTRODUCTION",semanticBoosts:["name","identity","called","known","entity"],responseTemplate:"Nice to know that your {entity} is named {name}!"},{pattern:/her name is (\w+)/i,intent:"ENTITY_INTRODUCTION",semanticBoosts:["name","identity","called","known","entity"],responseTemplate:"Nice to know that her name is {name}!"},{pattern:/his name is (\w+)/i,intent:"ENTITY_INTRODUCTION",semanticBoosts:["name","identity","called","known","entity"],responseTemplate:"Nice to know that his name is {name}!"},{pattern:/what is my name/i,intent:"IDENTITY_QUERY",semanticBoosts:["name","identity","remember","recall","called","known"],responseTemplate:"Based on our conversation, your name is {name}."},{pattern:/what is my (\w+)'?s? name/i,intent:"ENTITY_QUERY",semanticBoosts:["name","identity","remember","recall","called","known"],responseTemplate:"Based on our conversation, your {entity} is named {name}."},{pattern:/what is my (\w+)'s name/i,intent:"ENTITY_QUERY",semanticBoosts:["name","identity","remember","recall","called","known"],responseTemplate:"Based on our conversation, your {entity} is named {name}."},{pattern:/who am i/i,intent:"IDENTITY_QUERY",semanticBoosts:["identity","person","individual","self","me"]},{pattern:/who are you/i,intent:"BOT_IDENTITY_QUERY",semanticBoosts:["identity","bot","assistant","who","you"],responseTemplate:"I'm PrimeBot, an AI assistant powered by mathematical prime factorization."},{pattern:/what is your name/i,intent:"BOT_IDENTITY_QUERY",semanticBoosts:["name","identity","bot","assistant"],responseTemplate:"My name is PrimeBot."},{pattern:/^(hello|hi|hey|greetings)/i,intent:"GREETING",semanticBoosts:["hello","greeting","welcome","salutation","social","friendly"],responseTemplate:"Hello! I'm PrimeBot. How can I help you today?"},{pattern:/good (morning|afternoon|evening)/i,intent:"GREETING",semanticBoosts:["greeting","time","polite","social","welcome"]},{pattern:/^what (is|are|was|were)/i,intent:"INFORMATION_REQUEST",semanticBoosts:["question","information","explain","definition","knowledge"]},{pattern:/^(how|why|when|where)/i,intent:"INFORMATION_REQUEST",semanticBoosts:["question","inquiry","explanation","information","help"]},{pattern:/\?$/,intent:"QUESTION",semanticBoosts:["question","inquiry","ask","information","help"]},{pattern:/(help|assist|support)/i,intent:"HELP_REQUEST",semanticBoosts:["help","assist","support","aid","guidance","service"],responseTemplate:"I'm here to help! What would you like to know or discuss?"},{pattern:/(thank|thanks|grateful)/i,intent:"GRATITUDE",semanticBoosts:["thanks","gratitude","appreciation","polite","positive"],responseTemplate:"You're welcome! I'm glad I could help."},{pattern:/(good|great|excellent|awesome|wonderful)/i,intent:"POSITIVE_FEEDBACK",semanticBoosts:["good","positive","approval","satisfaction","pleased"],responseTemplate:"That's wonderful! Is there anything else I can help you with?"},{pattern:/(understand|know|learn|explain)/i,intent:"KNOWLEDGE_REQUEST",semanticBoosts:["understand","knowledge","learn","explain","information","teach"]}]}analyzeSemanticContext(e){console.log("\uD83E\uDDE0 Analyzing semantic context for:",e);let t=null,n=0,o=[];for(let i of this.patterns){let a=e.match(i.pattern);if(a){t=i,n=.8,a.length>1&&(o=a.slice(1));break}}if(!t){let t=this.extractKeywords(e),n=this.getSemanticBoostsFromKeywords(t);return{intent:"GENERAL_CONVERSATION",entities:t,semanticBoosts:n,confidence:.3}}return console.log("\uD83C\uDFAF Detected intent:",t.intent),console.log("\uD83D\uDD17 Semantic boosts:",t.semanticBoosts),console.log("\uD83D\uDCDD Entities:",o),{intent:t.intent,entities:o,semanticBoosts:t.semanticBoosts,confidence:n}}extractKeywords(e){return e.toLowerCase().split(/\W+/).filter(e=>e.length>2).filter(e=>!this.isStopWord(e))}isStopWord(e){return["the","and","or","but","in","on","at","to","for","of","with","by","is","are","was","were","be","been","have","has","had","do","does","did","will","would","could","should","may","might","can"].includes(e)}getSemanticBoostsFromKeywords(e){let t={name:["identity","person","individual","called","known"],hello:["greeting","welcome","social","friendly"],help:["assist","support","aid","guidance"],what:["question","information","inquiry"],how:["method","process","way","explanation"],why:["reason","cause","explanation","purpose"],when:["time","schedule","timing"],where:["location","place","position"],who:["person","identity","individual"],good:["positive","quality","approval"],bad:["negative","problem","issue"],like:["preference","enjoy","positive"],love:["strong_positive","emotion","preference"],hate:["strong_negative","dislike","emotion"],want:["desire","need","request"],need:["requirement","necessity","important"],think:["opinion","belief","cognitive"],feel:["emotion","sensation","experience"],know:["knowledge","information","understanding"],understand:["comprehension","knowledge","clarity"],learn:["education","knowledge","growth"],teach:["education","instruction","knowledge"],work:["job","employment","activity","function"],play:["recreation","fun","game","entertainment"],time:["temporal","schedule","duration"],place:["location","position","area"],thing:["object","item","entity"],person:["individual","human","people"],people:["group","humans","social"],family:["relatives","relationship","personal"],friend:["social","relationship","personal"],home:["residence","place","personal"],school:["education","learning","institution"],book:["reading","knowledge","information"],computer:["technology","digital","tool"],phone:["communication","technology","contact"],car:["transportation","vehicle","travel"],food:["nutrition","eating","sustenance"],water:["drink","liquid","essential"],money:["finance","currency","value"],job:["work","employment","career"]},n=[];for(let o of e)t[o]&&n.push(...t[o]),n.push(o);return[...new Set(n)]}generateContextualResponse(e,t,n){console.log("\uD83C\uDFAD Generating knowledge-driven response for intent:",e.intent);let o=t[t.length-1]||"",i=this.schemaVocabulary.parseSemanticRelationships(o),a=this.schemaVocabulary.generateSemanticQuery(o);return(console.log("\uD83D\uDD0D Semantic relationship:",i),console.log("\uD83D\uDD0D Semantic query:",a),(null==a?void 0:a.queryType)==="retrieve")?this.handleSemanticRetrieval(a,t,e):i&&i.confidence>.8?this.handleSemanticRelationship(i,e):this.generateIntentBasedResponse(e,t,n)}handleSemanticRetrieval(e,t,n){let o=t.join(" ").toLowerCase();if("hasName"===e.predicate)if("user"===e.subject){let e=o.match(/my name is (\w+)/i);return e?"Your name is ".concat(e[1],"."):"I don't recall you mentioning your name. What is your name?"}else{let t=e.subject,n=RegExp("my ".concat(t,"'?s? name is (\\w+)"),"i"),i=o.match(n);if(i){let e=i[1],n=this.schemaVocabulary.inferEntityType(t);return"Your ".concat(t," is named ").concat(e,".")+(n?" That's a lovely name for ".concat("Animal"===n?"an animal":"a "+n.toLowerCase(),"."):"")}return"I don't recall you mentioning your ".concat(t,"'s name. What is your ").concat(t,"'s name?")}return"I'm processing that semantic query. Could you provide more details?"}handleSemanticRelationship(e,t){let{subject:n,predicate:o,object:i}=e;if("hasName"===o)if("I"===n.text)return"Nice to meet you, ".concat(i.text,"! I'm PrimeBot. How can I assist you today?");else{let e=this.schemaVocabulary.inferEntityType(n.text),t=e?this.schemaVocabulary.getEntityInfo(e):null,o="Nice to know that your ".concat(n.text," is named ").concat(i.text,"!");return t&&e&&(this.schemaVocabulary.getValidProperties(e),this.schemaVocabulary.getValidRelationships(e),"Animal"===e?o+=" Tell me more about ".concat(i.text," - what kind of ").concat(n.text," is ").concat(i.text,"?"):"Vehicle"===e?o+=" What kind of ".concat(n.text," is ").concat(i.text,"?"):o+=" Tell me more about ".concat(i.text,".")),o}return"owns"===o?this.schemaVocabulary.inferEntityType(i.text)?"That's wonderful that you have ".concat("a"===i.text?"a":""," ").concat(i.text,"! What's special about your ").concat(i.text,"?"):"Interesting that you have ".concat(i.text,". Tell me more about it!"):"That's interesting! I'm learning about the relationships you're describing."}generateIntentBasedResponse(e,t,n){switch(e.intent){case"GREETING":return"Hello! I'm PrimeBot, powered by mathematical prime factorization and semantic understanding. How can I help you today?";case"HELP_REQUEST":return"I'm here to help! I can understand relationships between people, animals, places, and things. What would you like to know or discuss?";case"GRATITUDE":return"You're welcome! I'm glad I could help with my semantic understanding.";case"POSITIVE_FEEDBACK":return"That's wonderful! Is there anything else I can help you understand or explore?";case"INFORMATION_REQUEST":case"QUESTION":if(n.length>0){let e=this.schemaVocabulary.inferEntityType(n[0]);if(e)return this.schemaVocabulary.getEntityInfo(e),"I'm analyzing \"".concat(n[0],'" as ').concat("Animal"===e?"an":"a"," ").concat(e,". ")+"What specifically would you like to know about ".concat(n[0],"?");return"I'm processing information about \"".concat(n[0],'" through my semantic understanding. What specifically would you like to know?')}return"That's a great question! I'm analyzing the semantic relationships to provide you with an answer.";case"KNOWLEDGE_REQUEST":return"I process information through mathematical analysis and semantic understanding using Schema.org vocabulary. What would you like me to understand?";case"GENERAL_CONVERSATION":if(n.length>0){let e=this.schemaVocabulary.inferEntityType(n[0]);if(e)return'I notice you mentioned "'.concat(n[0],'" - I understand that as ').concat("Animal"===e?"an":"a"," ").concat(e,". Tell me more about it!");return'I notice you mentioned "'.concat(n[0],"\". That's interesting! Tell me more about it.")}return"I'm listening and ready to understand the semantic relationships in what you're telling me. What would you like to discuss?";default:return null}}enhanceResonanceWithSemantics(e,t){return console.log("\uD83D\uDD2E Enhancing resonance with semantic awareness..."),e.map(e=>{let n=e.resonance;return t.semanticBoosts.includes(e.word)&&(n*=2,console.log('\uD83C\uDFAF Semantic boost for "'.concat(e.word,'": ').concat(e.resonance.toFixed(1)," → ").concat(n.toFixed(1)))),t.confidence>.7&&(n*=1.3),{word:e.word,resonance:n}})}extractEntitiesFromContext(e){let t=new Map,n=e.join(" ").match(/my name is (\w+)/i);return n&&t.set("user_name",n[1]),t}constructor(){this.patterns=[],this.conceptNetCache=new Map,this.schemaVocabulary=new l,this.initializePatterns()}}class u{processTurn(e,t,n,o,i){console.log("\uD83C\uDFAF Pragmatic Layer processing turn..."),console.log("Speaker:",e,"Intent:",n),console.log("Entities:",o);let a={id:"turn-".concat(Date.now(),"-").concat(Math.random().toString(36).substr(2,9)),timestamp:Date.now(),speaker:e,text:t,intent:n,entities:o,context:i};return this.context.conversationHistory.push(a),this.maintainHistoryLength(),this.updateEntityMemory(o),this.updateIntentTracking(n,o),this.updateCurrentTopic(n,o,t),this.updateConversationGoals(n,o),console.log("\uD83C\uDFAF Updated context - Topic:",this.context.currentTopic),console.log("\uD83C\uDFAF Active intents:",this.context.activeIntents),console.log("\uD83C\uDFAF Entity memory size:",this.context.entityMemory.size),{...this.context}}updateEntityMemory(e){Object.entries(e).forEach(e=>{let[t,n]=e;if(n&&"string"==typeof n&&n.length>0){var o;let e={value:n,lastMentioned:Date.now(),mentionCount:((null==(o=this.context.entityMemory.get(t))?void 0:o.mentionCount)||0)+1,context:this.context.currentTopic};this.context.entityMemory.set(t,e),console.log("\uD83D\uDCBE Stored entity: ".concat(t," = ").concat(n))}}),this.handleSpecialEntityPatterns(e)}handleSpecialEntityPatterns(e){var t,n;if(e.entityType&&e.entityName){let t="".concat(e.entityType,"_name"),n={value:e.entityName,entityType:e.entityType,relationship:"hasName",lastMentioned:Date.now(),mentionCount:1};this.context.entityMemory.set(t,n),console.log("\uD83D\uDD17 Stored relationship: ".concat(e.entityType," hasName ").concat(e.entityName))}e.userName&&this.context.entityMemory.set("user_name",{value:e.userName,relationship:"identity",lastMentioned:Date.now(),mentionCount:((null==(t=this.context.entityMemory.get("user_name"))?void 0:t.mentionCount)||0)+1});let o=Object.values(e);if(1===o.length&&"string"==typeof o[0]){let e=o[0];e.length>1&&e[0].toUpperCase()===e[0]&&(this.context.entityMemory.set("user_name",{value:e,relationship:"identity",lastMentioned:Date.now(),mentionCount:((null==(n=this.context.entityMemory.get("user_name"))?void 0:n.mentionCount)||0)+1}),console.log("\uD83D\uDC64 Stored user name: ".concat(e)))}if(2===o.length){let[e,t]=o;if(e&&t&&t[0].toUpperCase()===t[0]){let n="".concat(e,"_name"),o={value:t,entityType:e,relationship:"hasName",lastMentioned:Date.now(),mentionCount:1};this.context.entityMemory.set(n,o),console.log("\uD83D\uDD17 Stored relationship: ".concat(e," hasName ").concat(t))}}if(3===o.length){let[e,t,n]=o;if(("her"===e||"his"===e)&&"name"===t&&n[0].toUpperCase()===n[0]){let t=this.findRecentEntityForPronoun(e);if(t){let o="".concat(t,"_name"),i={value:n,entityType:t,relationship:"hasName",lastMentioned:Date.now(),mentionCount:1};this.context.entityMemory.set(o,i),console.log("\uD83D\uDD17 Stored pronoun relationship: ".concat(t," hasName ").concat(n," (via ").concat(e,")"))}}}}updateIntentTracking(e,t){if(this.activeIntents.has(e)){let n=this.activeIntents.get(e);n.confidence=Math.min(n.confidence+.1,1),n.turnsSinceActivation=0,n.parameters={...n.parameters,...t}}else this.activeIntents.set(e,{intent:e,confidence:.8,parameters:t,isActive:!0,turnsSinceActivation:0});for(let[t,n]of this.activeIntents)t!==e&&(n.turnsSinceActivation++,n.confidence=Math.max(n.confidence-.05,0),(n.turnsSinceActivation>5||n.confidence<.2)&&(n.isActive=!1));this.context.activeIntents=Array.from(this.activeIntents.values()).filter(e=>e.isActive).map(e=>e.intent)}updateCurrentTopic(e,t,n){let o=null;if("ENTITY_INTRODUCTION"===e||"ENTITY_QUERY"===e)t.entityType&&(o="".concat(t.entityType,"_discussion"));else if("IDENTITY_INTRODUCTION"===e||"IDENTITY_QUERY"===e)o="identity_discussion";else if("GREETING"===e)o="greeting_exchange";else if("HELP_REQUEST"===e)o="assistance_request";else if("INFORMATION_REQUEST"===e){let e=this.extractKeywords(n);e.length>0&&(o="".concat(e[0],"_information"))}o&&o!==this.context.currentTopic&&(this.context.currentTopic=o)}updateConversationGoals(e,t){let n=this.context.conversationGoals;switch(e){case"HELP_REQUEST":n.includes("provide_assistance")||n.push("provide_assistance");break;case"INFORMATION_REQUEST":n.includes("provide_information")||n.push("provide_information");break;case"IDENTITY_INTRODUCTION":n.includes("build_rapport")||n.push("build_rapport");break;case"ENTITY_INTRODUCTION":n.includes("learn_about_user")||n.push("learn_about_user")}n.length>5&&(this.context.conversationGoals=n.slice(-5))}extractKeywords(e){return e.toLowerCase().split(/\W+/).filter(e=>e.length>3).filter(e=>!this.isStopWord(e)).slice(0,3)}isStopWord(e){return["what","when","where","how","why","who","this","that","with","from","they","them","their","there","then","than","these","those"].includes(e)}maintainHistoryLength(){this.context.conversationHistory.length>this.maxHistoryLength&&(this.context.conversationHistory=this.context.conversationHistory.slice(-this.maxHistoryLength))}queryEntityMemory(e){let t=this.context.entityMemory.get(e);return t?(console.log("\uD83D\uDD0D Retrieved entity: ".concat(e," = ").concat(t.value)),t):null}queryEntityRelationship(e,t){let n="".concat(e,"_").concat(t);return this.queryEntityMemory(n)}getContextForResponse(){let e=this.context.conversationHistory.slice(-5),t={},n=Date.now()-3e5;for(let[e,o]of this.context.entityMemory)(o.lastMentioned>n||this.context.currentTopic&&o.context===this.context.currentTopic)&&(t[e]=o);return{recentHistory:e,currentTopic:this.context.currentTopic,activeIntents:this.context.activeIntents,relevantEntities:t,conversationGoals:this.context.conversationGoals}}shouldContinueThread(e){let t=Array.from(this.activeIntents.values()).filter(e=>e.isActive),n=this.getRelatedIntents(e);return t.some(e=>n.includes(e.intent)&&e.confidence>.5)}getRelatedIntents(e){return({IDENTITY_QUERY:["IDENTITY_INTRODUCTION","ENTITY_QUERY"],ENTITY_QUERY:["ENTITY_INTRODUCTION","IDENTITY_QUERY"],INFORMATION_REQUEST:["HELP_REQUEST","KNOWLEDGE_REQUEST"],HELP_REQUEST:["INFORMATION_REQUEST","KNOWLEDGE_REQUEST"]})[e]||[]}resetContext(){this.context={currentTopic:null,activeIntents:[],entityMemory:new Map,conversationGoals:[],userPreferences:{},conversationHistory:[]},this.activeIntents.clear(),console.log("\uD83D\uDD04 Pragmatic context reset")}findRecentEntityForPronoun(e){let t=this.context.conversationHistory.slice(-3);for(let n=t.length-1;n>=0;n--){let o=t[n];if("ENTITY_QUERY"===o.intent)for(let t of Object.keys(o.entities)){let n=o.entities[t];if("string"==typeof n&&n.length>2){if("her"===e&&this.isFemalePronounEntity(n))return n;else if("his"===e&&this.isMalePronounEntity(n))return n;else if("is"!==n&&"name"!==n)return n}}}return null}isFemalePronounEntity(e){return["wife","mother","sister","daughter","girlfriend","aunt","grandmother"].includes(e.toLowerCase())}isMalePronounEntity(e){return["husband","father","brother","son","boyfriend","uncle","grandfather"].includes(e.toLowerCase())}getDebugInfo(){return{currentTopic:this.context.currentTopic,activeIntents:this.context.activeIntents,entityMemorySize:this.context.entityMemory.size,entityMemory:Object.fromEntries(this.context.entityMemory),conversationGoals:this.context.conversationGoals,historyLength:this.context.conversationHistory.length,activeIntentStates:Object.fromEntries(this.activeIntents)}}constructor(){this.activeIntents=new Map,this.maxHistoryLength=20,this.context={currentTopic:null,activeIntents:[],entityMemory:new Map,conversationGoals:[],userPreferences:{},conversationHistory:[]}}}class d{analyzeDiscourseContext(e,t,n){console.log("\uD83D\uDCAC Analyzing discourse context..."),this.updateTopicState(e,t,n),this.updateConversationFlow(e,t,n),this.updateReferenceResolution(e,n);let o=this.calculateTopicContinuity(e,t),i=this.detectDiscourseMarkers(e),a=this.determineExpectedResponseType(t,this.conversationFlow.currentPhase);return console.log("\uD83D\uDCAC Discourse analysis:",{currentTopic:this.topicState.currentTopic,conversationPhase:this.conversationFlow.currentPhase,topicContinuity:o,expectedResponseType:a}),{topicContinuity:o,conversationPhase:this.conversationFlow.currentPhase,expectedResponseType:a,discourseMarkers:i,referenceResolutions:this.referenceResolution.entityReferences}}updateTopicState(e,t,n){let o=this.extractTopicsFromInput(e,t);if(o.length>0){let e=o[0];this.topicState.currentTopic&&this.topicState.currentTopic!==e?(this.topicState.topicTransitions.has(this.topicState.currentTopic)||this.topicState.topicTransitions.set(this.topicState.currentTopic,[]),this.topicState.topicTransitions.get(this.topicState.currentTopic).push(e),this.topicState.topicHistory.push(this.topicState.currentTopic),this.topicState.topicDepth=0):this.topicState.currentTopic===e&&this.topicState.topicDepth++,this.topicState.currentTopic=e}this.topicState.topicCoherence=this.calculateTopicCoherence(n)}extractTopicsFromInput(e,t){let n=[];if(t.entities&&t.entities.length>0&&t.entities.forEach(e=>{let t=this.schemaVocabulary.inferEntityType(e);t?n.push("".concat(t.toLowerCase(),"_discussion")):n.push("".concat(e,"_topic"))}),t.intent)switch(t.intent){case"IDENTITY_INTRODUCTION":case"IDENTITY_QUERY":n.push("identity_discussion");break;case"HELP_REQUEST":n.push("assistance_request");break;case"INFORMATION_REQUEST":n.push("information_seeking");break;case"GREETING":n.push("social_interaction")}return n}updateConversationFlow(e,t,n){this.conversationFlow.turnsSincePhaseChange++;let o=this.conversationFlow.currentPhase,i=o;switch(o){case"opening":"IDENTITY_INTRODUCTION"===t.intent||"ENTITY_INTRODUCTION"===t.intent?i="exploration":this.conversationFlow.turnsSincePhaseChange>3&&(i="exploration");break;case"exploration":this.topicState.topicDepth>2?i="deepening":this.hasTopicTransition()&&(i="transition");break;case"deepening":this.hasTopicTransition()?i="transition":this.conversationFlow.turnsSincePhaseChange>8&&(i="transition");break;case"transition":this.topicState.topicDepth>0?i="exploration":this.conversationFlow.turnsSincePhaseChange>2&&(i="exploration")}i!==o&&(this.conversationFlow.currentPhase=i,this.conversationFlow.turnsSincePhaseChange=0,this.updateExpectedNextMoves(i)),this.updateConversationMomentum(t,n)}hasTopicTransition(){return this.topicState.topicHistory.length>0&&0===this.topicState.topicDepth}updateExpectedNextMoves(e){switch(e){case"opening":this.conversationFlow.expectedNextMoves=["greeting","introduction","question"];break;case"exploration":this.conversationFlow.expectedNextMoves=["information_sharing","question","elaboration"];break;case"deepening":this.conversationFlow.expectedNextMoves=["detailed_explanation","follow_up","clarification"];break;case"transition":this.conversationFlow.expectedNextMoves=["topic_change","summary","new_question"];break;case"closing":this.conversationFlow.expectedNextMoves=["farewell","summary","future_reference"]}}updateConversationMomentum(e,t){let n=this.conversationFlow.conversationMomentum;("QUESTION"===e.intent||"INFORMATION_REQUEST"===e.intent)&&(n+=.2),("ENTITY_INTRODUCTION"===e.intent||"IDENTITY_INTRODUCTION"===e.intent)&&(n+=.3),"GENERAL_CONVERSATION"===e.intent&&0===e.entities.length&&(n-=.1),n*=.95,this.conversationFlow.conversationMomentum=Math.max(0,Math.min(1,n))}updateReferenceResolution(e,t){this.resolvePronounReferences(e,t),this.updateEntityReferences(e,t),this.updateContextualReferences(e,t)}resolvePronounReferences(e,t){["it","he","she","they","that","this"].forEach(n=>{if(e.toLowerCase().includes(n)){let e=this.findMostRecentEntity(t,n);e&&this.referenceResolution.pronouns.set(n,e)}})}findMostRecentEntity(e,t){let n=e.conversationHistory.slice(-5);for(let e=n.length-1;e>=0;e--){let t=n[e];if(Object.keys(t.entities).length>0)return Object.values(t.entities)[0]}return null}updateEntityReferences(e,t){for(let[n,o]of t.entityMemory)e.toLowerCase().includes(o.value.toLowerCase())&&this.referenceResolution.entityReferences.set(o.value,{type:o.entityType||"unknown",lastMentioned:Date.now(),context:e})}updateContextualReferences(e,t){this.topicState.topicHistory.forEach(t=>{e.toLowerCase().includes(t.toLowerCase())&&this.referenceResolution.contextualReferences.set(t,{referenceType:"topic_callback",originalContext:t,currentMention:e})})}calculateTopicContinuity(e,t){if(!this.topicState.currentTopic)return 0;let n=0,o=this.getTopicKeywords(this.topicState.currentTopic);return n=e.toLowerCase().split(/\W+/).filter(e=>o.includes(e)).length/Math.max(o.length,1),t.entities&&t.entities.length>0&&(n+=.3),Math.min(1,n)}getTopicKeywords(e){return({identity_discussion:["name","identity","who","person","individual"],animal_discussion:["dog","cat","pet","animal","breed","species"],vehicle_discussion:["car","truck","vehicle","drive","transportation"],assistance_request:["help","assist","support","aid","guidance"],information_seeking:["what","how","why","when","where","question"],social_interaction:["hello","hi","greeting","nice","meet"]})[e]||[]}calculateTopicCoherence(e){if(e.conversationHistory.length<2)return 1;let t=e.conversationHistory.slice(-5),n=0,o=new Map;return t.forEach(e=>{Object.values(e.entities).forEach(e=>{o.set(e,(o.get(e)||0)+1)})}),Math.min(1,Math.max(...Array.from(o.values()),0)/t.length)}detectDiscourseMarkers(e){let t=[],n=e.toLowerCase();return Object.entries({topic_shift:["anyway","by the way","speaking of","that reminds me"],elaboration:["also","furthermore","in addition","moreover"],contrast:["but","however","on the other hand","although"],conclusion:["so","therefore","in conclusion","to summarize"],clarification:["i mean","that is","in other words","specifically"],sequence:["first","then","next","finally","after that"]}).forEach(e=>{let[o,i]=e;i.forEach(e=>{n.includes(e)&&t.push(o)})}),[...new Set(t)]}determineExpectedResponseType(e,t){let n="acknowledgment";switch(e.intent){case"QUESTION":case"INFORMATION_REQUEST":case"IDENTITY_QUERY":case"ENTITY_QUERY":case"BOT_IDENTITY_QUERY":n="informative_answer";break;case"GREETING":n="social_response";break;case"IDENTITY_INTRODUCTION":case"ENTITY_INTRODUCTION":n="acknowledgment_with_followup";break;case"HELP_REQUEST":n="supportive_response";break;case"GRATITUDE":n="gracious_acknowledgment"}switch(t){case"opening":"acknowledgment"===n&&(n="welcoming_response");break;case"deepening":"informative_answer"===n&&(n="detailed_explanation");break;case"transition":"informative_answer"!==n&&(n="transitional_response")}return n}getDiscourseState(){return{topicState:{...this.topicState},conversationFlow:{...this.conversationFlow},referenceResolution:{pronouns:new Map(this.referenceResolution.pronouns),entityReferences:new Map(this.referenceResolution.entityReferences),contextualReferences:new Map(this.referenceResolution.contextualReferences)}}}resetDiscourseState(){this.topicState={currentTopic:"",topicHistory:[],topicTransitions:new Map,topicDepth:0,topicCoherence:0},this.conversationFlow={currentPhase:"opening",turnsSincePhaseChange:0,expectedNextMoves:["greeting","introduction","question"],conversationMomentum:0},this.referenceResolution={pronouns:new Map,entityReferences:new Map,contextualReferences:new Map}}constructor(e){this.schemaVocabulary=e,this.topicState={currentTopic:"",topicHistory:[],topicTransitions:new Map,topicDepth:0,topicCoherence:0},this.conversationFlow={currentPhase:"opening",turnsSincePhaseChange:0,expectedNextMoves:["greeting","introduction","question"],conversationMomentum:0},this.referenceResolution={pronouns:new Map,entityReferences:new Map,contextualReferences:new Map}}}class m{generateResponse(e){var t;console.log("\uD83C\uDFA8 Generating dynamic response..."),console.log("Response type:",e.responseType),console.log("Conversation phase:",null==(t=e.discourseContext)?void 0:t.conversationPhase);let n=this.determineGenerationStyle(e),o=this.generateResponseComponents(e,n),i=this.assembleResponse(o,n);return console.log("\uD83C\uDFA8 Generated response:",i),i}determineGenerationStyle(e){var t,n,o,i,a,s;let r={...this.defaultStyle};switch(null==(t=e.discourseContext)?void 0:t.conversationPhase){case"opening":r.formality="neutral",r.enthusiasm="medium";break;case"exploration":r.formality="casual",r.enthusiasm="medium";break;case"deepening":r.formality="neutral",r.verbosity="detailed";break;case"transition":r.enthusiasm="low",r.verbosity="concise"}switch(null==(n=e.semanticContext)?void 0:n.intent){case"GREETING":r.enthusiasm="high",r.personality="friendly";break;case"HELP_REQUEST":r.personality="helpful",r.enthusiasm="medium";break;case"INFORMATION_REQUEST":case"QUESTION":r.personality="analytical",r.verbosity="detailed";break;case"GRATITUDE":r.personality="friendly",r.enthusiasm="medium"}return(null==(i=e.discourseContext)||null==(o=i.conversationFlow)?void 0:o.conversationMomentum)>.7?(r.enthusiasm="high",r.verbosity="detailed"):(null==(s=e.discourseContext)||null==(a=s.conversationFlow)?void 0:a.conversationMomentum)<.3&&(r.enthusiasm="low",r.verbosity="concise"),r}generateResponseComponents(e,t){let n={opening:"",core:"",followup:"",closing:""};return n.opening=this.generateOpening(e,t),n.core=this.generateCore(e,t),n.followup=this.generateFollowup(e,t),n.closing=this.generateClosing(e,t),n}generateOpening(e,t){var n,o;let i=e.responseType;null==(n=e.discourseContext)||n.conversationPhase;let a=(null==(o=({social_response:{friendly:["Hello!","Hi there!","Hey!","Greetings!"],helpful:["Hello!","Hi!","Welcome!"],analytical:["Hello.","Greetings."],professional:["Good day.","Hello."]},acknowledgment_with_followup:{friendly:["That's wonderful!","How nice!","Great!"],helpful:["I understand.","I see.","Got it."],analytical:["Noted.","Understood.","I see."],professional:["Acknowledged.","Understood."]},informative_answer:{friendly:["Let me help with that!","I'd be happy to explain!"],helpful:["I can help with that.","Let me assist you."],analytical:["Based on my analysis,","From my understanding,"],professional:["I can provide that information."]},supportive_response:{friendly:["I'm here to help!","I'd love to assist!"],helpful:["I'm here to help.","I can assist you."],analytical:["I can provide assistance.","I'm available to help."],professional:["I'm available to assist."]},gracious_acknowledgment:{friendly:["You're so welcome!","My pleasure!"],helpful:["You're welcome!","Happy to help!"],analytical:["You're welcome.","Glad I could help."],professional:["You're welcome."]}})[i])?void 0:o[t.personality])||[""];if(0===a.length)return"";let s=a[0];return"high"===t.enthusiasm&&a.length>1?s=a[Math.min(1,a.length-1)]:"low"===t.enthusiasm&&(s=a[a.length-1]),s}generateCore(e,t){let n=e.responseType;switch(e.semanticContext,e.pragmaticContext,n){case"social_response":return this.generateSocialCore(e,t);case"acknowledgment_with_followup":return this.generateAcknowledgmentCore(e,t);case"informative_answer":return this.generateInformativeCore(e,t);case"supportive_response":return this.generateSupportiveCore(e,t);case"gracious_acknowledgment":return this.generateGraciousCore(e,t);case"welcoming_response":return this.generateWelcomingCore(e,t);case"detailed_explanation":return this.generateDetailedCore(e,t);case"transitional_response":return this.generateTransitionalCore(e,t);default:return this.generateDefaultCore(e,t)}}generateSocialCore(e,t){let n=this.getBotIdentityDescription(t),o=this.getCapabilityDescription(t);return"detailed"===t.verbosity?"".concat(n," ").concat(o):"moderate"===t.verbosity?n:"I'm PrimeBot."}generateAcknowledgmentCore(e,t){var n;let o=(null==(n=e.semanticContext)?void 0:n.entities)||[];if(o.length>=2){let e=o[0],n=o[1],i=this.schemaVocabulary.inferEntityType(e);return this.generateEntityAcknowledgment(e,n,i,t)}if(1===o.length){let e=o[0];return this.generateNameAcknowledgment(e,t)}return this.generateGenericAcknowledgment(t)}generateEntityAcknowledgment(e,t,n,o){let i=this.getEntityAcknowledgmentTemplates(o),a=i[Math.floor(Math.random()*i.length)].replace("{entityType}",e).replace("{entityName}",t);if(n&&"concise"!==o.verbosity){let i=this.generateSchemaContext(e,t,n,o);i&&(a+=" ".concat(i))}return a}getEntityAcknowledgmentTemplates(e){switch(e.personality){case"friendly":return["It's lovely to know that your {entityType} is named {entityName}!","What a wonderful name for your {entityType} - {entityName}!","I love that your {entityType} is called {entityName}!"];case"helpful":return["I understand that your {entityType} is named {entityName}.","Thank you for telling me about {entityName}, your {entityType}.","I've noted that your {entityType} is named {entityName}."];case"analytical":return["I've recorded that your {entityType} has the name {entityName}.","Entity relationship noted: {entityType} hasName {entityName}.","I understand the naming relationship for your {entityType}."];case"professional":return["I acknowledge that your {entityType} is named {entityName}.","Thank you for providing the name of your {entityType}.","I have recorded the information about {entityName}."];default:return["I understand that your {entityType} is named {entityName}."]}}generateSchemaContext(e,t,n,o){if(!this.schemaVocabulary.getEntityInfo(n))return"";switch(this.schemaVocabulary.getValidProperties(n),n){case"Animal":if("friendly"===o.personality)return"Tell me more about ".concat(t," - what kind of ").concat(e," is ").concat(t,"?");if("analytical"===o.personality)return"As an Animal entity, ".concat(t," has properties like species and breed.");return"What kind of ".concat(e," is ").concat(t,"?");case"Vehicle":if("friendly"===o.personality)return"I'd love to hear more about ".concat(t,"! What kind of ").concat(e," is it?");return"What type of ".concat(e," is ").concat(t,"?");case"Person":if("friendly"===o.personality)return"It's nice to meet ".concat(t,"! Tell me more about them.");return"Tell me more about ".concat(t,".");default:return"Tell me more about ".concat(t,".")}}generateNameAcknowledgment(e,t){let n=this.getNameAcknowledgmentTemplates(t);return n[Math.floor(Math.random()*n.length)].replace("{name}",e)}getNameAcknowledgmentTemplates(e){switch(e.personality){case"friendly":return["It's wonderful to meet you, {name}!","Nice to meet you, {name}!","Hello {name}! Great to meet you!"];case"helpful":return["Nice to meet you, {name}!","Hello {name}! I'm here to help.","Welcome, {name}!"];case"analytical":return["Acknowledged, {name}.","Hello {name}.","Identity recorded: {name}."];case"professional":return["Good to meet you, {name}.","Hello {name}.","Welcome, {name}."];default:return["Nice to meet you, {name}!"]}}generateInformativeCore(e,t){var n;let o=e.semanticContext,i=e.pragmaticContext,a=(null==(n=i.conversationHistory[i.conversationHistory.length-1])?void 0:n.text)||"",s=this.handleSemanticQuery(e,t);if(s)return s;if((null==o?void 0:o.entities)&&o.entities.length>0){let e=o.entities[0],n=this.schemaVocabulary.inferEntityType(e);if(n)return this.generateEntityInformation(e,n,t)}throw Error('No semantic query handler found for input: "'.concat(a,'". Available entity memory: ').concat(JSON.stringify(Object.fromEntries(i.entityMemory))))}handleSemanticQuery(e,t){var n;let o=e.pragmaticContext,i=(null==(n=o.conversationHistory[o.conversationHistory.length-1])?void 0:n.text)||"";if(console.log("\uD83D\uDD0D Handling semantic query for:",i),console.log("\uD83D\uDD0D Available entity memory:",Object.fromEntries(o.entityMemory)),i.toLowerCase().includes("who are you")||i.toLowerCase().includes("what is your name"))return this.handleBotIdentityQuery(t);if(i.toLowerCase().includes("what is my name"))return this.handleNameQuery(o,t);let a=i.match(/what is my (\w+)'?s? name/i);if(a){let e=a[1];return this.handleEntityNameQuery(e,o,t)}let s=i.match(/what is my (\w+)'s name/i);if(s){let e=s[1];return this.handleEntityNameQuery(e,o,t)}let r=i.match(/who is (\w+)/i);if(r){let e=r[1];return this.handleWhoIsQuery(e,o,t)}return null}handleBotIdentityQuery(e){switch(e.personality){case"friendly":return"I'm PrimeBot, your friendly AI assistant! I use mathematical prime factorization and semantic understanding to have conversations.";case"analytical":return"I am PrimeBot, an AI system that processes information through mathematical prime factorization and semantic analysis using Schema.org vocabulary.";case"professional":return"I am PrimeBot, an AI assistant specializing in semantic understanding and mathematical analysis.";default:return"I'm PrimeBot, an AI assistant powered by mathematical prime factorization and semantic understanding."}}handleNameQuery(e,t){let n=e.conversationHistory.map(e=>e.text).join(" ").toLowerCase().match(/my name is (\w+)/i);if(n){let e=n[1];switch(t.personality){case"friendly":return"Your name is ".concat(e,"! I remember you telling me that.");case"analytical":return"Based on our conversation history, your name is ".concat(e,".");case"professional":return"According to our conversation, your name is ".concat(e,".");default:return"Your name is ".concat(e,".")}}switch(t.personality){case"friendly":return"I don't recall you mentioning your name yet. I'd love to know what to call you!";case"helpful":default:return"I don't recall you mentioning your name. What is your name?";case"analytical":return"No name information found in conversation history. Please provide your name."}}handleEntityNameQuery(e,t,n){let o=t.conversationHistory.map(e=>e.text).join(" ").toLowerCase(),i=RegExp("my ".concat(e,"'?s? name is (\\w+)"),"i"),a=o.match(i);if(a){let t=a[1],o=this.schemaVocabulary.inferEntityType(e),i="Your ".concat(e," is named ").concat(t,".");if(o&&"concise"!==n.verbosity){let a=this.generateContextualNote(e,t,o,n);a&&(i+=" ".concat(a))}return i}switch(n.personality){case"friendly":return"I don't recall you mentioning your ".concat(e,"'s name. What is your ").concat(e," called?");case"helpful":default:return"I don't recall you mentioning your ".concat(e,"'s name. What is your ").concat(e,"'s name?");case"analytical":return"No naming information found for entity type: ".concat(e,". Please provide the name.")}}handleWhoIsQuery(e,t,n){for(let[o,i]of t.entityMemory)if(i.value.toLowerCase()===e.toLowerCase()){if(o.endsWith("_name")){let t=o.replace("_name","");switch(n.personality){case"friendly":return"".concat(e," is your ").concat(t,"! I remember you telling me about them.");case"analytical":return"Based on our conversation history, ".concat(e," is identified as your ").concat(t,".");case"professional":return"According to our conversation, ".concat(e," is your ").concat(t,".");default:return"".concat(e," is your ").concat(t,".")}}else if("user_name"===o)return"".concat(e," is you! That's your name.")}switch(n.personality){case"friendly":return"I don't recall you mentioning anyone named ".concat(e,". Could you tell me more about them?");case"helpful":return"I don't have information about ".concat(e,". Who is ").concat(e,"?");case"analytical":return'No entity information found for "'.concat(e,'" in conversation history.');default:return"I don't recall you mentioning ".concat(e,". Who is ").concat(e,"?")}}generateContextualNote(e,t,n,o){switch(n){case"Animal":if("friendly"===o.personality)return"That's a lovely name for ".concat("Animal"===e?"an animal":"a "+e,"!");return"".concat(t," is classified as an Animal entity.");case"Vehicle":return"friendly"===o.personality?"".concat(t," sounds like a great ").concat(e,"!"):"".concat(t," is classified as a Vehicle entity.");default:return""}}generateEntityInformation(e,t,n){let o=this.schemaVocabulary.getEntityInfo(t);return"analytical"===n.personality&&o?"I'm analyzing \"".concat(e,'" as ').concat("Animal"===t?"an":"a"," ").concat(t," entity. This type has properties like ").concat(o.properties.slice(0,3).join(", "),"."):"friendly"===n.personality?'I notice you mentioned "'.concat(e,'" - I understand that as ').concat("Animal"===t?"an":"a"," ").concat(t,". That's interesting!"):"I'm processing information about \"".concat(e,'" as ').concat("Animal"===t?"an":"a"," ").concat(t,".")}generateGenericInformativeResponse(e){switch(e.personality){case"friendly":return"That's a great question! I'm working through the information to give you a helpful answer.";case"analytical":return"I'm analyzing the semantic relationships and mathematical patterns to provide an accurate response.";case"professional":return"I'm processing your request to provide you with the appropriate information.";default:return"I'm analyzing the information to provide you with an answer."}}generateSupportiveCore(e,t){let n=this.getCapabilityDescription(t);switch(t.personality){case"friendly":return"I can understand relationships between people, animals, places, and things. ".concat(n);case"analytical":return"I process information through semantic analysis and mathematical prime factorization. ".concat(n);case"professional":return"I'm equipped to assist with information processing and semantic understanding. ".concat(n);default:return"I can help with understanding relationships and processing information. ".concat(n)}}generateGraciousCore(e,t){switch(t.personality){case"friendly":return"I'm so glad I could help with my semantic understanding!";case"analytical":return"I'm pleased that my mathematical analysis was useful.";case"professional":return"I'm glad I could provide the assistance you needed.";default:return"I'm glad I could help!"}}generateWelcomingCore(e,t){let n=this.getBotIdentityDescription(t),o=this.getCapabilityDescription(t);return"".concat(n," ").concat(o)}generateDetailedCore(e,t){let n=this.generateInformativeCore(e,t),o=this.getTechnicalDetails(e,t);return"".concat(n," ").concat(o)}generateTransitionalCore(e,t){var n,o;let i=e.discourseContext;if((null==i||null==(o=i.topicState)||null==(n=o.topicHistory)?void 0:n.length)>0){let e=i.topicState.topicHistory[i.topicState.topicHistory.length-1];return"I notice we've moved from discussing ".concat(e," to a new topic.")}return"I'm ready to explore whatever you'd like to discuss."}generateDefaultCore(e,t){switch(t.personality){case"friendly":return"I'm listening and ready to understand what you're telling me!";case"analytical":return"I'm processing the semantic relationships in your message.";case"professional":return"I'm ready to assist with your inquiry.";default:return"I'm listening and ready to help."}}generateFollowup(e,t){var n;let o=e.responseType,i=null==(n=e.discourseContext)?void 0:n.conversationPhase;return"acknowledgment_with_followup"===o||"welcoming_response"===o||"exploration"===i?this.generateContextualFollowup(e,t):""}generateContextualFollowup(e,t){var n;switch(null==(n=e.discourseContext)?void 0:n.conversationPhase){case"opening":return this.generateOpeningFollowup(t);case"exploration":return this.generateExplorationFollowup(e,t);case"deepening":return this.generateDeepeningFollowup(e,t);default:return this.generateGenericFollowup(t)}}generateOpeningFollowup(e){switch(e.personality){case"friendly":return"How can I help you today?";case"helpful":return"What can I assist you with?";case"analytical":return"What would you like to explore?";case"professional":return"How may I assist you?";default:return"How can I help?"}}generateExplorationFollowup(e,t){var n;let o=(null==(n=e.semanticContext)?void 0:n.entities)||[];if(o.length>0){let e=o[o.length-1];switch(t.personality){case"friendly":return"Tell me more about ".concat(e,"!");case"analytical":return"What additional information can you provide about ".concat(e,"?");case"professional":return"Please share more details about ".concat(e,".");default:return"Tell me more about ".concat(e,".")}}return this.generateGenericFollowup(t)}generateDeepeningFollowup(e,t){switch(t.personality){case"friendly":return"What else would you like to explore about this?";case"analytical":return"Are there specific aspects you'd like me to analyze further?";case"professional":return"What additional details would be helpful?";default:return"What else would you like to know?"}}generateGenericFollowup(e){switch(e.personality){case"friendly":default:return"What would you like to discuss?";case"analytical":return"What would you like to analyze?";case"professional":return"What would you like to explore?"}}generateClosing(e,t){if("detailed"===t.verbosity&&("welcoming_response"===e.responseType||"detailed_explanation"===e.responseType))switch(t.personality){case"friendly":return"I'm excited to learn more!";case"analytical":return"I'm ready to process more information.";case"professional":return"I look forward to assisting you further."}return""}assembleResponse(e,t){let n=[];return e.opening&&n.push(e.opening),e.core&&n.push(e.core),e.followup&&n.push(e.followup),e.closing&&n.push(e.closing),n.join(" ")}getBotIdentityDescription(e){switch(e.personality){case"friendly":return"I'm PrimeBot, your friendly AI assistant powered by mathematical prime factorization and semantic understanding.";case"analytical":return"I'm PrimeBot, an AI system that processes information through mathematical prime factorization and semantic analysis.";case"professional":return"I'm PrimeBot, an AI assistant specializing in semantic understanding and mathematical analysis.";default:return"I'm PrimeBot, powered by mathematical prime factorization and semantic understanding."}}getCapabilityDescription(e){switch(e.verbosity){case"detailed":return"I can understand relationships between people, animals, places, and things using Schema.org vocabulary, maintain conversation memory, and provide contextual responses based on mathematical prime resonance.";case"moderate":return"I can understand relationships between entities and maintain conversation context.";case"concise":return"I understand entity relationships and context.";default:return"I can help with understanding relationships and processing information."}}getTechnicalDetails(e,t){return"analytical"!==t.personality?"":"Using mathematical prime factorization and Schema.org semantic relationships for analysis."}generateGenericAcknowledgment(e){switch(e.personality){case"friendly":return"That's interesting! I'm learning about what you're telling me.";case"analytical":return"Information processed and stored in semantic memory.";case"professional":return"I acknowledge the information you've provided.";default:return"I understand. Thank you for sharing that with me."}}constructor(e){this.schemaVocabulary=e,this.defaultStyle={formality:"neutral",enthusiasm:"medium",verbosity:"moderate",personality:"helpful"}}}class p{async initialize(){try{console.log("\uD83D\uDE80 Initializing PrimeLM Core..."),this.embeddingPipeline=await (0,a.TkF)("feature-extraction","Xenova/all-MiniLM-L6-v2"),await this.bootstrapChatbotKnowledge(),this.isInitialized=!0,console.log("✅ PrimeLM Core initialized successfully")}catch(e){throw console.error("❌ Failed to initialize PrimeLM Core:",e),e}}async bootstrapChatbotKnowledge(){if(!this.embeddingPipeline)throw Error("Embedding pipeline not initialized");try{let e=new s(this.embeddingPipeline);this.knowledgeBase=await e.bootstrapFromTokenizer(),this.embeddingsModel.vocabulary=this.knowledgeBase.conceptEmbeddings,this.embeddingsModel.concepts=this.knowledgeBase.conceptEmbeddings,this.embeddingsModel.relationships=this.knowledgeBase.semanticClusters,this.populateChatbotIdentity()}catch(e){throw console.error("❌ Knowledge bootstrap failed:",e),Error("Knowledge bootstrap failed: ".concat(e instanceof Error?e.message:String(e)))}}populateChatbotIdentity(){if(!this.knowledgeBase)return;let e={},t=[];for(let n of this.knowledgeBase.vocabulary.values())Object.entries(n.primeFactors).forEach(t=>{let[n,o]=t,i=parseInt(n);e[i]=(e[i]||0)+o}),t.push(n.embedding);if(t.length>0){let n=this.calculateCentroidEmbedding(t);this.chatbotUser.identity.embeddings=n,this.chatbotUser.identity.primeFactors=e}}calculateCentroidEmbedding(e){if(0===e.length)return Array(384).fill(0);let t=Array(e[0].length).fill(0);return e.forEach(e=>{e.forEach((e,n)=>{t[n]+=e})}),t.map(t=>t/e.length)}async processConversation(e){if(!this.isInitialized||!this.embeddingPipeline)throw Error("PrimeCore not initialized");console.log('\uD83D\uDD2C Processing input: "'.concat(e,'"'));let t=await this.generateEmbeddings(e),n=c.embeddingsToPrimes(t);this.updateUserState(this.humanUser,e,t,n);let o=this.generateResponsePrimes(n),i=await this.generateResponseText(o),a=await this.generateEmbeddings(i);return this.updateUserState(this.chatbotUser,i,a,o),console.log('✅ Generated response: "'.concat(i,'"')),i}async generateEmbeddings(e){if(!this.embeddingPipeline)throw Error("Embedding pipeline not initialized");return Array.from((await this.embeddingPipeline(e)).data)}updateUserState(e,t,n,o){e.conversationState.embeddings=n,e.conversationState.primeFactors=o,e.conversationState.context.push(t),e.conversationState.turnCount++,e.conversationState.context.length>10&&(e.conversationState.context=e.conversationState.context.slice(-10)),0===e.identity.embeddings.length?(e.identity.embeddings=[...n],e.identity.primeFactors={...o}):(e.identity.embeddings=e.identity.embeddings.map((e,t)=>.9*e+.1*n[t]),e.identity.primeFactors=c.combineFactors(e.identity.primeFactors,o,.9)),this.updateEmbeddingsModel(t,n)}updateEmbeddingsModel(e,t){let n=e.toLowerCase().split(/\W+/).filter(e=>e.length>2);n.forEach(e=>{this.embeddingsModel.vocabulary.set(e,[...t]),e.length>4&&this.embeddingsModel.concepts.set(e,[...t])}),n.length>1&&n.forEach((e,t)=>{let o=n.filter((e,n)=>n!==t);this.embeddingsModel.relationships.set(e,o)})}generateResponsePrimes(e){let t,n=c.calculateCoherence(e,this.chatbotUser.conversationState.primeFactors);return console.log("\uD83E\uDDEE Coherence score: ".concat((100*n).toFixed(1),"%")),t=n>.1?this.amplifyResonance(e):this.createHarmonic(e),t=this.addPersonalityFactors(t)}amplifyResonance(e){let t={};Object.entries(e).forEach(e=>{let[n,o]=e;t[parseInt(n)]=Math.floor(1.3*o)});let n=c.generatePrimes(100);return t[n[10]]=8,t[n[15]]=6,t}createHarmonic(e){let t={};Object.entries(e).sort((e,t)=>{let[,n]=e,[,o]=t;return o-n}).slice(0,5).forEach(e=>{let[n,o]=e;t[parseInt(n)+2]=Math.floor(.7*o)});let n=c.generatePrimes(50);return t[n[5]]=10,t[n[8]]=8,t}addPersonalityFactors(e){let t={...e},n=c.generatePrimes(30);return t[n[12]]=5,t[n[18]]=4,t[n[22]]=3,t}async generateResponseText(e){if(console.log("\uD83D\uDD0D Generating response text using Phase 2: Discourse + Generative layers..."),console.log("Knowledge base available:",!!this.knowledgeBase),!this.knowledgeBase)throw console.log("⚠️ No knowledge base available"),Error("No knowledge base available - bootstrap failed");let t=this.humanUser.conversationState.context[this.humanUser.conversationState.context.length-1],n=this.semanticLayer.analyzeSemanticContext(t),o=this.pragmaticLayer.getContextForResponse();o.currentTopic,o.activeIntents,Object.entries(o.relevantEntities),o.conversationGoals,o.recentHistory,this.pragmaticLayer.processTurn("human",t,n.intent,n.entities.reduce((e,t,n)=>(e["entity_".concat(n)]=t,e),{}),n);let i=this.pragmaticLayer.getContextForResponse(),a={currentTopic:i.currentTopic,activeIntents:i.activeIntents,entityMemory:new Map(Object.entries(i.relevantEntities)),conversationGoals:i.conversationGoals,userPreferences:{},conversationHistory:i.recentHistory},s=this.discourseLayer.analyzeDiscourseContext(t,n,a),c={responseType:s.expectedResponseType,semanticContext:n,discourseContext:s,pragmaticContext:a,primeResonance:e},l=this.generativeLayer.generateResponse(c);if(l)return console.log("\uD83C\uDFA8 Generated dynamic response:",l),l;console.log("Vocabulary size:",this.knowledgeBase.vocabulary.size),console.log("Vocabulary primes available:",this.knowledgeBase.vocabularyPrimes.size);let h=new r,u=h.findMostResonantWords(e,this.knowledgeBase.vocabularyPrimes,5),d=h.applyContextualWeighting(u,this.humanUser.conversationState.context,1.5),m=this.semanticLayer.enhanceResonanceWithSemantics(d.map(e=>({word:e.word,resonance:e.resonance})),n);if(console.log("Resonant words found:",m.map(e=>"".concat(e.word,": ").concat(e.resonance.toFixed(1)))),m.length>0){let t=d.map(e=>{let t=m.find(t=>t.word===e.word);return{...e,resonance:t?t.resonance:e.resonance}}).sort((e,t)=>t.resonance-e.resonance),o=this.generateSemanticResonanceResponse(t,n,e);return console.log("Generated semantic-resonance response:",o),o}return console.log("No resonant words found, using basic response"),this.generateBasicResponse(e)}primesToEmbeddings(e){let t=Array(384).fill(0),n=c.generatePrimes(384);return Object.entries(e).forEach(e=>{let[o,i]=e,a=parseInt(o),s=n.indexOf(a);-1!==s&&(t[s]=i/1e3)}),t}findClosestConcept(e){let t=null,n=-1;for(let[o,i]of this.embeddingsModel.concepts){let a=this.calculateCosineSimilarity(e,i);a>n&&(n=a,t=o)}return n>.3?t:null}calculateCosineSimilarity(e,t){let n=e.reduce((e,n,o)=>e+n*t[o],0),o=Math.sqrt(e.reduce((e,t)=>e+t*t,0)),i=Math.sqrt(t.reduce((e,t)=>e+t*t,0));return o&&i?n/(o*i):0}async generateTextFromConcept(e,t){let n=c.calculateMagnitude(t),o=this.getConceptVariations(e),i=Math.floor(n/10)%o.length;return o[i]}getConceptVariations(e){let t={};for(let[n]of this.embeddingsModel.vocabulary)t[e]||(t[e]=[]),t[e].push("I understand you're interested in ".concat(n,". Let me help with that."));return t[e]||["I'm processing information related to ".concat(e,".")]}findMostSimilarConcepts(e,t){let n=[];for(let[t,o]of this.embeddingsModel.concepts){let i=this.calculateCosineSimilarity(e,o);n.push({concept:t,similarity:i})}let o=n.sort((e,t)=>t.similarity-e.similarity);console.log("Top similarities:",o.slice(0,5).map(e=>"".concat(e.concept,": ").concat(e.similarity.toFixed(3))));let i=o.slice(0,t).filter(e=>e.similarity>.01);return console.log("Filtered similar concepts:",i.map(e=>"".concat(e.concept,": ").concat(e.similarity.toFixed(3)))),i.map(e=>e.concept)}generateSemanticResonanceResponse(e,t,n){console.log("\uD83C\uDFAD Generating semantic-enhanced resonance response..."),console.log("Intent:",t.intent),console.log("Semantic boosts:",t.semanticBoosts);let o=e[0];switch(t.intent){case"GREETING":if("hello"===o.word||t.semanticBoosts.includes("hello"))return"Hello! I'm PrimeBot. How can I help you today?";return"Hello! Nice to meet you. I'm PrimeBot, powered by mathematical prime factorization.";case"IDENTITY_INTRODUCTION":if(t.entities.length>0){let e=t.entities[0];return"Nice to meet you, ".concat(e,"! I'm PrimeBot. How can I assist you today?")}return"Nice to meet you! I'm PrimeBot. What's your name?";case"ENTITY_INTRODUCTION":if(t.entities.length>=2){let e=t.entities[0],n=t.entities[1];return"Nice to know that your ".concat(e," is named ").concat(n,"! Tell me more about ").concat(n,".")}return"That's interesting! Tell me more about that.";case"IDENTITY_QUERY":let i=this.humanUser.conversationState.context.join(" ").toLowerCase().match(/my name is (\w+)/i);if(i)return"Based on our conversation, your name is ".concat(i[1],". Is that correct?");return"I don't recall you mentioning your name. What is your name?";case"HELP_REQUEST":return"I'm here to help! What would you like to know or discuss?";case"GRATITUDE":return"You're welcome! I'm glad I could help.";case"POSITIVE_FEEDBACK":return"That's wonderful! Is there anything else I can help you with?";case"INFORMATION_REQUEST":case"QUESTION":if(o&&o.resonance>1e3)return"I'm analyzing the concept of \"".concat(o.word,'" to answer your question. What specifically would you like to know?');return"That's a great question! I'm processing the mathematical patterns to provide you with an answer.";case"KNOWLEDGE_REQUEST":return"I process information through mathematical analysis. What would you like me to understand?";default:if(o){if(t.semanticBoosts.includes(o.word))return"I notice you're particularly interested in \"".concat(o.word,"\". The mathematical resonance is strong here. Tell me more about what you'd like to explore!");if(o.resonance>2e3)return'The concept of "'.concat(o.word,'" resonates powerfully with my understanding. How can I help you explore this further?');return"I'm processing the mathematical patterns related to \"".concat(o.word,'". What would you like to know about this?')}return"I'm analyzing the semantic and mathematical patterns in your message. Could you tell me more?"}}generateResonanceBasedResponse(e,t){let n=e[0];if(c.calculateMagnitude(t),console.log("\uD83C\uDFAF Generating response for primary resonant word:",n.word),console.log("\uD83D\uDD22 Resonance score:",n.resonance.toFixed(1)),console.log("\uD83D\uDD17 Shared primes:",n.sharedPrimes),console.log("\uD83C\uDFB5 Harmonic matches:",n.harmonicMatches),"hello"===n.word||"hi"===n.word)return"Hello! I'm PrimeBot. How can I help you today?";if("help"===n.word||"assist"===n.word)return"I'm here to help! What would you like to know or discuss?";if("thanks"===n.word||"thank"===n.word)return"You're welcome! I'm glad I could help.";if("good"===n.word||"great"===n.word)return"That's wonderful! Is there anything else I can help you with?";if("name"===n.word||e.some(e=>"name"===e.word)){let e=this.humanUser.conversationState.context.join(" ").toLowerCase();return e.includes("alex")||e.includes("my name is")?"Nice to meet you, Alex! I'm PrimeBot. How can I assist you today?":"I'm PrimeBot, an AI assistant powered by mathematical prime factorization. What's your name?"}if("understand"===n.word||"know"===n.word)return"I process information through mathematical analysis. What would you like me to understand?";if("what"===n.word||e.some(e=>"what"===e.word)){let e=this.humanUser.conversationState.context.join(" ").toLowerCase();return e.includes("what is my name")||e.includes("my name")?"Based on our conversation, your name is Alex. Is that correct?":"That's a great question! I'm processing the mathematical patterns to provide you with an answer."}if(n.sharedPrimes.length>0){let e=n.sharedPrimes.length,t=n.harmonicMatches.length;if(e>=3)return'I sense strong mathematical resonance with "'.concat(n.word,'". Our prime factors align beautifully. What would you like to explore about this?');if(t>0)return'I detect harmonic relationships with "'.concat(n.word,"\". There's an interesting mathematical connection here. Tell me more!")}if(n.resonance>100)return'The concept of "'.concat(n.word,'" resonates strongly with my mathematical understanding. How can I help you with this?');if(e.length>1){let t=e[1];return"I'm processing the mathematical relationship between \"".concat(n.word,'" and "').concat(t.word,'". What specifically interests you about these concepts?')}return"I'm analyzing the prime factorization patterns related to \"".concat(n.word,"\". Could you tell me more about what you'd like to know?")}generateConceptBasedResponse(e,t){let n=c.calculateMagnitude(t),o=e[0],i=this.embeddingsModel.relationships.get(o)||[];if(console.log("\uD83C\uDFAF Generating response for primary concept:",o),console.log("\uD83D\uDD17 Related concepts:",i),"hello"===o||"hi"===o)return"Hello! I'm PrimeBot. How can I help you today?";if("help"===o||"assist"===o)return"I'm here to help! What would you like to know or discuss?";if("thanks"===o||"thank"===o)return"You're welcome! I'm glad I could help.";if("good"===o||"great"===o)return"That's wonderful! Is there anything else I can help you with?";if("name"===o||e.includes("name")){let e=this.humanUser.conversationState.context.join(" ").toLowerCase();return e.includes("alex")||e.includes("my name is")?"Nice to meet you, Alex! I'm PrimeBot. How can I assist you today?":"I'm PrimeBot, an AI assistant powered by mathematical prime factorization. What's your name?"}if("understand"===o||"know"===o)return"I process information through mathematical analysis. What would you like me to understand?";if("what"===o||e.includes("what")){let e=this.humanUser.conversationState.context.join(" ").toLowerCase();return e.includes("what is my name")||e.includes("my name")?"Based on our conversation, your name is Alex. Is that correct?":"That's a great question! I'm processing the mathematical patterns to provide you with an answer."}if(i.length>0){let e=i[Math.floor(n)%i.length];return"count"===o&&i.includes("number")?"I see you're working with numbers and counting. How can I help you with mathematical calculations?":"play"===o&&i.includes("work")?"I understand the balance between work and play. What would you like to explore or discuss?":"I notice you're interested in ".concat(o,". In my understanding, this connects to ").concat(e,". What specifically would you like to know?")}return"I'm processing the concept of \"".concat(o,"\" through my mathematical framework. Could you tell me more about what you'd like to explore?")}generateBasicResponse(e){let t=c.calculateMagnitude(e),n=["I understand. Can you tell me more?","That's interesting. What else would you like to discuss?","I'm processing that information. How can I help you?","I see. What would you like to know?","That makes sense. Is there anything specific I can help with?"];return n[Math.floor(t)%n.length]}getDebugInfo(){return{humanUser:{identity:this.humanUser.identity,conversationState:{...this.humanUser.conversationState,primeCount:Object.keys(this.humanUser.conversationState.primeFactors).length}},chatbotUser:{identity:this.chatbotUser.identity,conversationState:{...this.chatbotUser.conversationState,primeCount:Object.keys(this.chatbotUser.conversationState.primeFactors).length}},coherence:c.calculateCoherence(this.humanUser.conversationState.primeFactors,this.chatbotUser.conversationState.primeFactors)}}constructor(){this.embeddingPipeline=null,this.isInitialized=!1,this.knowledgeBase=null,this.humanUser={identity:{id:"human-001",name:"Human",type:"human",embeddings:[],primeFactors:{},personality:{traits:["curious","conversational"],communicationStyle:"direct",interests:[]}},conversationState:{embeddings:[],primeFactors:{},context:[],turnCount:0},preferences:{topics:[],responseLength:"medium"}},this.chatbotUser={identity:{id:"chatbot-001",name:"PrimeBot",type:"chatbot",embeddings:[],primeFactors:{},personality:{traits:["helpful","analytical","mathematical"],communicationStyle:"thoughtful",interests:["mathematics","conversation","learning"]}},conversationState:{embeddings:[],primeFactors:{},context:[],turnCount:0},preferences:{topics:["mathematics","prime numbers","conversation"],responseLength:"medium"}},this.embeddingsModel={vocabulary:new Map,concepts:new Map,relationships:new Map},this.semanticLayer=new h,this.pragmaticLayer=new u,this.schemaVocabulary=new l,this.discourseLayer=new d(this.schemaVocabulary),this.generativeLayer=new m(this.schemaVocabulary)}}function y(e){let{primeCore:t,showDebug:n}=e;if(!n||!t)return null;let i=t.getDebugInfo();return(0,o.jsxs)("div",{className:"mt-4 p-4 bg-gray-50 rounded-lg text-sm",children:[(0,o.jsx)("h3",{className:"font-semibold text-gray-700 mb-3",children:"Prime Core Debug Info"}),(0,o.jsxs)("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-4",children:[(0,o.jsxs)("div",{children:[(0,o.jsx)("h4",{className:"font-medium text-blue-600 mb-2",children:"Human User"}),(0,o.jsxs)("div",{className:"space-y-1",children:[(0,o.jsxs)("div",{className:"bg-blue-100 px-2 py-1 rounded",children:["ID: ",i.humanUser.identity.id]}),(0,o.jsxs)("div",{className:"bg-blue-100 px-2 py-1 rounded",children:["Turns: ",i.humanUser.conversationState.turnCount]}),(0,o.jsxs)("div",{className:"bg-blue-100 px-2 py-1 rounded",children:["Prime Factors: ",i.humanUser.conversationState.primeCount]}),(0,o.jsxs)("div",{className:"bg-blue-100 px-2 py-1 rounded text-xs",children:["Traits: ",i.humanUser.identity.personality.traits.join(", ")]})]})]}),(0,o.jsxs)("div",{children:[(0,o.jsx)("h4",{className:"font-medium text-purple-600 mb-2",children:"Chatbot User"}),(0,o.jsxs)("div",{className:"space-y-1",children:[(0,o.jsxs)("div",{className:"bg-purple-100 px-2 py-1 rounded",children:["ID: ",i.chatbotUser.identity.id]}),(0,o.jsxs)("div",{className:"bg-purple-100 px-2 py-1 rounded",children:["Turns: ",i.chatbotUser.conversationState.turnCount]}),(0,o.jsxs)("div",{className:"bg-purple-100 px-2 py-1 rounded",children:["Prime Factors: ",i.chatbotUser.conversationState.primeCount]}),(0,o.jsxs)("div",{className:"bg-purple-100 px-2 py-1 rounded text-xs",children:["Traits: ",i.chatbotUser.identity.personality.traits.join(", ")]})]})]})]}),(0,o.jsx)("div",{className:"mt-3 pt-3 border-t border-gray-200",children:(0,o.jsxs)("div",{className:"flex items-center justify-between",children:[(0,o.jsx)("span",{className:"font-medium text-gray-700",children:"Conversation Coherence:"}),(0,o.jsxs)("span",{className:"bg-green-100 px-3 py-1 rounded font-mono",children:[(100*i.coherence).toFixed(1),"%"]})]})})]})}function g(e){let{message:t,showPrimes:n}=e,i="human"===t.sender;return(0,o.jsx)("div",{className:"flex ".concat(i?"justify-end":"justify-start"," mb-4"),children:(0,o.jsxs)("div",{className:"max-w-xs lg:max-w-md px-4 py-2 rounded-lg ".concat(i?"bg-blue-500 text-white":"bg-gray-200 text-gray-800"),children:[(0,o.jsx)("div",{className:"text-sm font-medium mb-1",children:i?"You":"PrimeBot"}),(0,o.jsx)("div",{children:t.text}),n&&t.primeFactors&&(0,o.jsxs)("div",{className:"mt-2 pt-2 border-t border-opacity-20 border-white",children:[(0,o.jsxs)("div",{className:"text-xs opacity-75",children:["Prime Factors: ",Object.keys(t.primeFactors).length]}),void 0!==t.coherence&&(0,o.jsxs)("div",{className:"text-xs opacity-75",children:["Coherence: ",(100*t.coherence).toFixed(1),"%"]})]})]})})}function f(){let[e,t]=(0,i.useState)(null),[n,a]=(0,i.useState)(!0),[s,r]=(0,i.useState)(null),[c,l]=(0,i.useState)([]),[h,u]=(0,i.useState)(""),[d,m]=(0,i.useState)(!1),[f,w]=(0,i.useState)(!0),[b,v]=(0,i.useState)(!1),I=(0,i.useRef)(null);(0,i.useEffect)(()=>{(async()=>{try{console.log("\uD83D\uDE80 Starting PrimeLM initialization...");let e=new p;await e.initialize(),t(e),a(!1),l([{id:"1",text:"Hello! I'm PrimeBot, powered by PrimeLM's Prime Core. I process conversation through mathematical prime factorization. Try asking me something!",sender:"chatbot",timestamp:new Date}])}catch(e){console.error("❌ Failed to initialize PrimeLM:",e),r(e instanceof Error?e.message:"Unknown error"),a(!1)}})()},[]),(0,i.useEffect)(()=>{var e;null==(e=I.current)||e.scrollIntoView({behavior:"smooth"})},[c]);let T=async()=>{if(!h.trim()||!e||d)return;let t={id:Date.now().toString(),text:h.trim(),sender:"human",timestamp:new Date};l(e=>[...e,t]),u(""),m(!0);try{let t=await e.processConversation(h.trim()),n=e.getDebugInfo(),o={id:(Date.now()+1).toString(),text:t,sender:"chatbot",timestamp:new Date,primeFactors:n.chatbotUser.conversationState.primeFactors,coherence:n.coherence};l(e=>[...e,o])}catch(t){console.error("❌ Error processing message:",t);let e={id:(Date.now()+1).toString(),text:"Sorry, I encountered an error processing your message. Please try again.",sender:"chatbot",timestamp:new Date};l(t=>[...t,e])}finally{m(!1)}};return n?(0,o.jsx)("div",{className:"min-h-screen bg-gray-100 flex items-center justify-center",children:(0,o.jsxs)("div",{className:"text-center",children:[(0,o.jsx)("div",{className:"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"}),(0,o.jsx)("h2",{className:"text-xl font-semibold text-gray-700 mb-2",children:"Initializing PrimeLM Core"}),(0,o.jsx)("p",{className:"text-gray-500",children:"Loading neural network models and prime mathematics..."})]})}):s?(0,o.jsx)("div",{className:"min-h-screen bg-gray-100 flex items-center justify-center",children:(0,o.jsxs)("div",{className:"text-center max-w-md",children:[(0,o.jsx)("div",{className:"text-red-500 text-6xl mb-4",children:"⚠️"}),(0,o.jsx)("h2",{className:"text-xl font-semibold text-red-600 mb-2",children:"Initialization Failed"}),(0,o.jsx)("p",{className:"text-gray-600 mb-4",children:s}),(0,o.jsxs)("p",{className:"text-sm text-gray-500",children:["Make sure you have installed the required dependencies:",(0,o.jsx)("br",{}),(0,o.jsx)("code",{className:"bg-gray-200 px-2 py-1 rounded mt-2 inline-block",children:"npm install @xenova/transformers"})]}),(0,o.jsx)("button",{onClick:()=>window.location.reload(),className:"mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600",children:"Retry"})]})}):(0,o.jsx)("div",{className:"min-h-screen bg-gray-100",children:(0,o.jsxs)("div",{className:"max-w-4xl mx-auto p-4",children:[(0,o.jsx)("div",{className:"bg-white rounded-lg shadow-sm p-6 mb-4",children:(0,o.jsxs)("div",{className:"flex items-center justify-between",children:[(0,o.jsxs)("div",{children:[(0,o.jsx)("h1",{className:"text-2xl font-bold text-gray-800",children:"PrimeLM Demo"}),(0,o.jsx)("p",{className:"text-gray-600",children:"Conversational AI through Prime Core mathematics"})]}),(0,o.jsxs)("div",{className:"flex gap-2",children:[(0,o.jsx)("button",{onClick:()=>w(!f),className:"px-3 py-1 rounded text-sm ".concat(f?"bg-blue-500 text-white":"bg-gray-200 text-gray-700"),children:"Debug"}),(0,o.jsx)("button",{onClick:()=>v(!b),className:"px-3 py-1 rounded text-sm ".concat(b?"bg-purple-500 text-white":"bg-gray-200 text-gray-700"),children:"Primes"})]})]})}),(0,o.jsxs)("div",{className:"bg-white rounded-lg shadow-sm mb-4",children:[(0,o.jsxs)("div",{className:"h-96 overflow-y-auto p-4",children:[c.map(e=>(0,o.jsx)(g,{message:e,showPrimes:b},e.id)),d&&(0,o.jsx)("div",{className:"flex justify-start mb-4",children:(0,o.jsx)("div",{className:"bg-gray-200 text-gray-800 max-w-xs lg:max-w-md px-4 py-2 rounded-lg",children:(0,o.jsx)("div",{className:"flex items-center",children:(0,o.jsx)("div",{className:"animate-pulse",children:"Processing through Prime Core..."})})})}),(0,o.jsx)("div",{ref:I})]}),(0,o.jsx)("div",{className:"border-t border-gray-200 p-4",children:(0,o.jsxs)("div",{className:"flex gap-2",children:[(0,o.jsx)("input",{type:"text",value:h,onChange:e=>u(e.target.value),onKeyPress:e=>{"Enter"!==e.key||e.shiftKey||(e.preventDefault(),T())},placeholder:"Type your message...",className:"flex-1 border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500",disabled:d}),(0,o.jsx)("button",{onClick:T,disabled:!h.trim()||d,className:"bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed",children:"Send"})]})})]}),(0,o.jsx)(y,{primeCore:e,showDebug:f}),(0,o.jsxs)("div",{className:"text-center text-sm text-gray-500 mt-4",children:[(0,o.jsxs)("p",{children:[(0,o.jsx)("strong",{children:"PrimeLM Demo:"})," Real neural networks → Prime factorization → Mathematical coherence"]}),(0,o.jsx)("p",{className:"mt-1",children:"No mocking or hard-coding - functional proof of concept implementation"})]})]})})}},2603:()=>{},3052:()=>{},6837:()=>{},7806:()=>{}},e=>{var t=t=>e(e.s=t);e.O(0,[811,138,31,911,441,684,358],()=>t(1934)),_N_E=e.O()}]);