/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/page";
exports.ids = ["app/page"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.tsx&appDir=%2Fworkspaces%2FPrimeLM-Demo%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fworkspaces%2FPrimeLM-Demo&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.tsx&appDir=%2Fworkspaces%2FPrimeLM-Demo%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fworkspaces%2FPrimeLM-Demo&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GlobalError: () => (/* reexport default from dynamic */ next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2___default.a),\n/* harmony export */   __next_app__: () => (/* binding */ __next_app__),\n/* harmony export */   pages: () => (/* binding */ pages),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   tree: () => (/* binding */ tree)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-page/module.compiled */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/module.compiled.js?cc4a\");\n/* harmony import */ var next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/client/components/error-boundary */ \"(rsc)/./node_modules/next/dist/client/components/error-boundary.js\");\n/* harmony import */ var next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_client_components_error_boundary__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/app-render/entry-base */ \"(rsc)/./node_modules/next/dist/server/app-render/entry-base.js\");\n/* harmony import */ var next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__) if([\"default\",\"tree\",\"pages\",\"GlobalError\",\"__next_app__\",\"routeModule\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_3__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\nconst module0 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/layout.tsx */ \"(rsc)/./src/app/layout.tsx\"));\nconst module1 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! next/dist/client/components/not-found-error */ \"(rsc)/./node_modules/next/dist/client/components/not-found-error.js\", 23));\nconst module2 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! next/dist/client/components/forbidden-error */ \"(rsc)/./node_modules/next/dist/client/components/forbidden-error.js\", 23));\nconst module3 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! next/dist/client/components/unauthorized-error */ \"(rsc)/./node_modules/next/dist/client/components/unauthorized-error.js\", 23));\nconst page4 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/page.tsx */ \"(rsc)/./src/app/page.tsx\"));\n\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\nconst tree = {\n        children: [\n        '',\n        {\n        children: ['__PAGE__', {}, {\n          page: [page4, \"/workspaces/PrimeLM-Demo/src/app/page.tsx\"],\n          \n        }]\n      },\n        {\n        'layout': [module0, \"/workspaces/PrimeLM-Demo/src/app/layout.tsx\"],\n'not-found': [module1, \"next/dist/client/components/not-found-error\"],\n'forbidden': [module2, \"next/dist/client/components/forbidden-error\"],\n'unauthorized': [module3, \"next/dist/client/components/unauthorized-error\"],\n        \n      }\n      ]\n      }.children;\nconst pages = [\"/workspaces/PrimeLM-Demo/src/app/page.tsx\"];\n\n\nconst __next_app_require__ = __webpack_require__\nconst __next_app_load_chunk__ = () => Promise.resolve()\nconst __next_app__ = {\n    require: __next_app_require__,\n    loadChunk: __next_app_load_chunk__\n};\n\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppPageRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_PAGE,\n        page: \"/page\",\n        pathname: \"/\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: '',\n        appPaths: []\n    },\n    userland: {\n        loaderTree: tree\n    }\n});\n\n//# sourceMappingURL=app-page.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZwYWdlJnBhZ2U9JTJGcGFnZSZhcHBQYXRocz0lMkZwYWdlJnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGcGFnZS50c3gmYXBwRGlyPSUyRndvcmtzcGFjZXMlMkZQcmltZUxNLURlbW8lMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRndvcmtzcGFjZXMlMkZQcmltZUxNLURlbW8maXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHNCQUFzQixvSkFBZ0Y7QUFDdEcsc0JBQXNCLDBOQUFnRjtBQUN0RyxzQkFBc0IsME5BQWdGO0FBQ3RHLHNCQUFzQixnT0FBbUY7QUFDekcsb0JBQW9CLGdKQUE4RTtBQUdoRztBQUdBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDdUI7QUFHckI7QUFDRiw2QkFBNkIsbUJBQW1CO0FBQ2hEO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFHRTtBQUNGO0FBQ08sd0JBQXdCLHVHQUFrQjtBQUNqRDtBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtb2R1bGUwID0gKCkgPT4gaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvd29ya3NwYWNlcy9QcmltZUxNLURlbW8vc3JjL2FwcC9sYXlvdXQudHN4XCIpO1xuY29uc3QgbW9kdWxlMSA9ICgpID0+IGltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwibmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL25vdC1mb3VuZC1lcnJvclwiKTtcbmNvbnN0IG1vZHVsZTIgPSAoKSA9PiBpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIm5leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9mb3JiaWRkZW4tZXJyb3JcIik7XG5jb25zdCBtb2R1bGUzID0gKCkgPT4gaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCJuZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvdW5hdXRob3JpemVkLWVycm9yXCIpO1xuY29uc3QgcGFnZTQgPSAoKSA9PiBpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi93b3Jrc3BhY2VzL1ByaW1lTE0tRGVtby9zcmMvYXBwL3BhZ2UudHN4XCIpO1xuaW1wb3J0IHsgQXBwUGFnZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcGFnZS9tb2R1bGUuY29tcGlsZWRcIiB3aXRoIHtcbiAgICAndHVyYm9wYWNrLXRyYW5zaXRpb24nOiAnbmV4dC1zc3InXG59O1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiIHdpdGgge1xuICAgICd0dXJib3BhY2stdHJhbnNpdGlvbic6ICduZXh0LXNlcnZlci11dGlsaXR5J1xufTtcbi8vIFdlIGluamVjdCB0aGUgdHJlZSBhbmQgcGFnZXMgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IHRyZWUgPSB7XG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICcnLFxuICAgICAgICB7XG4gICAgICAgIGNoaWxkcmVuOiBbJ19fUEFHRV9fJywge30sIHtcbiAgICAgICAgICBwYWdlOiBbcGFnZTQsIFwiL3dvcmtzcGFjZXMvUHJpbWVMTS1EZW1vL3NyYy9hcHAvcGFnZS50c3hcIl0sXG4gICAgICAgICAgXG4gICAgICAgIH1dXG4gICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICdsYXlvdXQnOiBbbW9kdWxlMCwgXCIvd29ya3NwYWNlcy9QcmltZUxNLURlbW8vc3JjL2FwcC9sYXlvdXQudHN4XCJdLFxuJ25vdC1mb3VuZCc6IFttb2R1bGUxLCBcIm5leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9ub3QtZm91bmQtZXJyb3JcIl0sXG4nZm9yYmlkZGVuJzogW21vZHVsZTIsIFwibmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2ZvcmJpZGRlbi1lcnJvclwiXSxcbid1bmF1dGhvcml6ZWQnOiBbbW9kdWxlMywgXCJuZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvdW5hdXRob3JpemVkLWVycm9yXCJdLFxuICAgICAgICBcbiAgICAgIH1cbiAgICAgIF1cbiAgICAgIH0uY2hpbGRyZW47XG5jb25zdCBwYWdlcyA9IFtcIi93b3Jrc3BhY2VzL1ByaW1lTE0tRGVtby9zcmMvYXBwL3BhZ2UudHN4XCJdO1xuZXhwb3J0IHsgdHJlZSwgcGFnZXMgfTtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgR2xvYmFsRXJyb3IgfSBmcm9tIFwibmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2Vycm9yLWJvdW5kYXJ5XCIgd2l0aCB7XG4gICAgJ3R1cmJvcGFjay10cmFuc2l0aW9uJzogJ25leHQtc2VydmVyLXV0aWxpdHknXG59O1xuY29uc3QgX19uZXh0X2FwcF9yZXF1aXJlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fXG5jb25zdCBfX25leHRfYXBwX2xvYWRfY2h1bmtfXyA9ICgpID0+IFByb21pc2UucmVzb2x2ZSgpXG5leHBvcnQgY29uc3QgX19uZXh0X2FwcF9fID0ge1xuICAgIHJlcXVpcmU6IF9fbmV4dF9hcHBfcmVxdWlyZV9fLFxuICAgIGxvYWRDaHVuazogX19uZXh0X2FwcF9sb2FkX2NodW5rX19cbn07XG5leHBvcnQgKiBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9hcHAtcmVuZGVyL2VudHJ5LWJhc2VcIiB3aXRoIHtcbiAgICAndHVyYm9wYWNrLXRyYW5zaXRpb24nOiAnbmV4dC1zZXJ2ZXItdXRpbGl0eSdcbn07XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBQYWdlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9QQUdFLFxuICAgICAgICBwYWdlOiBcIi9wYWdlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9cIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiAnJyxcbiAgICAgICAgZmlsZW5hbWU6ICcnLFxuICAgICAgICBhcHBQYXRoczogW11cbiAgICB9LFxuICAgIHVzZXJsYW5kOiB7XG4gICAgICAgIGxvYWRlclRyZWU6IHRyZWVcbiAgICB9XG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXBhZ2UuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.tsx&appDir=%2Fworkspaces%2FPrimeLM-Demo%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fworkspaces%2FPrimeLM-Demo&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fhttp-access-fallback%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Flayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fmetadata%2Fasync-metadata.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fmetadata%2Fmetadata-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Frender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fhttp-access-fallback%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Flayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fmetadata%2Fasync-metadata.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fmetadata%2Fmetadata-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Frender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!

/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/client-page.js */ \"(rsc)/./node_modules/next/dist/client/components/client-page.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/client-segment.js */ \"(rsc)/./node_modules/next/dist/client/components/client-segment.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/error-boundary.js */ \"(rsc)/./node_modules/next/dist/client/components/error-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/http-access-fallback/error-boundary.js */ \"(rsc)/./node_modules/next/dist/client/components/http-access-fallback/error-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/layout-router.js */ \"(rsc)/./node_modules/next/dist/client/components/layout-router.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/metadata/async-metadata.js */ \"(rsc)/./node_modules/next/dist/client/components/metadata/async-metadata.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/metadata/metadata-boundary.js */ \"(rsc)/./node_modules/next/dist/client/components/metadata/metadata-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/render-from-template-context.js */ \"(rsc)/./node_modules/next/dist/client/components/render-from-template-context.js\", 23));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRndvcmtzcGFjZXMlMkZQcmltZUxNLURlbW8lMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRmNsaWVudCUyRmNvbXBvbmVudHMlMkZjbGllbnQtcGFnZS5qcyUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjIlMkZ3b3Jrc3BhY2VzJTJGUHJpbWVMTS1EZW1vJTJGbm9kZV9tb2R1bGVzJTJGbmV4dCUyRmRpc3QlMkZjbGllbnQlMkZjb21wb25lbnRzJTJGY2xpZW50LXNlZ21lbnQuanMlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGd29ya3NwYWNlcyUyRlByaW1lTE0tRGVtbyUyRm5vZGVfbW9kdWxlcyUyRm5leHQlMkZkaXN0JTJGY2xpZW50JTJGY29tcG9uZW50cyUyRmVycm9yLWJvdW5kYXJ5LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRndvcmtzcGFjZXMlMkZQcmltZUxNLURlbW8lMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRmNsaWVudCUyRmNvbXBvbmVudHMlMkZodHRwLWFjY2Vzcy1mYWxsYmFjayUyRmVycm9yLWJvdW5kYXJ5LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRndvcmtzcGFjZXMlMkZQcmltZUxNLURlbW8lMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRmNsaWVudCUyRmNvbXBvbmVudHMlMkZsYXlvdXQtcm91dGVyLmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRndvcmtzcGFjZXMlMkZQcmltZUxNLURlbW8lMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRmNsaWVudCUyRmNvbXBvbmVudHMlMkZtZXRhZGF0YSUyRmFzeW5jLW1ldGFkYXRhLmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRndvcmtzcGFjZXMlMkZQcmltZUxNLURlbW8lMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRmNsaWVudCUyRmNvbXBvbmVudHMlMkZtZXRhZGF0YSUyRm1ldGFkYXRhLWJvdW5kYXJ5LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRndvcmtzcGFjZXMlMkZQcmltZUxNLURlbW8lMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRmNsaWVudCUyRmNvbXBvbmVudHMlMkZyZW5kZXItZnJvbS10ZW1wbGF0ZS1jb250ZXh0LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJnNlcnZlcj10cnVlISIsIm1hcHBpbmdzIjoiQUFBQSxvT0FBcUg7QUFDckg7QUFDQSwwT0FBd0g7QUFDeEg7QUFDQSwwT0FBd0g7QUFDeEg7QUFDQSxvUkFBNkk7QUFDN0k7QUFDQSx3T0FBdUg7QUFDdkg7QUFDQSw0UEFBaUk7QUFDakk7QUFDQSxrUUFBb0k7QUFDcEk7QUFDQSxzUUFBc0kiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi93b3Jrc3BhY2VzL1ByaW1lTE0tRGVtby9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2NsaWVudC1wYWdlLmpzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvd29ya3NwYWNlcy9QcmltZUxNLURlbW8vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9jbGllbnQtc2VnbWVudC5qc1wiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL3dvcmtzcGFjZXMvUHJpbWVMTS1EZW1vL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvZXJyb3ItYm91bmRhcnkuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi93b3Jrc3BhY2VzL1ByaW1lTE0tRGVtby9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2h0dHAtYWNjZXNzLWZhbGxiYWNrL2Vycm9yLWJvdW5kYXJ5LmpzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvd29ya3NwYWNlcy9QcmltZUxNLURlbW8vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9sYXlvdXQtcm91dGVyLmpzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvd29ya3NwYWNlcy9QcmltZUxNLURlbW8vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9tZXRhZGF0YS9hc3luYy1tZXRhZGF0YS5qc1wiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL3dvcmtzcGFjZXMvUHJpbWVMTS1EZW1vL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvbWV0YWRhdGEvbWV0YWRhdGEtYm91bmRhcnkuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi93b3Jrc3BhY2VzL1ByaW1lTE0tRGVtby9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3JlbmRlci1mcm9tLXRlbXBsYXRlLWNvbnRleHQuanNcIik7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fhttp-access-fallback%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Flayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fmetadata%2Fasync-metadata.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fmetadata%2Fmetadata-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Frender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fsrc%2Fapp%2Fglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=true!":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fsrc%2Fapp%2Fglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=true!":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!
  \*******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/page.tsx */ \"(rsc)/./src/app/page.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRndvcmtzcGFjZXMlMkZQcmltZUxNLURlbW8lMkZzcmMlMkZhcHAlMkZwYWdlLnRzeCUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZzZXJ2ZXI9dHJ1ZSEiLCJtYXBwaW5ncyI6IkFBQUEsZ0pBQThFIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvd29ya3NwYWNlcy9QcmltZUxNLURlbW8vc3JjL2FwcC9wYWdlLnRzeFwiKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "(rsc)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"c8c3eee22500\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2dsb2JhbHMuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9QcmltZUxNLURlbW8vc3JjL2FwcC9nbG9iYWxzLmNzcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcImM4YzNlZWUyMjUwMFwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/globals.css\n");

/***/ }),

/***/ "(rsc)/./src/app/layout.tsx":
/*!****************************!*\
  !*** ./src/app/layout.tsx ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RootLayout),\n/* harmony export */   metadata: () => (/* binding */ metadata)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _globals_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./globals.css */ \"(rsc)/./src/app/globals.css\");\n\n\nconst metadata = {\n    title: 'PrimeLM Demo',\n    description: 'A basic proof of concept implementation demonstrating PrimeLM\\'s Prime Core in a conversational chatbot.'\n};\nfunction RootLayout({ children }) {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"html\", {\n        lang: \"en\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"body\", {\n            children: children\n        }, void 0, false, {\n            fileName: \"/workspaces/PrimeLM-Demo/src/app/layout.tsx\",\n            lineNumber: 16,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/workspaces/PrimeLM-Demo/src/app/layout.tsx\",\n        lineNumber: 15,\n        columnNumber: 5\n    }, this);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2xheW91dC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQ3NCO0FBRWYsTUFBTUEsV0FBcUI7SUFDaENDLE9BQU87SUFDUEMsYUFBYTtBQUNmLEVBQUM7QUFFYyxTQUFTQyxXQUFXLEVBQ2pDQyxRQUFRLEVBR1Q7SUFDQyxxQkFDRSw4REFBQ0M7UUFBS0MsTUFBSztrQkFDVCw0RUFBQ0M7c0JBQU1IOzs7Ozs7Ozs7OztBQUdiIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9QcmltZUxNLURlbW8vc3JjL2FwcC9sYXlvdXQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgTWV0YWRhdGEgfSBmcm9tICduZXh0J1xuaW1wb3J0ICcuL2dsb2JhbHMuY3NzJ1xuXG5leHBvcnQgY29uc3QgbWV0YWRhdGE6IE1ldGFkYXRhID0ge1xuICB0aXRsZTogJ1ByaW1lTE0gRGVtbycsXG4gIGRlc2NyaXB0aW9uOiAnQSBiYXNpYyBwcm9vZiBvZiBjb25jZXB0IGltcGxlbWVudGF0aW9uIGRlbW9uc3RyYXRpbmcgUHJpbWVMTVxcJ3MgUHJpbWUgQ29yZSBpbiBhIGNvbnZlcnNhdGlvbmFsIGNoYXRib3QuJyxcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUm9vdExheW91dCh7XG4gIGNoaWxkcmVuLFxufToge1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlXG59KSB7XG4gIHJldHVybiAoXG4gICAgPGh0bWwgbGFuZz1cImVuXCI+XG4gICAgICA8Ym9keT57Y2hpbGRyZW59PC9ib2R5PlxuICAgIDwvaHRtbD5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIm1ldGFkYXRhIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsIlJvb3RMYXlvdXQiLCJjaGlsZHJlbiIsImh0bWwiLCJsYW5nIiwiYm9keSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/app/layout.tsx\n");

/***/ }),

/***/ "(rsc)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server.edge */ "(rsc)/./node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-webpack-server-edge.js");
/* harmony import */ var react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,react_server_dom_webpack_server_edge__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call the default export of \"/workspaces/PrimeLM-Demo/src/app/page.tsx\" from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"/workspaces/PrimeLM-Demo/src/app/page.tsx",
"default",
));


/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fhttp-access-fallback%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Flayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fmetadata%2Fasync-metadata.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fmetadata%2Fmetadata-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Frender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fhttp-access-fallback%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Flayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fmetadata%2Fasync-metadata.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fmetadata%2Fmetadata-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Frender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/client-page.js */ \"(ssr)/./node_modules/next/dist/client/components/client-page.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/client-segment.js */ \"(ssr)/./node_modules/next/dist/client/components/client-segment.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/error-boundary.js */ \"(ssr)/./node_modules/next/dist/client/components/error-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/http-access-fallback/error-boundary.js */ \"(ssr)/./node_modules/next/dist/client/components/http-access-fallback/error-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/layout-router.js */ \"(ssr)/./node_modules/next/dist/client/components/layout-router.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/metadata/async-metadata.js */ \"(ssr)/./node_modules/next/dist/client/components/metadata/async-metadata.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/metadata/metadata-boundary.js */ \"(ssr)/./node_modules/next/dist/client/components/metadata/metadata-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/components/render-from-template-context.js */ \"(ssr)/./node_modules/next/dist/client/components/render-from-template-context.js\", 23));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRndvcmtzcGFjZXMlMkZQcmltZUxNLURlbW8lMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRmNsaWVudCUyRmNvbXBvbmVudHMlMkZjbGllbnQtcGFnZS5qcyUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjIlMkZ3b3Jrc3BhY2VzJTJGUHJpbWVMTS1EZW1vJTJGbm9kZV9tb2R1bGVzJTJGbmV4dCUyRmRpc3QlMkZjbGllbnQlMkZjb21wb25lbnRzJTJGY2xpZW50LXNlZ21lbnQuanMlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGd29ya3NwYWNlcyUyRlByaW1lTE0tRGVtbyUyRm5vZGVfbW9kdWxlcyUyRm5leHQlMkZkaXN0JTJGY2xpZW50JTJGY29tcG9uZW50cyUyRmVycm9yLWJvdW5kYXJ5LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRndvcmtzcGFjZXMlMkZQcmltZUxNLURlbW8lMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRmNsaWVudCUyRmNvbXBvbmVudHMlMkZodHRwLWFjY2Vzcy1mYWxsYmFjayUyRmVycm9yLWJvdW5kYXJ5LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRndvcmtzcGFjZXMlMkZQcmltZUxNLURlbW8lMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRmNsaWVudCUyRmNvbXBvbmVudHMlMkZsYXlvdXQtcm91dGVyLmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRndvcmtzcGFjZXMlMkZQcmltZUxNLURlbW8lMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRmNsaWVudCUyRmNvbXBvbmVudHMlMkZtZXRhZGF0YSUyRmFzeW5jLW1ldGFkYXRhLmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRndvcmtzcGFjZXMlMkZQcmltZUxNLURlbW8lMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRmNsaWVudCUyRmNvbXBvbmVudHMlMkZtZXRhZGF0YSUyRm1ldGFkYXRhLWJvdW5kYXJ5LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRndvcmtzcGFjZXMlMkZQcmltZUxNLURlbW8lMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRmNsaWVudCUyRmNvbXBvbmVudHMlMkZyZW5kZXItZnJvbS10ZW1wbGF0ZS1jb250ZXh0LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJnNlcnZlcj10cnVlISIsIm1hcHBpbmdzIjoiQUFBQSxvT0FBcUg7QUFDckg7QUFDQSwwT0FBd0g7QUFDeEg7QUFDQSwwT0FBd0g7QUFDeEg7QUFDQSxvUkFBNkk7QUFDN0k7QUFDQSx3T0FBdUg7QUFDdkg7QUFDQSw0UEFBaUk7QUFDakk7QUFDQSxrUUFBb0k7QUFDcEk7QUFDQSxzUUFBc0kiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi93b3Jrc3BhY2VzL1ByaW1lTE0tRGVtby9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2NsaWVudC1wYWdlLmpzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvd29ya3NwYWNlcy9QcmltZUxNLURlbW8vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9jbGllbnQtc2VnbWVudC5qc1wiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL3dvcmtzcGFjZXMvUHJpbWVMTS1EZW1vL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvZXJyb3ItYm91bmRhcnkuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi93b3Jrc3BhY2VzL1ByaW1lTE0tRGVtby9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2h0dHAtYWNjZXNzLWZhbGxiYWNrL2Vycm9yLWJvdW5kYXJ5LmpzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvd29ya3NwYWNlcy9QcmltZUxNLURlbW8vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9sYXlvdXQtcm91dGVyLmpzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvd29ya3NwYWNlcy9QcmltZUxNLURlbW8vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9tZXRhZGF0YS9hc3luYy1tZXRhZGF0YS5qc1wiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL3dvcmtzcGFjZXMvUHJpbWVMTS1EZW1vL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvbWV0YWRhdGEvbWV0YWRhdGEtYm91bmRhcnkuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi93b3Jrc3BhY2VzL1ByaW1lTE0tRGVtby9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3JlbmRlci1mcm9tLXRlbXBsYXRlLWNvbnRleHQuanNcIik7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fhttp-access-fallback%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Flayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fmetadata%2Fasync-metadata.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fmetadata%2Fmetadata-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Frender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fsrc%2Fapp%2Fglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=true!":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fsrc%2Fapp%2Fglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=true!":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!
  \*******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/page.tsx */ \"(ssr)/./src/app/page.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRndvcmtzcGFjZXMlMkZQcmltZUxNLURlbW8lMkZzcmMlMkZhcHAlMkZwYWdlLnRzeCUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZzZXJ2ZXI9dHJ1ZSEiLCJtYXBwaW5ncyI6IkFBQUEsZ0pBQThFIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvd29ya3NwYWNlcy9QcmltZUxNLURlbW8vc3JjL2FwcC9wYWdlLnRzeFwiKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fworkspaces%2FPrimeLM-Demo%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "(ssr)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PrimeLMChat)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_core_primelm_models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/core/primelm-models */ \"(ssr)/./src/lib/core/primelm-models.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_core_primelm_models__WEBPACK_IMPORTED_MODULE_2__]);\n_lib_core_primelm_models__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n\nfunction DebugPanel({ primeCore, showDebug }) {\n    if (!showDebug || !primeCore) return null;\n    const debugInfo = primeCore.getDebugInfo();\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"mt-4 p-4 bg-gray-50 rounded-lg text-sm\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                className: \"font-semibold text-gray-700 mb-3\",\n                children: \"Prime Core Debug Info\"\n            }, void 0, false, {\n                fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                lineNumber: 22,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"grid grid-cols-1 md:grid-cols-2 gap-4\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h4\", {\n                                className: \"font-medium text-blue-600 mb-2\",\n                                children: \"Human User\"\n                            }, void 0, false, {\n                                fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                lineNumber: 27,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"space-y-1\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"bg-blue-100 px-2 py-1 rounded\",\n                                        children: [\n                                            \"ID: \",\n                                            debugInfo.humanUser.identity.id\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                        lineNumber: 29,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"bg-blue-100 px-2 py-1 rounded\",\n                                        children: [\n                                            \"Turns: \",\n                                            debugInfo.humanUser.conversationState.turnCount\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                        lineNumber: 32,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"bg-blue-100 px-2 py-1 rounded\",\n                                        children: [\n                                            \"Prime Factors: \",\n                                            debugInfo.humanUser.conversationState.primeCount\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                        lineNumber: 35,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"bg-blue-100 px-2 py-1 rounded text-xs\",\n                                        children: [\n                                            \"Traits: \",\n                                            debugInfo.humanUser.identity.personality.traits.join(', ')\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                        lineNumber: 38,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                lineNumber: 28,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                        lineNumber: 26,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h4\", {\n                                className: \"font-medium text-purple-600 mb-2\",\n                                children: \"Chatbot User\"\n                            }, void 0, false, {\n                                fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                lineNumber: 46,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"space-y-1\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"bg-purple-100 px-2 py-1 rounded\",\n                                        children: [\n                                            \"ID: \",\n                                            debugInfo.chatbotUser.identity.id\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                        lineNumber: 48,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"bg-purple-100 px-2 py-1 rounded\",\n                                        children: [\n                                            \"Turns: \",\n                                            debugInfo.chatbotUser.conversationState.turnCount\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                        lineNumber: 51,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"bg-purple-100 px-2 py-1 rounded\",\n                                        children: [\n                                            \"Prime Factors: \",\n                                            debugInfo.chatbotUser.conversationState.primeCount\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                        lineNumber: 54,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"bg-purple-100 px-2 py-1 rounded text-xs\",\n                                        children: [\n                                            \"Traits: \",\n                                            debugInfo.chatbotUser.identity.personality.traits.join(', ')\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                        lineNumber: 57,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                lineNumber: 47,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                        lineNumber: 45,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                lineNumber: 24,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"mt-3 pt-3 border-t border-gray-200\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex items-center justify-between\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: \"font-medium text-gray-700\",\n                            children: \"Conversation Coherence:\"\n                        }, void 0, false, {\n                            fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                            lineNumber: 67,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: \"bg-green-100 px-3 py-1 rounded font-mono\",\n                            children: [\n                                (debugInfo.coherence * 100).toFixed(1),\n                                \"%\"\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                            lineNumber: 68,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                    lineNumber: 66,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                lineNumber: 65,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n        lineNumber: 21,\n        columnNumber: 5\n    }, this);\n}\nfunction MessageBubble({ message, showPrimes }) {\n    const isHuman = message.sender === 'human';\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: `flex ${isHuman ? 'justify-end' : 'justify-start'} mb-4`,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: `max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${isHuman ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-800'}`,\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"text-sm font-medium mb-1\",\n                    children: isHuman ? 'You' : 'PrimeBot'\n                }, void 0, false, {\n                    fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                    lineNumber: 87,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    children: message.text\n                }, void 0, false, {\n                    fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                    lineNumber: 90,\n                    columnNumber: 9\n                }, this),\n                showPrimes && message.primeFactors && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"mt-2 pt-2 border-t border-opacity-20 border-white\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"text-xs opacity-75\",\n                            children: [\n                                \"Prime Factors: \",\n                                Object.keys(message.primeFactors).length\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                            lineNumber: 94,\n                            columnNumber: 13\n                        }, this),\n                        message.coherence !== undefined && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"text-xs opacity-75\",\n                            children: [\n                                \"Coherence: \",\n                                (message.coherence * 100).toFixed(1),\n                                \"%\"\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                            lineNumber: 98,\n                            columnNumber: 15\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                    lineNumber: 93,\n                    columnNumber: 11\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n            lineNumber: 82,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n        lineNumber: 81,\n        columnNumber: 5\n    }, this);\n}\nfunction PrimeLMChat() {\n    const [primeCore, setPrimeCore] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isInitializing, setIsInitializing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [initError, setInitError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [inputText, setInputText] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [isProcessing, setIsProcessing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showDebug, setShowDebug] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [showPrimes, setShowPrimes] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const messagesEndRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"PrimeLMChat.useEffect\": ()=>{\n            const initializePrimeCore = {\n                \"PrimeLMChat.useEffect.initializePrimeCore\": async ()=>{\n                    try {\n                        console.log('🚀 Starting PrimeLM initialization...');\n                        const core = new _lib_core_primelm_models__WEBPACK_IMPORTED_MODULE_2__.PrimeCore();\n                        await core.initialize();\n                        setPrimeCore(core);\n                        setIsInitializing(false);\n                        // Add welcome message\n                        setMessages([\n                            {\n                                id: '1',\n                                text: \"Hello! I'm PrimeBot, powered by PrimeLM's Prime Core. I process conversation through mathematical prime factorization. Try asking me something!\",\n                                sender: 'chatbot',\n                                timestamp: new Date()\n                            }\n                        ]);\n                    } catch (error) {\n                        console.error('❌ Failed to initialize PrimeLM:', error);\n                        setInitError(error instanceof Error ? error.message : 'Unknown error');\n                        setIsInitializing(false);\n                    }\n                }\n            }[\"PrimeLMChat.useEffect.initializePrimeCore\"];\n            initializePrimeCore();\n        }\n    }[\"PrimeLMChat.useEffect\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"PrimeLMChat.useEffect\": ()=>{\n            messagesEndRef.current?.scrollIntoView({\n                behavior: 'smooth'\n            });\n        }\n    }[\"PrimeLMChat.useEffect\"], [\n        messages\n    ]);\n    const handleSendMessage = async ()=>{\n        if (!inputText.trim() || !primeCore || isProcessing) return;\n        const userMessage = {\n            id: Date.now().toString(),\n            text: inputText.trim(),\n            sender: 'human',\n            timestamp: new Date()\n        };\n        setMessages((prev)=>[\n                ...prev,\n                userMessage\n            ]);\n        setInputText('');\n        setIsProcessing(true);\n        try {\n            const response = await primeCore.processConversation(inputText.trim());\n            const debugInfo = primeCore.getDebugInfo();\n            const botMessage = {\n                id: (Date.now() + 1).toString(),\n                text: response,\n                sender: 'chatbot',\n                timestamp: new Date(),\n                primeFactors: debugInfo.chatbotUser.conversationState.primeFactors,\n                coherence: debugInfo.coherence\n            };\n            setMessages((prev)=>[\n                    ...prev,\n                    botMessage\n                ]);\n        } catch (error) {\n            console.error('❌ Error processing message:', error);\n            const errorMessage = {\n                id: (Date.now() + 1).toString(),\n                text: \"Sorry, I encountered an error processing your message. Please try again.\",\n                sender: 'chatbot',\n                timestamp: new Date()\n            };\n            setMessages((prev)=>[\n                    ...prev,\n                    errorMessage\n                ]);\n        } finally{\n            setIsProcessing(false);\n        }\n    };\n    const handleKeyPress = (e)=>{\n        if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            handleSendMessage();\n        }\n    };\n    if (isInitializing) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"min-h-screen bg-gray-100 flex items-center justify-center\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-center\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4\"\n                    }, void 0, false, {\n                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                        lineNumber: 206,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                        className: \"text-xl font-semibold text-gray-700 mb-2\",\n                        children: \"Initializing PrimeLM Core\"\n                    }, void 0, false, {\n                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                        lineNumber: 207,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-gray-500\",\n                        children: \"Loading neural network models and prime mathematics...\"\n                    }, void 0, false, {\n                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                        lineNumber: 208,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                lineNumber: 205,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n            lineNumber: 204,\n            columnNumber: 7\n        }, this);\n    }\n    if (initError) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"min-h-screen bg-gray-100 flex items-center justify-center\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-center max-w-md\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"text-red-500 text-6xl mb-4\",\n                        children: \"⚠️\"\n                    }, void 0, false, {\n                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                        lineNumber: 218,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                        className: \"text-xl font-semibold text-red-600 mb-2\",\n                        children: \"Initialization Failed\"\n                    }, void 0, false, {\n                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                        lineNumber: 219,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-gray-600 mb-4\",\n                        children: initError\n                    }, void 0, false, {\n                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                        lineNumber: 220,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-sm text-gray-500\",\n                        children: [\n                            \"Make sure you have installed the required dependencies:\",\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"br\", {}, void 0, false, {\n                                fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                lineNumber: 223,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"code\", {\n                                className: \"bg-gray-200 px-2 py-1 rounded mt-2 inline-block\",\n                                children: \"npm install @xenova/transformers\"\n                            }, void 0, false, {\n                                fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                lineNumber: 224,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                        lineNumber: 221,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: ()=>window.location.reload(),\n                        className: \"mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\",\n                        children: \"Retry\"\n                    }, void 0, false, {\n                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                        lineNumber: 228,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                lineNumber: 217,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n            lineNumber: 216,\n            columnNumber: 7\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-h-screen bg-gray-100\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"max-w-4xl mx-auto p-4\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"bg-white rounded-lg shadow-sm p-6 mb-4\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex items-center justify-between\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                                        className: \"text-2xl font-bold text-gray-800\",\n                                        children: \"PrimeLM Demo\"\n                                    }, void 0, false, {\n                                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                        lineNumber: 246,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        className: \"text-gray-600\",\n                                        children: \"Conversational AI through Prime Core mathematics\"\n                                    }, void 0, false, {\n                                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                        lineNumber: 247,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                lineNumber: 245,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex gap-2\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        onClick: ()=>setShowDebug(!showDebug),\n                                        className: `px-3 py-1 rounded text-sm ${showDebug ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`,\n                                        children: \"Debug\"\n                                    }, void 0, false, {\n                                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                        lineNumber: 250,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        onClick: ()=>setShowPrimes(!showPrimes),\n                                        className: `px-3 py-1 rounded text-sm ${showPrimes ? 'bg-purple-500 text-white' : 'bg-gray-200 text-gray-700'}`,\n                                        children: \"Primes\"\n                                    }, void 0, false, {\n                                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                        lineNumber: 258,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                lineNumber: 249,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                        lineNumber: 244,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                    lineNumber: 243,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"bg-white rounded-lg shadow-sm mb-4\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"h-96 overflow-y-auto p-4\",\n                            children: [\n                                messages.map((message)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MessageBubble, {\n                                        message: message,\n                                        showPrimes: showPrimes\n                                    }, message.id, false, {\n                                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                        lineNumber: 274,\n                                        columnNumber: 15\n                                    }, this)),\n                                isProcessing && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex justify-start mb-4\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"bg-gray-200 text-gray-800 max-w-xs lg:max-w-md px-4 py-2 rounded-lg\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"flex items-center\",\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"animate-pulse\",\n                                                children: \"Processing through Prime Core...\"\n                                            }, void 0, false, {\n                                                fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                                lineNumber: 284,\n                                                columnNumber: 21\n                                            }, this)\n                                        }, void 0, false, {\n                                            fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                            lineNumber: 283,\n                                            columnNumber: 19\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                        lineNumber: 282,\n                                        columnNumber: 17\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                    lineNumber: 281,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    ref: messagesEndRef\n                                }, void 0, false, {\n                                    fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                    lineNumber: 289,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                            lineNumber: 272,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"border-t border-gray-200 p-4\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex gap-2\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                        type: \"text\",\n                                        value: inputText,\n                                        onChange: (e)=>setInputText(e.target.value),\n                                        onKeyPress: handleKeyPress,\n                                        placeholder: \"Type your message...\",\n                                        className: \"flex-1 border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\",\n                                        disabled: isProcessing\n                                    }, void 0, false, {\n                                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                        lineNumber: 295,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        onClick: handleSendMessage,\n                                        disabled: !inputText.trim() || isProcessing,\n                                        className: \"bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed\",\n                                        children: \"Send\"\n                                    }, void 0, false, {\n                                        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                        lineNumber: 304,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                lineNumber: 294,\n                                columnNumber: 13\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                            lineNumber: 293,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                    lineNumber: 271,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(DebugPanel, {\n                    primeCore: primeCore,\n                    showDebug: showDebug\n                }, void 0, false, {\n                    fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                    lineNumber: 316,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"text-center text-sm text-gray-500 mt-4\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: \"PrimeLM Demo:\"\n                                }, void 0, false, {\n                                    fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                                    lineNumber: 321,\n                                    columnNumber: 13\n                                }, this),\n                                \" Real neural networks → Prime factorization → Mathematical coherence\"\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                            lineNumber: 320,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            className: \"mt-1\",\n                            children: \"No mocking or hard-coding - functional proof of concept implementation\"\n                        }, void 0, false, {\n                            fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                            lineNumber: 323,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n                    lineNumber: 319,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n            lineNumber: 241,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/workspaces/PrimeLM-Demo/src/app/page.tsx\",\n        lineNumber: 240,\n        columnNumber: 5\n    }, this);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBRW9CLE1BQU0sQ0FBQ0YsS0FBSzt3Q0FDNUNHLFlBQVl0Qjt3Q0FDWnVCLGFBQVk7d0NBQ1p2RixXQUFVO3dDQUNWd0YsVUFBVW5EOzs7Ozs7a0RBRVosOERBQUNvQzt3Q0FDQ0MsU0FBU3BCO3dDQUNUa0MsVUFBVSxDQUFDckQsVUFBVW9CLElBQUksTUFBTWxCO3dDQUMvQnJDLFdBQVU7a0RBQ1g7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCQVFQLDhEQUFDTjtvQkFBV0MsV0FBV0E7b0JBQVdDLFdBQVdBOzs7Ozs7OEJBRzdDLDhEQUFDRztvQkFBSUMsV0FBVTs7c0NBQ2IsOERBQUNzRTs7OENBQ0MsOERBQUNtQjs4Q0FBTzs7Ozs7O2dDQUFzQjs7Ozs7OztzQ0FFaEMsOERBQUNuQjs0QkFBRXRFLFdBQVU7c0NBQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBTzlCIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9QcmltZUxNLURlbW8vc3JjL2FwcC9wYWdlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBQcmltZUNvcmUgfSBmcm9tICcuLi9saWIvY29yZS9wcmltZWxtLW1vZGVscyc7XG5cbmludGVyZmFjZSBNZXNzYWdlIHtcbiAgaWQ6IHN0cmluZztcbiAgdGV4dDogc3RyaW5nO1xuICBzZW5kZXI6ICdodW1hbicgfCAnY2hhdGJvdCc7XG4gIHRpbWVzdGFtcDogRGF0ZTtcbiAgcHJpbWVGYWN0b3JzPzogUmVjb3JkPG51bWJlciwgbnVtYmVyPjtcbiAgY29oZXJlbmNlPzogbnVtYmVyO1xufVxuXG5mdW5jdGlvbiBEZWJ1Z1BhbmVsKHsgcHJpbWVDb3JlLCBzaG93RGVidWcgfTogeyBwcmltZUNvcmU6IFByaW1lQ29yZSB8IG51bGwsIHNob3dEZWJ1ZzogYm9vbGVhbiB9KSB7XG4gIGlmICghc2hvd0RlYnVnIHx8ICFwcmltZUNvcmUpIHJldHVybiBudWxsO1xuICBcbiAgY29uc3QgZGVidWdJbmZvID0gcHJpbWVDb3JlLmdldERlYnVnSW5mbygpO1xuICBcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTQgcC00IGJnLWdyYXktNTAgcm91bmRlZC1sZyB0ZXh0LXNtXCI+XG4gICAgICA8aDMgY2xhc3NOYW1lPVwiZm9udC1zZW1pYm9sZCB0ZXh0LWdyYXktNzAwIG1iLTNcIj5QcmltZSBDb3JlIERlYnVnIEluZm88L2gzPlxuICAgICAgXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTEgbWQ6Z3JpZC1jb2xzLTIgZ2FwLTRcIj5cbiAgICAgICAgey8qIEh1bWFuIFVzZXIgSW5mbyAqL31cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8aDQgY2xhc3NOYW1lPVwiZm9udC1tZWRpdW0gdGV4dC1ibHVlLTYwMCBtYi0yXCI+SHVtYW4gVXNlcjwvaDQ+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTFcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmctYmx1ZS0xMDAgcHgtMiBweS0xIHJvdW5kZWRcIj5cbiAgICAgICAgICAgICAgSUQ6IHtkZWJ1Z0luZm8uaHVtYW5Vc2VyLmlkZW50aXR5LmlkfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLWJsdWUtMTAwIHB4LTIgcHktMSByb3VuZGVkXCI+XG4gICAgICAgICAgICAgIFR1cm5zOiB7ZGVidWdJbmZvLmh1bWFuVXNlci5jb252ZXJzYXRpb25TdGF0ZS50dXJuQ291bnR9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmctYmx1ZS0xMDAgcHgtMiBweS0xIHJvdW5kZWRcIj5cbiAgICAgICAgICAgICAgUHJpbWUgRmFjdG9yczoge2RlYnVnSW5mby5odW1hblVzZXIuY29udmVyc2F0aW9uU3RhdGUucHJpbWVDb3VudH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiZy1ibHVlLTEwMCBweC0yIHB5LTEgcm91bmRlZCB0ZXh0LXhzXCI+XG4gICAgICAgICAgICAgIFRyYWl0czoge2RlYnVnSW5mby5odW1hblVzZXIuaWRlbnRpdHkucGVyc29uYWxpdHkudHJhaXRzLmpvaW4oJywgJyl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIFxuICAgICAgICB7LyogQ2hhdGJvdCBVc2VyIEluZm8gKi99XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGg0IGNsYXNzTmFtZT1cImZvbnQtbWVkaXVtIHRleHQtcHVycGxlLTYwMCBtYi0yXCI+Q2hhdGJvdCBVc2VyPC9oND5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktMVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiZy1wdXJwbGUtMTAwIHB4LTIgcHktMSByb3VuZGVkXCI+XG4gICAgICAgICAgICAgIElEOiB7ZGVidWdJbmZvLmNoYXRib3RVc2VyLmlkZW50aXR5LmlkfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLXB1cnBsZS0xMDAgcHgtMiBweS0xIHJvdW5kZWRcIj5cbiAgICAgICAgICAgICAgVHVybnM6IHtkZWJ1Z0luZm8uY2hhdGJvdFVzZXIuY29udmVyc2F0aW9uU3RhdGUudHVybkNvdW50fVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLXB1cnBsZS0xMDAgcHgtMiBweS0xIHJvdW5kZWRcIj5cbiAgICAgICAgICAgICAgUHJpbWUgRmFjdG9yczoge2RlYnVnSW5mby5jaGF0Ym90VXNlci5jb252ZXJzYXRpb25TdGF0ZS5wcmltZUNvdW50fVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLXB1cnBsZS0xMDAgcHgtMiBweS0xIHJvdW5kZWQgdGV4dC14c1wiPlxuICAgICAgICAgICAgICBUcmFpdHM6IHtkZWJ1Z0luZm8uY2hhdGJvdFVzZXIuaWRlbnRpdHkucGVyc29uYWxpdHkudHJhaXRzLmpvaW4oJywgJyl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgey8qIENvaGVyZW5jZSBJbmZvICovfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdC0zIHB0LTMgYm9yZGVyLXQgYm9yZGVyLWdyYXktMjAwXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZm9udC1tZWRpdW0gdGV4dC1ncmF5LTcwMFwiPkNvbnZlcnNhdGlvbiBDb2hlcmVuY2U6PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImJnLWdyZWVuLTEwMCBweC0zIHB5LTEgcm91bmRlZCBmb250LW1vbm9cIj5cbiAgICAgICAgICAgIHsoZGVidWdJbmZvLmNvaGVyZW5jZSAqIDEwMCkudG9GaXhlZCgxKX0lXG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5mdW5jdGlvbiBNZXNzYWdlQnViYmxlKHsgbWVzc2FnZSwgc2hvd1ByaW1lcyB9OiB7IG1lc3NhZ2U6IE1lc3NhZ2UsIHNob3dQcmltZXM6IGJvb2xlYW4gfSkge1xuICBjb25zdCBpc0h1bWFuID0gbWVzc2FnZS5zZW5kZXIgPT09ICdodW1hbic7XG4gIFxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgZmxleCAke2lzSHVtYW4gPyAnanVzdGlmeS1lbmQnIDogJ2p1c3RpZnktc3RhcnQnfSBtYi00YH0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YG1heC13LXhzIGxnOm1heC13LW1kIHB4LTQgcHktMiByb3VuZGVkLWxnICR7XG4gICAgICAgIGlzSHVtYW4gXG4gICAgICAgICAgPyAnYmctYmx1ZS01MDAgdGV4dC13aGl0ZScgXG4gICAgICAgICAgOiAnYmctZ3JheS0yMDAgdGV4dC1ncmF5LTgwMCdcbiAgICAgIH1gfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LXNtIGZvbnQtbWVkaXVtIG1iLTFcIj5cbiAgICAgICAgICB7aXNIdW1hbiA/ICdZb3UnIDogJ1ByaW1lQm90J31cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+e21lc3NhZ2UudGV4dH08L2Rpdj5cbiAgICAgICAgXG4gICAgICAgIHtzaG93UHJpbWVzICYmIG1lc3NhZ2UucHJpbWVGYWN0b3JzICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTIgcHQtMiBib3JkZXItdCBib3JkZXItb3BhY2l0eS0yMCBib3JkZXItd2hpdGVcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC14cyBvcGFjaXR5LTc1XCI+XG4gICAgICAgICAgICAgIFByaW1lIEZhY3RvcnM6IHtPYmplY3Qua2V5cyhtZXNzYWdlLnByaW1lRmFjdG9ycykubGVuZ3RofVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7bWVzc2FnZS5jb2hlcmVuY2UgIT09IHVuZGVmaW5lZCAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC14cyBvcGFjaXR5LTc1XCI+XG4gICAgICAgICAgICAgICAgQ29oZXJlbmNlOiB7KG1lc3NhZ2UuY29oZXJlbmNlICogMTAwKS50b0ZpeGVkKDEpfSVcbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFByaW1lTE1DaGF0KCkge1xuICBjb25zdCBbcHJpbWVDb3JlLCBzZXRQcmltZUNvcmVdID0gdXNlU3RhdGU8UHJpbWVDb3JlIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtpc0luaXRpYWxpemluZywgc2V0SXNJbml0aWFsaXppbmddID0gdXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IFtpbml0RXJyb3IsIHNldEluaXRFcnJvcl0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW21lc3NhZ2VzLCBzZXRNZXNzYWdlc10gPSB1c2VTdGF0ZTxNZXNzYWdlW10+KFtdKTtcbiAgY29uc3QgW2lucHV0VGV4dCwgc2V0SW5wdXRUZXh0XSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW2lzUHJvY2Vzc2luZywgc2V0SXNQcm9jZXNzaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3Nob3dEZWJ1Zywgc2V0U2hvd0RlYnVnXSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBbc2hvd1ByaW1lcywgc2V0U2hvd1ByaW1lc10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIFxuICBjb25zdCBtZXNzYWdlc0VuZFJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBpbml0aWFsaXplUHJpbWVDb3JlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc29sZS5sb2coJ/CfmoAgU3RhcnRpbmcgUHJpbWVMTSBpbml0aWFsaXphdGlvbi4uLicpO1xuICAgICAgICBjb25zdCBjb3JlID0gbmV3IFByaW1lQ29yZSgpO1xuICAgICAgICBhd2FpdCBjb3JlLmluaXRpYWxpemUoKTtcbiAgICAgICAgc2V0UHJpbWVDb3JlKGNvcmUpO1xuICAgICAgICBzZXRJc0luaXRpYWxpemluZyhmYWxzZSk7XG4gICAgICAgIFxuICAgICAgICAvLyBBZGQgd2VsY29tZSBtZXNzYWdlXG4gICAgICAgIHNldE1lc3NhZ2VzKFt7XG4gICAgICAgICAgaWQ6ICcxJyxcbiAgICAgICAgICB0ZXh0OiBcIkhlbGxvISBJJ20gUHJpbWVCb3QsIHBvd2VyZWQgYnkgUHJpbWVMTSdzIFByaW1lIENvcmUuIEkgcHJvY2VzcyBjb252ZXJzYXRpb24gdGhyb3VnaCBtYXRoZW1hdGljYWwgcHJpbWUgZmFjdG9yaXphdGlvbi4gVHJ5IGFza2luZyBtZSBzb21ldGhpbmchXCIsXG4gICAgICAgICAgc2VuZGVyOiAnY2hhdGJvdCcsXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpXG4gICAgICAgIH1dKTtcbiAgICAgICAgXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgRmFpbGVkIHRvIGluaXRpYWxpemUgUHJpbWVMTTonLCBlcnJvcik7XG4gICAgICAgIHNldEluaXRFcnJvcihlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyk7XG4gICAgICAgIHNldElzSW5pdGlhbGl6aW5nKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaW5pdGlhbGl6ZVByaW1lQ29yZSgpO1xuICB9LCBbXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBtZXNzYWdlc0VuZFJlZi5jdXJyZW50Py5zY3JvbGxJbnRvVmlldyh7IGJlaGF2aW9yOiAnc21vb3RoJyB9KTtcbiAgfSwgW21lc3NhZ2VzXSk7XG5cbiAgY29uc3QgaGFuZGxlU2VuZE1lc3NhZ2UgPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKCFpbnB1dFRleHQudHJpbSgpIHx8ICFwcmltZUNvcmUgfHwgaXNQcm9jZXNzaW5nKSByZXR1cm47XG5cbiAgICBjb25zdCB1c2VyTWVzc2FnZTogTWVzc2FnZSA9IHtcbiAgICAgIGlkOiBEYXRlLm5vdygpLnRvU3RyaW5nKCksXG4gICAgICB0ZXh0OiBpbnB1dFRleHQudHJpbSgpLFxuICAgICAgc2VuZGVyOiAnaHVtYW4nLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpXG4gICAgfTtcblxuICAgIHNldE1lc3NhZ2VzKHByZXYgPT4gWy4uLnByZXYsIHVzZXJNZXNzYWdlXSk7XG4gICAgc2V0SW5wdXRUZXh0KCcnKTtcbiAgICBzZXRJc1Byb2Nlc3NpbmcodHJ1ZSk7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBwcmltZUNvcmUucHJvY2Vzc0NvbnZlcnNhdGlvbihpbnB1dFRleHQudHJpbSgpKTtcbiAgICAgIGNvbnN0IGRlYnVnSW5mbyA9IHByaW1lQ29yZS5nZXREZWJ1Z0luZm8oKTtcbiAgICAgIFxuICAgICAgY29uc3QgYm90TWVzc2FnZTogTWVzc2FnZSA9IHtcbiAgICAgICAgaWQ6IChEYXRlLm5vdygpICsgMSkudG9TdHJpbmcoKSxcbiAgICAgICAgdGV4dDogcmVzcG9uc2UsXG4gICAgICAgIHNlbmRlcjogJ2NoYXRib3QnLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIHByaW1lRmFjdG9yczogZGVidWdJbmZvLmNoYXRib3RVc2VyLmNvbnZlcnNhdGlvblN0YXRlLnByaW1lRmFjdG9ycyxcbiAgICAgICAgY29oZXJlbmNlOiBkZWJ1Z0luZm8uY29oZXJlbmNlXG4gICAgICB9O1xuXG4gICAgICBzZXRNZXNzYWdlcyhwcmV2ID0+IFsuLi5wcmV2LCBib3RNZXNzYWdlXSk7XG4gICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIHByb2Nlc3NpbmcgbWVzc2FnZTonLCBlcnJvcik7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2U6IE1lc3NhZ2UgPSB7XG4gICAgICAgIGlkOiAoRGF0ZS5ub3coKSArIDEpLnRvU3RyaW5nKCksXG4gICAgICAgIHRleHQ6IFwiU29ycnksIEkgZW5jb3VudGVyZWQgYW4gZXJyb3IgcHJvY2Vzc2luZyB5b3VyIG1lc3NhZ2UuIFBsZWFzZSB0cnkgYWdhaW4uXCIsXG4gICAgICAgIHNlbmRlcjogJ2NoYXRib3QnLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKClcbiAgICAgIH07XG4gICAgICBzZXRNZXNzYWdlcyhwcmV2ID0+IFsuLi5wcmV2LCBlcnJvck1lc3NhZ2VdKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc2V0SXNQcm9jZXNzaW5nKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlS2V5UHJlc3MgPSAoZTogUmVhY3QuS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJyAmJiAhZS5zaGlmdEtleSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaGFuZGxlU2VuZE1lc3NhZ2UoKTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKGlzSW5pdGlhbGl6aW5nKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWluLWgtc2NyZWVuIGJnLWdyYXktMTAwIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFuaW1hdGUtc3BpbiByb3VuZGVkLWZ1bGwgaC0xMiB3LTEyIGJvcmRlci1iLTIgYm9yZGVyLWJsdWUtNTAwIG14LWF1dG8gbWItNFwiPjwvZGl2PlxuICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGQgdGV4dC1ncmF5LTcwMCBtYi0yXCI+SW5pdGlhbGl6aW5nIFByaW1lTE0gQ29yZTwvaDI+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1ncmF5LTUwMFwiPkxvYWRpbmcgbmV1cmFsIG5ldHdvcmsgbW9kZWxzIGFuZCBwcmltZSBtYXRoZW1hdGljcy4uLjwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgaWYgKGluaXRFcnJvcikge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1pbi1oLXNjcmVlbiBiZy1ncmF5LTEwMCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtY2VudGVyIG1heC13LW1kXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LXJlZC01MDAgdGV4dC02eGwgbWItNFwiPuKaoO+4jzwvZGl2PlxuICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGQgdGV4dC1yZWQtNjAwIG1iLTJcIj5Jbml0aWFsaXphdGlvbiBGYWlsZWQ8L2gyPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtZ3JheS02MDAgbWItNFwiPntpbml0RXJyb3J9PC9wPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtc20gdGV4dC1ncmF5LTUwMFwiPlxuICAgICAgICAgICAgTWFrZSBzdXJlIHlvdSBoYXZlIGluc3RhbGxlZCB0aGUgcmVxdWlyZWQgZGVwZW5kZW5jaWVzOlxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICA8Y29kZSBjbGFzc05hbWU9XCJiZy1ncmF5LTIwMCBweC0yIHB5LTEgcm91bmRlZCBtdC0yIGlubGluZS1ibG9ja1wiPlxuICAgICAgICAgICAgICBucG0gaW5zdGFsbCBAeGVub3ZhL3RyYW5zZm9ybWVyc1xuICAgICAgICAgICAgPC9jb2RlPlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8YnV0dG9uIFxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpfSBcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIm10LTQgYmctYmx1ZS01MDAgdGV4dC13aGl0ZSBweC00IHB5LTIgcm91bmRlZCBob3ZlcjpiZy1ibHVlLTYwMFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgUmV0cnlcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1pbi1oLXNjcmVlbiBiZy1ncmF5LTEwMFwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYXgtdy00eGwgbXgtYXV0byBwLTRcIj5cbiAgICAgICAgey8qIEhlYWRlciAqL31cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiZy13aGl0ZSByb3VuZGVkLWxnIHNoYWRvdy1zbSBwLTYgbWItNFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuXCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwidGV4dC0yeGwgZm9udC1ib2xkIHRleHQtZ3JheS04MDBcIj5QcmltZUxNIERlbW88L2gxPlxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LWdyYXktNjAwXCI+Q29udmVyc2F0aW9uYWwgQUkgdGhyb3VnaCBQcmltZSBDb3JlIG1hdGhlbWF0aWNzPC9wPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZ2FwLTJcIj5cbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dEZWJ1Zyghc2hvd0RlYnVnKX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BweC0zIHB5LTEgcm91bmRlZCB0ZXh0LXNtICR7XG4gICAgICAgICAgICAgICAgICBzaG93RGVidWcgPyAnYmctYmx1ZS01MDAgdGV4dC13aGl0ZScgOiAnYmctZ3JheS0yMDAgdGV4dC1ncmF5LTcwMCdcbiAgICAgICAgICAgICAgICB9YH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIERlYnVnXG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0U2hvd1ByaW1lcyghc2hvd1ByaW1lcyl9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgcHgtMyBweS0xIHJvdW5kZWQgdGV4dC1zbSAke1xuICAgICAgICAgICAgICAgICAgc2hvd1ByaW1lcyA/ICdiZy1wdXJwbGUtNTAwIHRleHQtd2hpdGUnIDogJ2JnLWdyYXktMjAwIHRleHQtZ3JheS03MDAnXG4gICAgICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBQcmltZXNcbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgey8qIENoYXQgQXJlYSAqL31cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiZy13aGl0ZSByb3VuZGVkLWxnIHNoYWRvdy1zbSBtYi00XCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoLTk2IG92ZXJmbG93LXktYXV0byBwLTRcIj5cbiAgICAgICAgICAgIHttZXNzYWdlcy5tYXAobWVzc2FnZSA9PiAoXG4gICAgICAgICAgICAgIDxNZXNzYWdlQnViYmxlIFxuICAgICAgICAgICAgICAgIGtleT17bWVzc2FnZS5pZH0gXG4gICAgICAgICAgICAgICAgbWVzc2FnZT17bWVzc2FnZX0gXG4gICAgICAgICAgICAgICAgc2hvd1ByaW1lcz17c2hvd1ByaW1lc31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgICAge2lzUHJvY2Vzc2luZyAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LXN0YXJ0IG1iLTRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLWdyYXktMjAwIHRleHQtZ3JheS04MDAgbWF4LXcteHMgbGc6bWF4LXctbWQgcHgtNCBweS0yIHJvdW5kZWQtbGdcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbmltYXRlLXB1bHNlXCI+UHJvY2Vzc2luZyB0aHJvdWdoIFByaW1lIENvcmUuLi48L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8ZGl2IHJlZj17bWVzc2FnZXNFbmRSZWZ9IC8+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICB7LyogSW5wdXQgQXJlYSAqL31cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJvcmRlci10IGJvcmRlci1ncmF5LTIwMCBwLTRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBnYXAtMlwiPlxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VGV4dH1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldElucHV0VGV4dChlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgICAgICAgb25LZXlQcmVzcz17aGFuZGxlS2V5UHJlc3N9XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUeXBlIHlvdXIgbWVzc2FnZS4uLlwiXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmxleC0xIGJvcmRlciBib3JkZXItZ3JheS0zMDAgcm91bmRlZC1sZyBweC0zIHB5LTIgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzOnJpbmctMiBmb2N1czpyaW5nLWJsdWUtNTAwXCJcbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17aXNQcm9jZXNzaW5nfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlU2VuZE1lc3NhZ2V9XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFpbnB1dFRleHQudHJpbSgpIHx8IGlzUHJvY2Vzc2luZ31cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJiZy1ibHVlLTUwMCB0ZXh0LXdoaXRlIHB4LTYgcHktMiByb3VuZGVkLWxnIGhvdmVyOmJnLWJsdWUtNjAwIGRpc2FibGVkOm9wYWNpdHktNTAgZGlzYWJsZWQ6Y3Vyc29yLW5vdC1hbGxvd2VkXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIFNlbmRcbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgey8qIERlYnVnIFBhbmVsICovfVxuICAgICAgICA8RGVidWdQYW5lbCBwcmltZUNvcmU9e3ByaW1lQ29yZX0gc2hvd0RlYnVnPXtzaG93RGVidWd9IC8+XG5cbiAgICAgICAgey8qIEZvb3RlciAqL31cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlciB0ZXh0LXNtIHRleHQtZ3JheS01MDAgbXQtNFwiPlxuICAgICAgICAgIDxwPlxuICAgICAgICAgICAgPHN0cm9uZz5QcmltZUxNIERlbW86PC9zdHJvbmc+IFJlYWwgbmV1cmFsIG5ldHdvcmtzIOKGkiBQcmltZSBmYWN0b3JpemF0aW9uIOKGkiBNYXRoZW1hdGljYWwgY29oZXJlbmNlXG4gICAgICAgICAgPC9wPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cIm10LTFcIj5cbiAgICAgICAgICAgIE5vIG1vY2tpbmcgb3IgaGFyZC1jb2RpbmcgLSBmdW5jdGlvbmFsIHByb29mIG9mIGNvbmNlcHQgaW1wbGVtZW50YXRpb25cbiAgICAgICAgICA8L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZVJlZiIsIlByaW1lQ29yZSIsIkRlYnVnUGFuZWwiLCJwcmltZUNvcmUiLCJzaG93RGVidWciLCJkZWJ1Z0luZm8iLCJnZXREZWJ1Z0luZm8iLCJkaXYiLCJjbGFzc05hbWUiLCJoMyIsImg0IiwiaHVtYW5Vc2VyIiwiaWRlbnRpdHkiLCJpZCIsImNvbnZlcnNhdGlvblN0YXRlIiwidHVybkNvdW50IiwicHJpbWVDb3VudCIsInBlcnNvbmFsaXR5IiwidHJhaXRzIiwiam9pbiIsImNoYXRib3RVc2VyIiwic3BhbiIsImNvaGVyZW5jZSIsInRvRml4ZWQiLCJNZXNzYWdlQnViYmxlIiwibWVzc2FnZSIsInNob3dQcmltZXMiLCJpc0h1bWFuIiwic2VuZGVyIiwidGV4dCIsInByaW1lRmFjdG9ycyIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJQcmltZUxNQ2hhdCIsInNldFByaW1lQ29yZSIsImlzSW5pdGlhbGl6aW5nIiwic2V0SXNJbml0aWFsaXppbmciLCJpbml0RXJyb3IiLCJzZXRJbml0RXJyb3IiLCJtZXNzYWdlcyIsInNldE1lc3NhZ2VzIiwiaW5wdXRUZXh0Iiwic2V0SW5wdXRUZXh0IiwiaXNQcm9jZXNzaW5nIiwic2V0SXNQcm9jZXNzaW5nIiwic2V0U2hvd0RlYnVnIiwic2V0U2hvd1ByaW1lcyIsIm1lc3NhZ2VzRW5kUmVmIiwiaW5pdGlhbGl6ZVByaW1lQ29yZSIsImNvbnNvbGUiLCJsb2ciLCJjb3JlIiwiaW5pdGlhbGl6ZSIsInRpbWVzdGFtcCIsIkRhdGUiLCJlcnJvciIsIkVycm9yIiwiY3VycmVudCIsInNjcm9sbEludG9WaWV3IiwiYmVoYXZpb3IiLCJoYW5kbGVTZW5kTWVzc2FnZSIsInRyaW0iLCJ1c2VyTWVzc2FnZSIsIm5vdyIsInRvU3RyaW5nIiwicHJldiIsInJlc3BvbnNlIiwicHJvY2Vzc0NvbnZlcnNhdGlvbiIsImJvdE1lc3NhZ2UiLCJlcnJvck1lc3NhZ2UiLCJoYW5kbGVLZXlQcmVzcyIsImUiLCJrZXkiLCJzaGlmdEtleSIsInByZXZlbnREZWZhdWx0IiwiaDIiLCJwIiwiYnIiLCJjb2RlIiwiYnV0dG9uIiwib25DbGljayIsIndpbmRvdyIsImxvY2F0aW9uIiwicmVsb2FkIiwiaDEiLCJtYXAiLCJyZWYiLCJpbnB1dCIsInR5cGUiLCJ2YWx1ZSIsIm9uQ2hhbmdlIiwidGFyZ2V0Iiwib25LZXlQcmVzcyIsInBsYWNlaG9sZGVyIiwiZGlzYWJsZWQiLCJzdHJvbmciXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./src/app/page.tsx\n");

/***/ }),

/***/ "(ssr)/./src/lib/conversation/discourse-layer.ts":
/*!*************************************************!*\
  !*** ./src/lib/conversation/discourse-layer.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiscourseLayer: () => (/* binding */ DiscourseLayer)\n/* harmony export */ });\n// =============================================================================\n// DISCOURSE LAYER - Conversation Flow and Topic Management\n// =============================================================================\nclass DiscourseLayer {\n    constructor(schemaVocabulary){\n        this.schemaVocabulary = schemaVocabulary;\n        this.topicState = {\n            currentTopic: '',\n            topicHistory: [],\n            topicTransitions: new Map(),\n            topicDepth: 0,\n            topicCoherence: 0\n        };\n        this.conversationFlow = {\n            currentPhase: 'opening',\n            turnsSincePhaseChange: 0,\n            expectedNextMoves: [\n                'greeting',\n                'introduction',\n                'question'\n            ],\n            conversationMomentum: 0\n        };\n        this.referenceResolution = {\n            pronouns: new Map(),\n            entityReferences: new Map(),\n            contextualReferences: new Map()\n        };\n    }\n    /**\n   * Analyze conversation flow and determine discourse context\n   */ analyzeDiscourseContext(input, semanticContext, pragmaticContext) {\n        console.log('💬 Analyzing discourse context...');\n        // Update topic tracking\n        this.updateTopicState(input, semanticContext, pragmaticContext);\n        // Update conversation flow\n        this.updateConversationFlow(input, semanticContext, pragmaticContext);\n        // Resolve references\n        this.updateReferenceResolution(input, pragmaticContext);\n        // Calculate topic continuity\n        const topicContinuity = this.calculateTopicContinuity(input, semanticContext);\n        // Detect discourse markers\n        const discourseMarkers = this.detectDiscourseMarkers(input);\n        // Determine expected response type\n        const expectedResponseType = this.determineExpectedResponseType(semanticContext, this.conversationFlow.currentPhase);\n        console.log('💬 Discourse analysis:', {\n            currentTopic: this.topicState.currentTopic,\n            conversationPhase: this.conversationFlow.currentPhase,\n            topicContinuity,\n            expectedResponseType\n        });\n        return {\n            topicContinuity,\n            conversationPhase: this.conversationFlow.currentPhase,\n            expectedResponseType,\n            discourseMarkers,\n            referenceResolutions: this.referenceResolution.entityReferences\n        };\n    }\n    /**\n   * Update topic state based on current input\n   */ updateTopicState(input, semanticContext, pragmaticContext) {\n        // Extract potential topics from input\n        const inputTopics = this.extractTopicsFromInput(input, semanticContext);\n        if (inputTopics.length > 0) {\n            const newTopic = inputTopics[0];\n            // Check if this is a topic transition\n            if (this.topicState.currentTopic && this.topicState.currentTopic !== newTopic) {\n                // Record topic transition\n                if (!this.topicState.topicTransitions.has(this.topicState.currentTopic)) {\n                    this.topicState.topicTransitions.set(this.topicState.currentTopic, []);\n                }\n                this.topicState.topicTransitions.get(this.topicState.currentTopic).push(newTopic);\n                // Add current topic to history\n                this.topicState.topicHistory.push(this.topicState.currentTopic);\n                this.topicState.topicDepth = 0; // Reset depth for new topic\n            } else if (this.topicState.currentTopic === newTopic) {\n                // Continuing same topic - increase depth\n                this.topicState.topicDepth++;\n            }\n            this.topicState.currentTopic = newTopic;\n        }\n        // Calculate topic coherence\n        this.topicState.topicCoherence = this.calculateTopicCoherence(pragmaticContext);\n    }\n    /**\n   * Extract topics from input using semantic analysis\n   */ extractTopicsFromInput(input, semanticContext) {\n        const topics = [];\n        // Use semantic entities as topic indicators\n        if (semanticContext.entities && semanticContext.entities.length > 0) {\n            semanticContext.entities.forEach((entity)=>{\n                const entityType = this.schemaVocabulary.inferEntityType(entity);\n                if (entityType) {\n                    topics.push(`${entityType.toLowerCase()}_discussion`);\n                } else {\n                    topics.push(`${entity}_topic`);\n                }\n            });\n        }\n        // Use intent as topic indicator\n        if (semanticContext.intent) {\n            switch(semanticContext.intent){\n                case 'IDENTITY_INTRODUCTION':\n                case 'IDENTITY_QUERY':\n                    topics.push('identity_discussion');\n                    break;\n                case 'HELP_REQUEST':\n                    topics.push('assistance_request');\n                    break;\n                case 'INFORMATION_REQUEST':\n                    topics.push('information_seeking');\n                    break;\n                case 'GREETING':\n                    topics.push('social_interaction');\n                    break;\n            }\n        }\n        return topics;\n    }\n    /**\n   * Update conversation flow state\n   */ updateConversationFlow(input, semanticContext, pragmaticContext) {\n        this.conversationFlow.turnsSincePhaseChange++;\n        const currentPhase = this.conversationFlow.currentPhase;\n        let newPhase = currentPhase;\n        // Determine conversation phase transitions\n        switch(currentPhase){\n            case 'opening':\n                if (semanticContext.intent === 'IDENTITY_INTRODUCTION' || semanticContext.intent === 'ENTITY_INTRODUCTION') {\n                    newPhase = 'exploration';\n                } else if (this.conversationFlow.turnsSincePhaseChange > 3) {\n                    newPhase = 'exploration';\n                }\n                break;\n            case 'exploration':\n                if (this.topicState.topicDepth > 2) {\n                    newPhase = 'deepening';\n                } else if (this.hasTopicTransition()) {\n                    newPhase = 'transition';\n                }\n                break;\n            case 'deepening':\n                if (this.hasTopicTransition()) {\n                    newPhase = 'transition';\n                } else if (this.conversationFlow.turnsSincePhaseChange > 8) {\n                    newPhase = 'transition';\n                }\n                break;\n            case 'transition':\n                if (this.topicState.topicDepth > 0) {\n                    newPhase = 'exploration';\n                } else if (this.conversationFlow.turnsSincePhaseChange > 2) {\n                    newPhase = 'exploration';\n                }\n                break;\n        }\n        if (newPhase !== currentPhase) {\n            this.conversationFlow.currentPhase = newPhase;\n            this.conversationFlow.turnsSincePhaseChange = 0;\n            this.updateExpectedNextMoves(newPhase);\n        }\n        // Update conversation momentum\n        this.updateConversationMomentum(semanticContext, pragmaticContext);\n    }\n    /**\n   * Check if there's been a topic transition\n   */ hasTopicTransition() {\n        return this.topicState.topicHistory.length > 0 && this.topicState.topicDepth === 0;\n    }\n    /**\n   * Update expected next moves based on conversation phase\n   */ updateExpectedNextMoves(phase) {\n        switch(phase){\n            case 'opening':\n                this.conversationFlow.expectedNextMoves = [\n                    'greeting',\n                    'introduction',\n                    'question'\n                ];\n                break;\n            case 'exploration':\n                this.conversationFlow.expectedNextMoves = [\n                    'information_sharing',\n                    'question',\n                    'elaboration'\n                ];\n                break;\n            case 'deepening':\n                this.conversationFlow.expectedNextMoves = [\n                    'detailed_explanation',\n                    'follow_up',\n                    'clarification'\n                ];\n                break;\n            case 'transition':\n                this.conversationFlow.expectedNextMoves = [\n                    'topic_change',\n                    'summary',\n                    'new_question'\n                ];\n                break;\n            case 'closing':\n                this.conversationFlow.expectedNextMoves = [\n                    'farewell',\n                    'summary',\n                    'future_reference'\n                ];\n                break;\n        }\n    }\n    /**\n   * Update conversation momentum\n   */ updateConversationMomentum(semanticContext, pragmaticContext) {\n        let momentum = this.conversationFlow.conversationMomentum;\n        // Increase momentum for active engagement\n        if (semanticContext.intent === 'QUESTION' || semanticContext.intent === 'INFORMATION_REQUEST') {\n            momentum += 0.2;\n        }\n        // Increase momentum for entity introductions\n        if (semanticContext.intent === 'ENTITY_INTRODUCTION' || semanticContext.intent === 'IDENTITY_INTRODUCTION') {\n            momentum += 0.3;\n        }\n        // Decrease momentum for generic responses\n        if (semanticContext.intent === 'GENERAL_CONVERSATION' && semanticContext.entities.length === 0) {\n            momentum -= 0.1;\n        }\n        // Momentum decay over time\n        momentum *= 0.95;\n        this.conversationFlow.conversationMomentum = Math.max(0, Math.min(1, momentum));\n    }\n    /**\n   * Update reference resolution\n   */ updateReferenceResolution(input, pragmaticContext) {\n        // Resolve pronouns to entities\n        this.resolvePronounReferences(input, pragmaticContext);\n        // Update entity references\n        this.updateEntityReferences(input, pragmaticContext);\n        // Update contextual references\n        this.updateContextualReferences(input, pragmaticContext);\n    }\n    /**\n   * Resolve pronoun references\n   */ resolvePronounReferences(input, pragmaticContext) {\n        const pronouns = [\n            'it',\n            'he',\n            'she',\n            'they',\n            'that',\n            'this'\n        ];\n        pronouns.forEach((pronoun)=>{\n            if (input.toLowerCase().includes(pronoun)) {\n                // Find most recent relevant entity\n                const recentEntity = this.findMostRecentEntity(pragmaticContext, pronoun);\n                if (recentEntity) {\n                    this.referenceResolution.pronouns.set(pronoun, recentEntity);\n                }\n            }\n        });\n    }\n    /**\n   * Find most recent relevant entity for pronoun resolution\n   */ findMostRecentEntity(pragmaticContext, pronoun) {\n        // Look through recent conversation history for entities\n        const recentTurns = pragmaticContext.conversationHistory.slice(-5);\n        for(let i = recentTurns.length - 1; i >= 0; i--){\n            const turn = recentTurns[i];\n            if (Object.keys(turn.entities).length > 0) {\n                // Return the first entity found (most recent)\n                return Object.values(turn.entities)[0];\n            }\n        }\n        return null;\n    }\n    /**\n   * Update entity references\n   */ updateEntityReferences(input, pragmaticContext) {\n        // Track entity mentions and their contexts\n        for (const [key, entity] of pragmaticContext.entityMemory){\n            if (input.toLowerCase().includes(entity.value.toLowerCase())) {\n                this.referenceResolution.entityReferences.set(entity.value, {\n                    type: entity.entityType || 'unknown',\n                    lastMentioned: Date.now(),\n                    context: input\n                });\n            }\n        }\n    }\n    /**\n   * Update contextual references\n   */ updateContextualReferences(input, pragmaticContext) {\n        // Track references to previous topics or concepts\n        this.topicState.topicHistory.forEach((topic)=>{\n            if (input.toLowerCase().includes(topic.toLowerCase())) {\n                this.referenceResolution.contextualReferences.set(topic, {\n                    referenceType: 'topic_callback',\n                    originalContext: topic,\n                    currentMention: input\n                });\n            }\n        });\n    }\n    /**\n   * Calculate topic continuity score\n   */ calculateTopicContinuity(input, semanticContext) {\n        if (!this.topicState.currentTopic) return 0;\n        let continuity = 0;\n        // Check for topic-related keywords\n        const topicKeywords = this.getTopicKeywords(this.topicState.currentTopic);\n        const inputWords = input.toLowerCase().split(/\\W+/);\n        const matchingKeywords = inputWords.filter((word)=>topicKeywords.includes(word)).length;\n        continuity = matchingKeywords / Math.max(topicKeywords.length, 1);\n        // Boost continuity for entity references\n        if (semanticContext.entities && semanticContext.entities.length > 0) {\n            continuity += 0.3;\n        }\n        return Math.min(1, continuity);\n    }\n    /**\n   * Get keywords associated with a topic\n   */ getTopicKeywords(topic) {\n        const topicKeywordMap = {\n            'identity_discussion': [\n                'name',\n                'identity',\n                'who',\n                'person',\n                'individual'\n            ],\n            'animal_discussion': [\n                'dog',\n                'cat',\n                'pet',\n                'animal',\n                'breed',\n                'species'\n            ],\n            'vehicle_discussion': [\n                'car',\n                'truck',\n                'vehicle',\n                'drive',\n                'transportation'\n            ],\n            'assistance_request': [\n                'help',\n                'assist',\n                'support',\n                'aid',\n                'guidance'\n            ],\n            'information_seeking': [\n                'what',\n                'how',\n                'why',\n                'when',\n                'where',\n                'question'\n            ],\n            'social_interaction': [\n                'hello',\n                'hi',\n                'greeting',\n                'nice',\n                'meet'\n            ]\n        };\n        return topicKeywordMap[topic] || [];\n    }\n    /**\n   * Calculate topic coherence\n   */ calculateTopicCoherence(pragmaticContext) {\n        if (pragmaticContext.conversationHistory.length < 2) return 1;\n        const recentTurns = pragmaticContext.conversationHistory.slice(-5);\n        let coherenceScore = 0;\n        // Check for consistent entity references\n        const entityCounts = new Map();\n        recentTurns.forEach((turn)=>{\n            Object.values(turn.entities).forEach((entity)=>{\n                const entityStr = entity;\n                entityCounts.set(entityStr, (entityCounts.get(entityStr) || 0) + 1);\n            });\n        });\n        // Higher coherence for repeated entity references\n        const maxEntityCount = Math.max(...Array.from(entityCounts.values()), 0);\n        coherenceScore = maxEntityCount / recentTurns.length;\n        return Math.min(1, coherenceScore);\n    }\n    /**\n   * Detect discourse markers in input\n   */ detectDiscourseMarkers(input) {\n        const markers = [];\n        const lowerInput = input.toLowerCase();\n        const discourseMarkerPatterns = {\n            'topic_shift': [\n                'anyway',\n                'by the way',\n                'speaking of',\n                'that reminds me'\n            ],\n            'elaboration': [\n                'also',\n                'furthermore',\n                'in addition',\n                'moreover'\n            ],\n            'contrast': [\n                'but',\n                'however',\n                'on the other hand',\n                'although'\n            ],\n            'conclusion': [\n                'so',\n                'therefore',\n                'in conclusion',\n                'to summarize'\n            ],\n            'clarification': [\n                'i mean',\n                'that is',\n                'in other words',\n                'specifically'\n            ],\n            'sequence': [\n                'first',\n                'then',\n                'next',\n                'finally',\n                'after that'\n            ]\n        };\n        Object.entries(discourseMarkerPatterns).forEach(([markerType, patterns])=>{\n            patterns.forEach((pattern)=>{\n                if (lowerInput.includes(pattern)) {\n                    markers.push(markerType);\n                }\n            });\n        });\n        return [\n            ...new Set(markers)\n        ]; // Remove duplicates\n    }\n    /**\n   * Determine expected response type based on context\n   */ determineExpectedResponseType(semanticContext, conversationPhase) {\n        // Base response type on semantic intent\n        let responseType = 'acknowledgment';\n        switch(semanticContext.intent){\n            case 'QUESTION':\n            case 'INFORMATION_REQUEST':\n            case 'IDENTITY_QUERY':\n            case 'ENTITY_QUERY':\n            case 'BOT_IDENTITY_QUERY':\n                responseType = 'informative_answer';\n                break;\n            case 'GREETING':\n                responseType = 'social_response';\n                break;\n            case 'IDENTITY_INTRODUCTION':\n            case 'ENTITY_INTRODUCTION':\n                responseType = 'acknowledgment_with_followup';\n                break;\n            case 'HELP_REQUEST':\n                responseType = 'supportive_response';\n                break;\n            case 'GRATITUDE':\n                responseType = 'gracious_acknowledgment';\n                break;\n        }\n        // Modify based on conversation phase\n        switch(conversationPhase){\n            case 'opening':\n                if (responseType === 'acknowledgment') {\n                    responseType = 'welcoming_response';\n                }\n                break;\n            case 'deepening':\n                if (responseType === 'informative_answer') {\n                    responseType = 'detailed_explanation';\n                }\n                break;\n            case 'transition':\n                // Don't override query responses in transition phase\n                if (responseType !== 'informative_answer') {\n                    responseType = 'transitional_response';\n                }\n                break;\n        }\n        return responseType;\n    }\n    /**\n   * Get current discourse state for response generation\n   */ getDiscourseState() {\n        return {\n            topicState: {\n                ...this.topicState\n            },\n            conversationFlow: {\n                ...this.conversationFlow\n            },\n            referenceResolution: {\n                pronouns: new Map(this.referenceResolution.pronouns),\n                entityReferences: new Map(this.referenceResolution.entityReferences),\n                contextualReferences: new Map(this.referenceResolution.contextualReferences)\n            }\n        };\n    }\n    /**\n   * Reset discourse state for new conversation\n   */ resetDiscourseState() {\n        this.topicState = {\n            currentTopic: '',\n            topicHistory: [],\n            topicTransitions: new Map(),\n            topicDepth: 0,\n            topicCoherence: 0\n        };\n        this.conversationFlow = {\n            currentPhase: 'opening',\n            turnsSincePhaseChange: 0,\n            expectedNextMoves: [\n                'greeting',\n                'introduction',\n                'question'\n            ],\n            conversationMomentum: 0\n        };\n        this.referenceResolution = {\n            pronouns: new Map(),\n            entityReferences: new Map(),\n            contextualReferences: new Map()\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/conversation/discourse-layer.ts\n");

/***/ }),

/***/ "(ssr)/./src/lib/conversation/generative-layer.ts":
/*!**************************************************!*\
  !*** ./src/lib/conversation/generative-layer.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GenerativeLayer: () => (/* binding */ GenerativeLayer)\n/* harmony export */ });\n// =============================================================================\n// GENERATIVE LAYER - Dynamic Natural Language Generation\n// =============================================================================\nclass GenerativeLayer {\n    constructor(schemaVocabulary){\n        this.schemaVocabulary = schemaVocabulary;\n        this.defaultStyle = {\n            formality: 'neutral',\n            enthusiasm: 'medium',\n            verbosity: 'moderate',\n            personality: 'helpful'\n        };\n    }\n    /**\n   * Generate dynamic response based on context\n   */ generateResponse(context) {\n        console.log('🎨 Generating dynamic response...');\n        console.log('Response type:', context.responseType);\n        console.log('Conversation phase:', context.discourseContext?.conversationPhase);\n        // Determine generation style based on context\n        const style = this.determineGenerationStyle(context);\n        // Generate response components\n        const components = this.generateResponseComponents(context, style);\n        // Assemble final response\n        const response = this.assembleResponse(components, style);\n        console.log('🎨 Generated response:', response);\n        return response;\n    }\n    /**\n   * Determine generation style based on context\n   */ determineGenerationStyle(context) {\n        let style = {\n            ...this.defaultStyle\n        };\n        // Adjust formality based on conversation phase\n        switch(context.discourseContext?.conversationPhase){\n            case 'opening':\n                style.formality = 'neutral';\n                style.enthusiasm = 'medium';\n                break;\n            case 'exploration':\n                style.formality = 'casual';\n                style.enthusiasm = 'medium';\n                break;\n            case 'deepening':\n                style.formality = 'neutral';\n                style.verbosity = 'detailed';\n                break;\n            case 'transition':\n                style.enthusiasm = 'low';\n                style.verbosity = 'concise';\n                break;\n        }\n        // Adjust based on semantic intent\n        switch(context.semanticContext?.intent){\n            case 'GREETING':\n                style.enthusiasm = 'high';\n                style.personality = 'friendly';\n                break;\n            case 'HELP_REQUEST':\n                style.personality = 'helpful';\n                style.enthusiasm = 'medium';\n                break;\n            case 'INFORMATION_REQUEST':\n            case 'QUESTION':\n                style.personality = 'analytical';\n                style.verbosity = 'detailed';\n                break;\n            case 'GRATITUDE':\n                style.personality = 'friendly';\n                style.enthusiasm = 'medium';\n                break;\n        }\n        // Adjust based on conversation momentum\n        if (context.discourseContext?.conversationFlow?.conversationMomentum > 0.7) {\n            style.enthusiasm = 'high';\n            style.verbosity = 'detailed';\n        } else if (context.discourseContext?.conversationFlow?.conversationMomentum < 0.3) {\n            style.enthusiasm = 'low';\n            style.verbosity = 'concise';\n        }\n        return style;\n    }\n    /**\n   * Generate response components\n   */ generateResponseComponents(context, style) {\n        const components = {\n            opening: '',\n            core: '',\n            followup: '',\n            closing: ''\n        };\n        // Generate opening based on response type and style\n        components.opening = this.generateOpening(context, style);\n        // Generate core content\n        components.core = this.generateCore(context, style);\n        // Generate followup if appropriate\n        components.followup = this.generateFollowup(context, style);\n        // Generate closing if needed\n        components.closing = this.generateClosing(context, style);\n        return components;\n    }\n    /**\n   * Generate opening phrase\n   */ generateOpening(context, style) {\n        const responseType = context.responseType;\n        const conversationPhase = context.discourseContext?.conversationPhase;\n        // Opening patterns based on response type and style\n        const openingPatterns = {\n            'social_response': {\n                'friendly': [\n                    'Hello!',\n                    'Hi there!',\n                    'Hey!',\n                    'Greetings!'\n                ],\n                'helpful': [\n                    'Hello!',\n                    'Hi!',\n                    'Welcome!'\n                ],\n                'analytical': [\n                    'Hello.',\n                    'Greetings.'\n                ],\n                'professional': [\n                    'Good day.',\n                    'Hello.'\n                ]\n            },\n            'acknowledgment_with_followup': {\n                'friendly': [\n                    'That\\'s wonderful!',\n                    'How nice!',\n                    'Great!'\n                ],\n                'helpful': [\n                    'I understand.',\n                    'I see.',\n                    'Got it.'\n                ],\n                'analytical': [\n                    'Noted.',\n                    'Understood.',\n                    'I see.'\n                ],\n                'professional': [\n                    'Acknowledged.',\n                    'Understood.'\n                ]\n            },\n            'informative_answer': {\n                'friendly': [\n                    'Let me help with that!',\n                    'I\\'d be happy to explain!'\n                ],\n                'helpful': [\n                    'I can help with that.',\n                    'Let me assist you.'\n                ],\n                'analytical': [\n                    'Based on my analysis,',\n                    'From my understanding,'\n                ],\n                'professional': [\n                    'I can provide that information.'\n                ]\n            },\n            'supportive_response': {\n                'friendly': [\n                    'I\\'m here to help!',\n                    'I\\'d love to assist!'\n                ],\n                'helpful': [\n                    'I\\'m here to help.',\n                    'I can assist you.'\n                ],\n                'analytical': [\n                    'I can provide assistance.',\n                    'I\\'m available to help.'\n                ],\n                'professional': [\n                    'I\\'m available to assist.'\n                ]\n            },\n            'gracious_acknowledgment': {\n                'friendly': [\n                    'You\\'re so welcome!',\n                    'My pleasure!'\n                ],\n                'helpful': [\n                    'You\\'re welcome!',\n                    'Happy to help!'\n                ],\n                'analytical': [\n                    'You\\'re welcome.',\n                    'Glad I could help.'\n                ],\n                'professional': [\n                    'You\\'re welcome.'\n                ]\n            }\n        };\n        const patterns = openingPatterns[responseType]?.[style.personality] || [\n            ''\n        ];\n        if (patterns.length === 0) return '';\n        // Select pattern based on enthusiasm level\n        let selectedPattern = patterns[0];\n        if (style.enthusiasm === 'high' && patterns.length > 1) {\n            selectedPattern = patterns[Math.min(1, patterns.length - 1)];\n        } else if (style.enthusiasm === 'low') {\n            selectedPattern = patterns[patterns.length - 1];\n        }\n        return selectedPattern;\n    }\n    /**\n   * Generate core content\n   */ generateCore(context, style) {\n        const responseType = context.responseType;\n        const semanticContext = context.semanticContext;\n        const pragmaticContext = context.pragmaticContext;\n        switch(responseType){\n            case 'social_response':\n                return this.generateSocialCore(context, style);\n            case 'acknowledgment_with_followup':\n                return this.generateAcknowledgmentCore(context, style);\n            case 'informative_answer':\n                return this.generateInformativeCore(context, style);\n            case 'supportive_response':\n                return this.generateSupportiveCore(context, style);\n            case 'gracious_acknowledgment':\n                return this.generateGraciousCore(context, style);\n            case 'welcoming_response':\n                return this.generateWelcomingCore(context, style);\n            case 'detailed_explanation':\n                return this.generateDetailedCore(context, style);\n            case 'transitional_response':\n                return this.generateTransitionalCore(context, style);\n            default:\n                return this.generateDefaultCore(context, style);\n        }\n    }\n    /**\n   * Generate social response core\n   */ generateSocialCore(context, style) {\n        const botIdentity = this.getBotIdentityDescription(style);\n        const capabilities = this.getCapabilityDescription(style);\n        if (style.verbosity === 'detailed') {\n            return `${botIdentity} ${capabilities}`;\n        } else if (style.verbosity === 'moderate') {\n            return botIdentity;\n        } else {\n            return \"I'm PrimeBot.\";\n        }\n    }\n    /**\n   * Generate acknowledgment core\n   */ generateAcknowledgmentCore(context, style) {\n        const entities = context.semanticContext?.entities || [];\n        if (entities.length >= 2) {\n            // Entity introduction (e.g., \"My dog's name is Juno\")\n            const entityType = entities[0];\n            const entityName = entities[1];\n            const schemaType = this.schemaVocabulary.inferEntityType(entityType);\n            let core = this.generateEntityAcknowledgment(entityType, entityName, schemaType, style);\n            return core;\n        } else if (entities.length === 1) {\n            // Single entity (e.g., \"My name is Alex\")\n            const entityName = entities[0];\n            return this.generateNameAcknowledgment(entityName, style);\n        }\n        return this.generateGenericAcknowledgment(style);\n    }\n    /**\n   * Generate entity acknowledgment\n   */ generateEntityAcknowledgment(entityType, entityName, schemaType, style) {\n        const acknowledgments = this.getEntityAcknowledgmentTemplates(style);\n        const template = acknowledgments[Math.floor(Math.random() * acknowledgments.length)];\n        let core = template.replace('{entityType}', entityType).replace('{entityName}', entityName);\n        // Add schema-informed context\n        if (schemaType && style.verbosity !== 'concise') {\n            const schemaContext = this.generateSchemaContext(entityType, entityName, schemaType, style);\n            if (schemaContext) {\n                core += ` ${schemaContext}`;\n            }\n        }\n        return core;\n    }\n    /**\n   * Get entity acknowledgment templates\n   */ getEntityAcknowledgmentTemplates(style) {\n        switch(style.personality){\n            case 'friendly':\n                return [\n                    \"It's lovely to know that your {entityType} is named {entityName}!\",\n                    \"What a wonderful name for your {entityType} - {entityName}!\",\n                    \"I love that your {entityType} is called {entityName}!\"\n                ];\n            case 'helpful':\n                return [\n                    \"I understand that your {entityType} is named {entityName}.\",\n                    \"Thank you for telling me about {entityName}, your {entityType}.\",\n                    \"I've noted that your {entityType} is named {entityName}.\"\n                ];\n            case 'analytical':\n                return [\n                    \"I've recorded that your {entityType} has the name {entityName}.\",\n                    \"Entity relationship noted: {entityType} hasName {entityName}.\",\n                    \"I understand the naming relationship for your {entityType}.\"\n                ];\n            case 'professional':\n                return [\n                    \"I acknowledge that your {entityType} is named {entityName}.\",\n                    \"Thank you for providing the name of your {entityType}.\",\n                    \"I have recorded the information about {entityName}.\"\n                ];\n            default:\n                return [\n                    \"I understand that your {entityType} is named {entityName}.\"\n                ];\n        }\n    }\n    /**\n   * Generate schema-informed context\n   */ generateSchemaContext(entityType, entityName, schemaType, style) {\n        const entityInfo = this.schemaVocabulary.getEntityInfo(schemaType);\n        if (!entityInfo) return '';\n        const validProperties = this.schemaVocabulary.getValidProperties(schemaType);\n        switch(schemaType){\n            case 'Animal':\n                if (style.personality === 'friendly') {\n                    return `Tell me more about ${entityName} - what kind of ${entityType} is ${entityName}?`;\n                } else if (style.personality === 'analytical') {\n                    return `As an Animal entity, ${entityName} has properties like species and breed.`;\n                } else {\n                    return `What kind of ${entityType} is ${entityName}?`;\n                }\n            case 'Vehicle':\n                if (style.personality === 'friendly') {\n                    return `I'd love to hear more about ${entityName}! What kind of ${entityType} is it?`;\n                } else {\n                    return `What type of ${entityType} is ${entityName}?`;\n                }\n            case 'Person':\n                if (style.personality === 'friendly') {\n                    return `It's nice to meet ${entityName}! Tell me more about them.`;\n                } else {\n                    return `Tell me more about ${entityName}.`;\n                }\n            default:\n                return `Tell me more about ${entityName}.`;\n        }\n    }\n    /**\n   * Generate name acknowledgment\n   */ generateNameAcknowledgment(name, style) {\n        const templates = this.getNameAcknowledgmentTemplates(style);\n        const template = templates[Math.floor(Math.random() * templates.length)];\n        return template.replace('{name}', name);\n    }\n    /**\n   * Get name acknowledgment templates\n   */ getNameAcknowledgmentTemplates(style) {\n        switch(style.personality){\n            case 'friendly':\n                return [\n                    \"It's wonderful to meet you, {name}!\",\n                    \"Nice to meet you, {name}!\",\n                    \"Hello {name}! Great to meet you!\"\n                ];\n            case 'helpful':\n                return [\n                    \"Nice to meet you, {name}!\",\n                    \"Hello {name}! I'm here to help.\",\n                    \"Welcome, {name}!\"\n                ];\n            case 'analytical':\n                return [\n                    \"Acknowledged, {name}.\",\n                    \"Hello {name}.\",\n                    \"Identity recorded: {name}.\"\n                ];\n            case 'professional':\n                return [\n                    \"Good to meet you, {name}.\",\n                    \"Hello {name}.\",\n                    \"Welcome, {name}.\"\n                ];\n            default:\n                return [\n                    \"Nice to meet you, {name}!\"\n                ];\n        }\n    }\n    /**\n   * Generate informative core\n   */ generateInformativeCore(context, style) {\n        const semanticContext = context.semanticContext;\n        const pragmaticContext = context.pragmaticContext;\n        const currentInput = pragmaticContext.conversationHistory[pragmaticContext.conversationHistory.length - 1]?.text || '';\n        // Always check for semantic queries first for informative answers\n        const queryResult = this.handleSemanticQuery(context, style);\n        if (queryResult) return queryResult;\n        // Generate based on semantic context\n        if (semanticContext?.entities && semanticContext.entities.length > 0) {\n            const entity = semanticContext.entities[0];\n            const entityType = this.schemaVocabulary.inferEntityType(entity);\n            if (entityType) {\n                return this.generateEntityInformation(entity, entityType, style);\n            }\n        }\n        // Enhanced fallback with pronoun resolution and pattern matching\n        return this.handleUnknownQuery(currentInput, pragmaticContext, style);\n    }\n    /**\n   * Handle unknown queries with enhanced pattern matching\n   */ handleUnknownQuery(input, pragmaticContext, style) {\n        const lowerInput = input.toLowerCase();\n        // Enhanced pronoun resolution\n        if (this.containsPronoun(lowerInput)) {\n            const resolvedQuery = this.resolvePronounQuery(input, pragmaticContext);\n            if (resolvedQuery) {\n                return resolvedQuery;\n            }\n        }\n        // Enhanced question pattern matching\n        if (lowerInput.includes('what') && lowerInput.includes('car')) {\n            return \"I don't have information about your car. Could you tell me about your car?\";\n        }\n        if (lowerInput.includes('what') && lowerInput.includes('do')) {\n            return \"I'd be happy to help! Could you tell me more about what you're looking for?\";\n        }\n        if (lowerInput.includes('how') && lowerInput.includes('old')) {\n            return \"I don't have age information stored. Could you share that with me?\";\n        }\n        if (lowerInput.includes('where') && lowerInput.includes('live')) {\n            return \"I don't have location information. Where do you live?\";\n        }\n        // General question patterns\n        if (lowerInput.startsWith('what') || lowerInput.startsWith('how') || lowerInput.startsWith('where') || lowerInput.startsWith('when') || lowerInput.startsWith('why')) {\n            return \"That's a great question! I don't have that specific information yet. Could you tell me more about it?\";\n        }\n        // Possession patterns\n        if (lowerInput.includes('do i have') || lowerInput.includes('is my')) {\n            return \"I don't have that information stored. Could you tell me about it?\";\n        }\n        // Default helpful response\n        return \"I'd like to help with that! Could you provide more details or tell me what you'd like me to know?\";\n    }\n    /**\n   * Check if input contains pronouns\n   */ containsPronoun(input) {\n        const pronouns = [\n            'her',\n            'his',\n            'their',\n            'its',\n            'she',\n            'he',\n            'they',\n            'it'\n        ];\n        return pronouns.some((pronoun)=>input.includes(pronoun));\n    }\n    /**\n   * Resolve pronoun-based queries\n   */ resolvePronounQuery(input, pragmaticContext) {\n        const lowerInput = input.toLowerCase();\n        // Look for recent entity introductions to resolve pronouns\n        const recentHistory = pragmaticContext.conversationHistory.slice(-5);\n        // Find the most recent entity that could match the pronoun\n        for(let i = recentHistory.length - 1; i >= 0; i--){\n            const turn = recentHistory[i];\n            if (turn.intent === 'ENTITY_INTRODUCTION') {\n                const entities = Object.values(turn.entities);\n                // Check for female pronouns\n                if ((lowerInput.includes('her') || lowerInput.includes('she')) && entities.length >= 2) {\n                    const entityType = entities[0];\n                    const entityName = entities[1];\n                    if (this.isFemalePronounEntity(entityType)) {\n                        if (lowerInput.includes('name')) {\n                            return `Her name is ${entityName}.`;\n                        }\n                        return `You're asking about ${entityName}, your ${entityType}.`;\n                    }\n                }\n                // Check for male pronouns\n                if ((lowerInput.includes('his') || lowerInput.includes('he')) && entities.length >= 2) {\n                    const entityType = entities[0];\n                    const entityName = entities[1];\n                    if (this.isMalePronounEntity(entityType)) {\n                        if (lowerInput.includes('name')) {\n                            return `His name is ${entityName}.`;\n                        }\n                        return `You're asking about ${entityName}, your ${entityType}.`;\n                    }\n                }\n                // Generic pronoun resolution\n                if (entities.length >= 2) {\n                    const entityType = entities[0];\n                    const entityName = entities[1];\n                    if (lowerInput.includes('name')) {\n                        return `The name is ${entityName}.`;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /**\n   * Check if entity type uses female pronouns\n   */ isFemalePronounEntity(entityType) {\n        const femaleEntities = [\n            'wife',\n            'mother',\n            'sister',\n            'daughter',\n            'girlfriend',\n            'aunt',\n            'grandmother',\n            'woman',\n            'girl'\n        ];\n        return femaleEntities.includes(entityType.toLowerCase());\n    }\n    /**\n   * Check if entity type uses male pronouns\n   */ isMalePronounEntity(entityType) {\n        const maleEntities = [\n            'husband',\n            'father',\n            'brother',\n            'son',\n            'boyfriend',\n            'uncle',\n            'grandfather',\n            'man',\n            'boy'\n        ];\n        return maleEntities.includes(entityType.toLowerCase());\n    }\n    /**\n   * Handle semantic queries\n   */ handleSemanticQuery(context, style) {\n        const pragmaticContext = context.pragmaticContext;\n        // Get the CURRENT input, not the last stored input\n        const currentInput = pragmaticContext.conversationHistory[pragmaticContext.conversationHistory.length - 1]?.text || '';\n        console.log('🔍 Handling semantic query for:', currentInput);\n        console.log('🔍 Available entity memory:', Object.fromEntries(pragmaticContext.entityMemory));\n        // Check for bot identity queries\n        if (currentInput.toLowerCase().includes('who are you') || currentInput.toLowerCase().includes('what is your name')) {\n            return this.handleBotIdentityQuery(style);\n        }\n        // Check for user name queries\n        if (currentInput.toLowerCase().includes('what is my name')) {\n            return this.handleNameQuery(pragmaticContext, style);\n        }\n        // Check for entity name queries\n        const entityNameMatch = currentInput.match(/what is my (\\w+)'?s? name/i);\n        if (entityNameMatch) {\n            const entityType = entityNameMatch[1];\n            return this.handleEntityNameQuery(entityType, pragmaticContext, style);\n        }\n        // Check for entity name queries with apostrophe\n        const entityNameMatch2 = currentInput.match(/what is my (\\w+)'s name/i);\n        if (entityNameMatch2) {\n            const entityType = entityNameMatch2[1];\n            return this.handleEntityNameQuery(entityType, pragmaticContext, style);\n        }\n        // Check for \"Who is X?\" queries\n        const whoIsMatch = currentInput.match(/who is (\\w+)/i);\n        if (whoIsMatch) {\n            const entityName = whoIsMatch[1];\n            return this.handleWhoIsQuery(entityName, pragmaticContext, style);\n        }\n        // Check for attribute queries (e.g., \"What color is my hair?\")\n        const attributeMatch = currentInput.match(/what (\\w+) is my (\\w+)/i);\n        if (attributeMatch) {\n            const attribute = attributeMatch[1];\n            const entity = attributeMatch[2];\n            return this.handleAttributeQuery(attribute, entity, pragmaticContext, style);\n        }\n        // Check for general attribute queries (e.g., \"What is my hair color?\")\n        const generalAttributeMatch = currentInput.match(/what is my (\\w+) (\\w+)/i);\n        if (generalAttributeMatch) {\n            const entity = generalAttributeMatch[1];\n            const attribute = generalAttributeMatch[2];\n            return this.handleAttributeQuery(attribute, entity, pragmaticContext, style);\n        }\n        return null;\n    }\n    /**\n   * Handle bot identity queries\n   */ handleBotIdentityQuery(style) {\n        switch(style.personality){\n            case 'friendly':\n                return \"I'm PrimeBot, your friendly AI assistant! I use mathematical prime factorization and semantic understanding to have conversations.\";\n            case 'analytical':\n                return \"I am PrimeBot, an AI system that processes information through mathematical prime factorization and semantic analysis using Schema.org vocabulary.\";\n            case 'professional':\n                return \"I am PrimeBot, an AI assistant specializing in semantic understanding and mathematical analysis.\";\n            default:\n                return \"I'm PrimeBot, an AI assistant powered by mathematical prime factorization and semantic understanding.\";\n        }\n    }\n    /**\n   * Handle name queries\n   */ handleNameQuery(pragmaticContext, style) {\n        const context = pragmaticContext.conversationHistory.map((turn)=>turn.text).join(' ').toLowerCase();\n        const nameMatch = context.match(/my name is (\\w+)/i);\n        if (nameMatch) {\n            const name = nameMatch[1];\n            switch(style.personality){\n                case 'friendly':\n                    return `Your name is ${name}! I remember you telling me that.`;\n                case 'analytical':\n                    return `Based on our conversation history, your name is ${name}.`;\n                case 'professional':\n                    return `According to our conversation, your name is ${name}.`;\n                default:\n                    return `Your name is ${name}.`;\n            }\n        } else {\n            switch(style.personality){\n                case 'friendly':\n                    return \"I don't recall you mentioning your name yet. I'd love to know what to call you!\";\n                case 'helpful':\n                    return \"I don't recall you mentioning your name. What is your name?\";\n                case 'analytical':\n                    return \"No name information found in conversation history. Please provide your name.\";\n                default:\n                    return \"I don't recall you mentioning your name. What is your name?\";\n            }\n        }\n    }\n    /**\n   * Handle entity name queries\n   */ handleEntityNameQuery(entityType, pragmaticContext, style) {\n        // First check entity memory for stored relationships\n        for (const [key, entity] of pragmaticContext.entityMemory){\n            if (key === `${entityType}_name` || entity.relationship === 'hasName' && entity.entityType === entityType) {\n                const entityName = this.capitalizeFirstLetter(entity.value);\n                let response = `Your ${entityType} is named ${entityName}.`;\n                const schemaType = this.schemaVocabulary.inferEntityType(entityType);\n                if (schemaType && style.verbosity !== 'concise') {\n                    const contextualNote = this.generateContextualNote(entityType, entityName, schemaType, style);\n                    if (contextualNote) {\n                        response += ` ${contextualNote}`;\n                    }\n                }\n                return response;\n            }\n        }\n        // Fallback to conversation history search\n        const context = pragmaticContext.conversationHistory.map((turn)=>turn.text).join(' ');\n        const entityPattern = new RegExp(`my ${entityType}'?s? name is (\\\\w+)`, 'i');\n        const entityMatch = context.match(entityPattern);\n        if (entityMatch) {\n            const entityName = this.capitalizeFirstLetter(entityMatch[1]);\n            const schemaType = this.schemaVocabulary.inferEntityType(entityType);\n            let response = `Your ${entityType} is named ${entityName}.`;\n            if (schemaType && style.verbosity !== 'concise') {\n                const contextualNote = this.generateContextualNote(entityType, entityName, schemaType, style);\n                if (contextualNote) {\n                    response += ` ${contextualNote}`;\n                }\n            }\n            return response;\n        } else {\n            switch(style.personality){\n                case 'friendly':\n                    return `I don't recall you mentioning your ${entityType}'s name. What is your ${entityType} called?`;\n                case 'helpful':\n                    return `I don't recall you mentioning your ${entityType}'s name. What is your ${entityType}'s name?`;\n                case 'analytical':\n                    return `No naming information found for entity type: ${entityType}. Please provide the name.`;\n                default:\n                    return `I don't recall you mentioning your ${entityType}'s name. What is your ${entityType}'s name?`;\n            }\n        }\n    }\n    /**\n   * Handle \"Who is X?\" queries\n   */ handleWhoIsQuery(entityName, pragmaticContext, style) {\n        // Search through entity memory for relationships involving this name\n        for (const [key, entity] of pragmaticContext.entityMemory){\n            if (entity.value.toLowerCase() === entityName.toLowerCase()) {\n                // Found the entity, determine the relationship\n                if (key.endsWith('_name')) {\n                    const entityType = key.replace('_name', '');\n                    switch(style.personality){\n                        case 'friendly':\n                            return `${entityName} is your ${entityType}! I remember you telling me about them.`;\n                        case 'analytical':\n                            return `Based on our conversation history, ${entityName} is identified as your ${entityType}.`;\n                        case 'professional':\n                            return `According to our conversation, ${entityName} is your ${entityType}.`;\n                        default:\n                            return `${entityName} is your ${entityType}.`;\n                    }\n                } else if (key === 'user_name') {\n                    return `${entityName} is you! That's your name.`;\n                }\n            }\n        }\n        // Entity not found in memory\n        switch(style.personality){\n            case 'friendly':\n                return `I don't recall you mentioning anyone named ${entityName}. Could you tell me more about them?`;\n            case 'helpful':\n                return `I don't have information about ${entityName}. Who is ${entityName}?`;\n            case 'analytical':\n                return `No entity information found for \"${entityName}\" in conversation history.`;\n            default:\n                return `I don't recall you mentioning ${entityName}. Who is ${entityName}?`;\n        }\n    }\n    /**\n   * Handle attribute queries (e.g., \"What color is my hair?\")\n   */ handleAttributeQuery(attribute, entity, pragmaticContext, style) {\n        // Search conversation history for attribute information\n        const context = pragmaticContext.conversationHistory.map((turn)=>turn.text).join(' ').toLowerCase();\n        // Look for patterns like \"my hair is brown\" or \"my car is red\" or \"I have a white truck\"\n        const patterns = [\n            new RegExp(`my ${entity} is ([\\\\w\\\\s]+?)(?:\\\\s|\\\\.|$)`, 'i'),\n            new RegExp(`i have a ([\\\\w\\\\s]+?) ${entity}(?:\\\\s|\\\\.|$)`, 'i'),\n            new RegExp(`${entity} is ([\\\\w\\\\s]+?)(?:\\\\s|\\\\.|$)`, 'i'),\n            new RegExp(`([\\\\w\\\\s]+?) ${entity}(?:\\\\s|\\\\.|$)`, 'i') // More general pattern\n        ];\n        let attributeValue = null;\n        for (const pattern of patterns){\n            const match = context.match(pattern);\n            if (match) {\n                attributeValue = match[1].trim();\n                break;\n            }\n        }\n        if (attributeValue) {\n            const capitalizedValue = this.capitalizeFirstLetter(attributeValue);\n            switch(style.personality){\n                case 'friendly':\n                    return `Your ${entity} is ${capitalizedValue}! I remember you telling me that.`;\n                case 'analytical':\n                    return `Based on conversation history, your ${entity} is ${capitalizedValue}.`;\n                case 'professional':\n                    return `According to our conversation, your ${entity} is ${capitalizedValue}.`;\n                default:\n                    return `Your ${entity} is ${capitalizedValue}.`;\n            }\n        } else {\n            // Check entity memory for stored attributes\n            for (const [key, entityInfo] of pragmaticContext.entityMemory){\n                if (key.includes(entity) && entityInfo.metadata && entityInfo.metadata[attribute]) {\n                    const storedValue = entityInfo.metadata[attribute];\n                    return `Your ${entity} is ${storedValue}.`;\n                }\n            }\n            // No attribute information found\n            switch(style.personality){\n                case 'friendly':\n                    return `I don't recall you mentioning the ${attribute} of your ${entity}. What ${attribute} is your ${entity}?`;\n                case 'helpful':\n                    return `I don't have information about your ${entity}'s ${attribute}. Could you tell me what ${attribute} your ${entity} is?`;\n                case 'analytical':\n                    return `No ${attribute} attribute found for entity: ${entity}. Please provide this information.`;\n                default:\n                    return `I don't have information about your ${entity}'s ${attribute}. What ${attribute} is it?`;\n            }\n        }\n    }\n    /**\n   * Generate contextual note for entities\n   */ generateContextualNote(entityType, entityName, schemaType, style) {\n        switch(schemaType){\n            case 'Animal':\n                if (style.personality === 'friendly') {\n                    return `That's a lovely name for ${entityType === 'Animal' ? 'an animal' : 'a ' + entityType}!`;\n                } else {\n                    return `${entityName} is classified as an Animal entity.`;\n                }\n            case 'Vehicle':\n                return style.personality === 'friendly' ? `${entityName} sounds like a great ${entityType}!` : `${entityName} is classified as a Vehicle entity.`;\n            default:\n                return '';\n        }\n    }\n    /**\n   * Generate entity information\n   */ generateEntityInformation(entity, entityType, style) {\n        const entityInfo = this.schemaVocabulary.getEntityInfo(entityType);\n        if (style.personality === 'analytical' && entityInfo) {\n            return `I'm analyzing \"${entity}\" as ${entityType === 'Animal' ? 'an' : 'a'} ${entityType} entity. This type has properties like ${entityInfo.properties.slice(0, 3).join(', ')}.`;\n        } else if (style.personality === 'friendly') {\n            return `I notice you mentioned \"${entity}\" - I understand that as ${entityType === 'Animal' ? 'an' : 'a'} ${entityType}. That's interesting!`;\n        } else {\n            return `I'm processing information about \"${entity}\" as ${entityType === 'Animal' ? 'an' : 'a'} ${entityType}.`;\n        }\n    }\n    /**\n   * Generate generic informative response\n   */ generateGenericInformativeResponse(style) {\n        switch(style.personality){\n            case 'friendly':\n                return \"That's a great question! I'm working through the information to give you a helpful answer.\";\n            case 'analytical':\n                return \"I'm analyzing the semantic relationships and mathematical patterns to provide an accurate response.\";\n            case 'professional':\n                return \"I'm processing your request to provide you with the appropriate information.\";\n            default:\n                return \"I'm analyzing the information to provide you with an answer.\";\n        }\n    }\n    /**\n   * Generate supportive core\n   */ generateSupportiveCore(context, style) {\n        const capabilities = this.getCapabilityDescription(style);\n        switch(style.personality){\n            case 'friendly':\n                return `I can understand relationships between people, animals, places, and things. ${capabilities}`;\n            case 'analytical':\n                return `I process information through semantic analysis and mathematical prime factorization. ${capabilities}`;\n            case 'professional':\n                return `I'm equipped to assist with information processing and semantic understanding. ${capabilities}`;\n            default:\n                return `I can help with understanding relationships and processing information. ${capabilities}`;\n        }\n    }\n    /**\n   * Generate gracious core\n   */ generateGraciousCore(context, style) {\n        switch(style.personality){\n            case 'friendly':\n                return \"I'm so glad I could help with my semantic understanding!\";\n            case 'analytical':\n                return \"I'm pleased that my mathematical analysis was useful.\";\n            case 'professional':\n                return \"I'm glad I could provide the assistance you needed.\";\n            default:\n                return \"I'm glad I could help!\";\n        }\n    }\n    /**\n   * Generate welcoming core\n   */ generateWelcomingCore(context, style) {\n        const botIdentity = this.getBotIdentityDescription(style);\n        const capabilities = this.getCapabilityDescription(style);\n        return `${botIdentity} ${capabilities}`;\n    }\n    /**\n   * Generate detailed core\n   */ generateDetailedCore(context, style) {\n        // For detailed explanations, provide more comprehensive information\n        const informativeCore = this.generateInformativeCore(context, style);\n        const technicalDetails = this.getTechnicalDetails(context, style);\n        return `${informativeCore} ${technicalDetails}`;\n    }\n    /**\n   * Generate transitional core\n   */ generateTransitionalCore(context, style) {\n        const discourseContext = context.discourseContext;\n        if (discourseContext?.topicState?.topicHistory?.length > 0) {\n            const previousTopic = discourseContext.topicState.topicHistory[discourseContext.topicState.topicHistory.length - 1];\n            return `I notice we've moved from discussing ${previousTopic} to a new topic.`;\n        }\n        return \"I'm ready to explore whatever you'd like to discuss.\";\n    }\n    /**\n   * Generate default core\n   */ generateDefaultCore(context, style) {\n        switch(style.personality){\n            case 'friendly':\n                return \"I'm listening and ready to understand what you're telling me!\";\n            case 'analytical':\n                return \"I'm processing the semantic relationships in your message.\";\n            case 'professional':\n                return \"I'm ready to assist with your inquiry.\";\n            default:\n                return \"I'm listening and ready to help.\";\n        }\n    }\n    /**\n   * Generate followup\n   */ generateFollowup(context, style) {\n        const responseType = context.responseType;\n        const conversationPhase = context.discourseContext?.conversationPhase;\n        // Generate followup based on response type and conversation phase\n        if (responseType === 'acknowledgment_with_followup' || responseType === 'welcoming_response' || conversationPhase === 'exploration') {\n            return this.generateContextualFollowup(context, style);\n        }\n        return '';\n    }\n    /**\n   * Generate contextual followup\n   */ generateContextualFollowup(context, style) {\n        const conversationPhase = context.discourseContext?.conversationPhase;\n        switch(conversationPhase){\n            case 'opening':\n                return this.generateOpeningFollowup(style);\n            case 'exploration':\n                return this.generateExplorationFollowup(context, style);\n            case 'deepening':\n                return this.generateDeepeningFollowup(context, style);\n            default:\n                return this.generateGenericFollowup(style);\n        }\n    }\n    /**\n   * Generate opening followup\n   */ generateOpeningFollowup(style) {\n        switch(style.personality){\n            case 'friendly':\n                return \"How can I help you today?\";\n            case 'helpful':\n                return \"What can I assist you with?\";\n            case 'analytical':\n                return \"What would you like to explore?\";\n            case 'professional':\n                return \"How may I assist you?\";\n            default:\n                return \"How can I help?\";\n        }\n    }\n    /**\n   * Generate exploration followup\n   */ generateExplorationFollowup(context, style) {\n        const entities = context.semanticContext?.entities || [];\n        if (entities.length > 0) {\n            const entity = entities[entities.length - 1]; // Most recent entity\n            switch(style.personality){\n                case 'friendly':\n                    return `Tell me more about ${entity}!`;\n                case 'analytical':\n                    return `What additional information can you provide about ${entity}?`;\n                case 'professional':\n                    return `Please share more details about ${entity}.`;\n                default:\n                    return `Tell me more about ${entity}.`;\n            }\n        }\n        return this.generateGenericFollowup(style);\n    }\n    /**\n   * Generate deepening followup\n   */ generateDeepeningFollowup(context, style) {\n        switch(style.personality){\n            case 'friendly':\n                return \"What else would you like to explore about this?\";\n            case 'analytical':\n                return \"Are there specific aspects you'd like me to analyze further?\";\n            case 'professional':\n                return \"What additional details would be helpful?\";\n            default:\n                return \"What else would you like to know?\";\n        }\n    }\n    /**\n   * Generate generic followup\n   */ generateGenericFollowup(style) {\n        switch(style.personality){\n            case 'friendly':\n                return \"What would you like to discuss?\";\n            case 'analytical':\n                return \"What would you like to analyze?\";\n            case 'professional':\n                return \"What would you like to explore?\";\n            default:\n                return \"What would you like to discuss?\";\n        }\n    }\n    /**\n   * Generate closing\n   */ generateClosing(context, style) {\n        // Only add closing for certain response types and high verbosity\n        if (style.verbosity === 'detailed' && (context.responseType === 'welcoming_response' || context.responseType === 'detailed_explanation')) {\n            switch(style.personality){\n                case 'friendly':\n                    return \"I'm excited to learn more!\";\n                case 'analytical':\n                    return \"I'm ready to process more information.\";\n                case 'professional':\n                    return \"I look forward to assisting you further.\";\n                default:\n                    return \"\";\n            }\n        }\n        return '';\n    }\n    /**\n   * Assemble final response\n   */ assembleResponse(components, style) {\n        const parts = [];\n        if (components.opening) parts.push(components.opening);\n        if (components.core) parts.push(components.core);\n        if (components.followup) parts.push(components.followup);\n        if (components.closing) parts.push(components.closing);\n        return parts.join(' ');\n    }\n    /**\n   * Get bot identity description\n   */ getBotIdentityDescription(style) {\n        switch(style.personality){\n            case 'friendly':\n                return \"I'm PrimeBot, your friendly AI assistant powered by mathematical prime factorization and semantic understanding.\";\n            case 'analytical':\n                return \"I'm PrimeBot, an AI system that processes information through mathematical prime factorization and semantic analysis.\";\n            case 'professional':\n                return \"I'm PrimeBot, an AI assistant specializing in semantic understanding and mathematical analysis.\";\n            default:\n                return \"I'm PrimeBot, powered by mathematical prime factorization and semantic understanding.\";\n        }\n    }\n    /**\n   * Get capability description\n   */ getCapabilityDescription(style) {\n        switch(style.verbosity){\n            case 'detailed':\n                return \"I can understand relationships between people, animals, places, and things using Schema.org vocabulary, maintain conversation memory, and provide contextual responses based on mathematical prime resonance.\";\n            case 'moderate':\n                return \"I can understand relationships between entities and maintain conversation context.\";\n            case 'concise':\n                return \"I understand entity relationships and context.\";\n            default:\n                return \"I can help with understanding relationships and processing information.\";\n        }\n    }\n    /**\n   * Get technical details\n   */ getTechnicalDetails(context, style) {\n        if (style.personality !== 'analytical') {\n            return '';\n        }\n        return 'Using mathematical prime factorization and Schema.org semantic relationships for analysis.';\n    }\n    /**\n   * Generate generic acknowledgment\n   */ generateGenericAcknowledgment(style) {\n        switch(style.personality){\n            case 'friendly':\n                return \"That's interesting! I'm learning about what you're telling me.\";\n            case 'analytical':\n                return \"Information processed and stored in semantic memory.\";\n            case 'professional':\n                return \"I acknowledge the information you've provided.\";\n            default:\n                return \"I understand. Thank you for sharing that with me.\";\n        }\n    }\n    /**\n   * Capitalize first letter of a string\n   */ capitalizeFirstLetter(str) {\n        if (!str) return str;\n        return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/conversation/generative-layer.ts\n");

/***/ }),

/***/ "(ssr)/./src/lib/conversation/pragmatic-layer.ts":
/*!*************************************************!*\
  !*** ./src/lib/conversation/pragmatic-layer.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PragmaticLayer: () => (/* binding */ PragmaticLayer)\n/* harmony export */ });\n// =============================================================================\n// PRAGMATIC LAYER - Conversation Context and Intent Management\n// =============================================================================\nclass PragmaticLayer {\n    constructor(){\n        this.activeIntents = new Map();\n        this.maxHistoryLength = 20;\n        this.context = {\n            currentTopic: null,\n            activeIntents: [],\n            entityMemory: new Map(),\n            conversationGoals: [],\n            userPreferences: {},\n            conversationHistory: []\n        };\n    }\n    /**\n   * Process a new conversation turn and update context\n   */ processTurn(speaker, text, intent, entities, semanticContext) {\n        console.log('🎯 Pragmatic Layer processing turn...');\n        console.log('Speaker:', speaker, 'Intent:', intent);\n        console.log('Entities:', entities);\n        // Create conversation turn\n        const turn = {\n            id: `turn-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n            timestamp: Date.now(),\n            speaker,\n            text,\n            intent,\n            entities,\n            context: semanticContext\n        };\n        // Add to conversation history\n        this.context.conversationHistory.push(turn);\n        this.maintainHistoryLength();\n        // Update entity memory\n        this.updateEntityMemory(entities);\n        // Update intent tracking\n        this.updateIntentTracking(intent, entities);\n        // Update conversation topic\n        this.updateCurrentTopic(intent, entities, text);\n        // Update conversation goals\n        this.updateConversationGoals(intent, entities);\n        console.log('🎯 Updated context - Topic:', this.context.currentTopic);\n        console.log('🎯 Active intents:', this.context.activeIntents);\n        console.log('🎯 Entity memory size:', this.context.entityMemory.size);\n        return {\n            ...this.context\n        };\n    }\n    /**\n   * Update entity memory with new information\n   */ updateEntityMemory(entities) {\n        Object.entries(entities).forEach(([key, value])=>{\n            if (value && typeof value === 'string' && value.length > 0) {\n                // Store entity with metadata\n                const entityInfo = {\n                    value,\n                    lastMentioned: Date.now(),\n                    mentionCount: (this.context.entityMemory.get(key)?.mentionCount || 0) + 1,\n                    context: this.context.currentTopic\n                };\n                this.context.entityMemory.set(key, entityInfo);\n                console.log(`💾 Stored entity: ${key} = ${value}`);\n            }\n        });\n        // Handle special entity patterns\n        this.handleSpecialEntityPatterns(entities);\n    }\n    /**\n   * Handle special entity relationship patterns\n   */ handleSpecialEntityPatterns(entities) {\n        // Handle \"X's name is Y\" patterns\n        if (entities.entityType && entities.entityName) {\n            const relationshipKey = `${entities.entityType}_name`;\n            const relationshipInfo = {\n                value: entities.entityName,\n                entityType: entities.entityType,\n                relationship: 'hasName',\n                lastMentioned: Date.now(),\n                mentionCount: 1\n            };\n            this.context.entityMemory.set(relationshipKey, relationshipInfo);\n            console.log(`🔗 Stored relationship: ${entities.entityType} hasName ${entities.entityName}`);\n        }\n        // Handle user identity\n        if (entities.userName) {\n            this.context.entityMemory.set('user_name', {\n                value: entities.userName,\n                relationship: 'identity',\n                lastMentioned: Date.now(),\n                mentionCount: (this.context.entityMemory.get('user_name')?.mentionCount || 0) + 1\n            });\n        }\n        // Handle \"My name is X\" patterns\n        const entityValues = Object.values(entities);\n        if (entityValues.length === 1 && typeof entityValues[0] === 'string') {\n            // Single entity that could be a name\n            const entityValue = entityValues[0];\n            if (entityValue.length > 1 && entityValue[0].toUpperCase() === entityValue[0]) {\n                // Looks like a proper name (capitalized)\n                this.context.entityMemory.set('user_name', {\n                    value: entityValue,\n                    relationship: 'identity',\n                    lastMentioned: Date.now(),\n                    mentionCount: (this.context.entityMemory.get('user_name')?.mentionCount || 0) + 1\n                });\n                console.log(`👤 Stored user name: ${entityValue}`);\n            }\n        }\n        // Handle \"My X's name is Y\" patterns\n        if (entityValues.length === 2) {\n            const [entityType, entityName] = entityValues;\n            if (entityType && entityName && entityName[0].toUpperCase() === entityName[0]) {\n                const relationshipKey = `${entityType}_name`;\n                const relationshipInfo = {\n                    value: entityName,\n                    entityType: entityType,\n                    relationship: 'hasName',\n                    lastMentioned: Date.now(),\n                    mentionCount: 1\n                };\n                this.context.entityMemory.set(relationshipKey, relationshipInfo);\n                console.log(`🔗 Stored relationship: ${entityType} hasName ${entityName}`);\n            }\n        }\n        // Handle pronoun references like \"Her name is X\"\n        if (entityValues.length === 3) {\n            const [pronoun, nameWord, name] = entityValues;\n            if ((pronoun === 'her' || pronoun === 'his') && nameWord === 'name' && name[0].toUpperCase() === name[0]) {\n                // Look for the most recent entity that could be referenced by this pronoun\n                const recentEntityType = this.findRecentEntityForPronoun(pronoun);\n                if (recentEntityType) {\n                    const relationshipKey = `${recentEntityType}_name`;\n                    const relationshipInfo = {\n                        value: name,\n                        entityType: recentEntityType,\n                        relationship: 'hasName',\n                        lastMentioned: Date.now(),\n                        mentionCount: 1\n                    };\n                    this.context.entityMemory.set(relationshipKey, relationshipInfo);\n                    console.log(`🔗 Stored pronoun relationship: ${recentEntityType} hasName ${name} (via ${pronoun})`);\n                }\n            }\n        }\n    }\n    /**\n   * Update intent tracking and persistence\n   */ updateIntentTracking(intent, entities) {\n        // Update existing intent or create new one\n        if (this.activeIntents.has(intent)) {\n            const intentState = this.activeIntents.get(intent);\n            intentState.confidence = Math.min(intentState.confidence + 0.1, 1.0);\n            intentState.turnsSinceActivation = 0;\n            intentState.parameters = {\n                ...intentState.parameters,\n                ...entities\n            };\n        } else {\n            this.activeIntents.set(intent, {\n                intent,\n                confidence: 0.8,\n                parameters: entities,\n                isActive: true,\n                turnsSinceActivation: 0\n            });\n        }\n        // Age existing intents\n        for (const [intentName, intentState] of this.activeIntents){\n            if (intentName !== intent) {\n                intentState.turnsSinceActivation++;\n                intentState.confidence = Math.max(intentState.confidence - 0.05, 0);\n                // Deactivate old intents\n                if (intentState.turnsSinceActivation > 5 || intentState.confidence < 0.2) {\n                    intentState.isActive = false;\n                }\n            }\n        }\n        // Update active intents list\n        this.context.activeIntents = Array.from(this.activeIntents.values()).filter((state)=>state.isActive).map((state)=>state.intent);\n    }\n    /**\n   * Update current conversation topic\n   */ updateCurrentTopic(intent, entities, text) {\n        // Topic inference based on intent and entities\n        let newTopic = null;\n        if (intent === 'ENTITY_INTRODUCTION' || intent === 'ENTITY_QUERY') {\n            if (entities.entityType) {\n                newTopic = `${entities.entityType}_discussion`;\n            }\n        } else if (intent === 'IDENTITY_INTRODUCTION' || intent === 'IDENTITY_QUERY') {\n            newTopic = 'identity_discussion';\n        } else if (intent === 'GREETING') {\n            newTopic = 'greeting_exchange';\n        } else if (intent === 'HELP_REQUEST') {\n            newTopic = 'assistance_request';\n        } else if (intent === 'INFORMATION_REQUEST') {\n            // Infer topic from entities or keywords\n            const keywords = this.extractKeywords(text);\n            if (keywords.length > 0) {\n                newTopic = `${keywords[0]}_information`;\n            }\n        }\n        // Update topic if we have a clear new topic\n        if (newTopic && newTopic !== this.context.currentTopic) {\n            this.context.currentTopic = newTopic;\n        }\n    }\n    /**\n   * Update conversation goals based on intent\n   */ updateConversationGoals(intent, entities) {\n        const goals = this.context.conversationGoals;\n        switch(intent){\n            case 'HELP_REQUEST':\n                if (!goals.includes('provide_assistance')) {\n                    goals.push('provide_assistance');\n                }\n                break;\n            case 'INFORMATION_REQUEST':\n                if (!goals.includes('provide_information')) {\n                    goals.push('provide_information');\n                }\n                break;\n            case 'IDENTITY_INTRODUCTION':\n                if (!goals.includes('build_rapport')) {\n                    goals.push('build_rapport');\n                }\n                break;\n            case 'ENTITY_INTRODUCTION':\n                if (!goals.includes('learn_about_user')) {\n                    goals.push('learn_about_user');\n                }\n                break;\n        }\n        // Keep goals list manageable\n        if (goals.length > 5) {\n            this.context.conversationGoals = goals.slice(-5);\n        }\n    }\n    /**\n   * Extract keywords from text for topic inference\n   */ extractKeywords(text) {\n        return text.toLowerCase().split(/\\W+/).filter((word)=>word.length > 3).filter((word)=>!this.isStopWord(word)).slice(0, 3);\n    }\n    /**\n   * Check if word is a stop word\n   */ isStopWord(word) {\n        const stopWords = [\n            'what',\n            'when',\n            'where',\n            'how',\n            'why',\n            'who',\n            'this',\n            'that',\n            'with',\n            'from',\n            'they',\n            'them',\n            'their',\n            'there',\n            'then',\n            'than',\n            'these',\n            'those'\n        ];\n        return stopWords.includes(word);\n    }\n    /**\n   * Maintain conversation history length\n   */ maintainHistoryLength() {\n        if (this.context.conversationHistory.length > this.maxHistoryLength) {\n            this.context.conversationHistory = this.context.conversationHistory.slice(-this.maxHistoryLength);\n        }\n    }\n    /**\n   * Query entity memory for specific information\n   */ queryEntityMemory(entityKey) {\n        const entity = this.context.entityMemory.get(entityKey);\n        if (entity) {\n            console.log(`🔍 Retrieved entity: ${entityKey} = ${entity.value}`);\n            return entity;\n        }\n        return null;\n    }\n    /**\n   * Query for entity relationships (e.g., \"dog_name\")\n   */ queryEntityRelationship(entityType, relationship) {\n        const relationshipKey = `${entityType}_${relationship}`;\n        return this.queryEntityMemory(relationshipKey);\n    }\n    /**\n   * Get conversation context for response generation\n   */ getContextForResponse() {\n        const recentHistory = this.context.conversationHistory.slice(-5);\n        // Get relevant entities based on current topic and recent mentions\n        const relevantEntities = {};\n        const recentThreshold = Date.now() - 5 * 60 * 1000; // 5 minutes\n        for (const [key, entity] of this.context.entityMemory){\n            if (entity.lastMentioned > recentThreshold || this.context.currentTopic && entity.context === this.context.currentTopic) {\n                relevantEntities[key] = entity;\n            }\n        }\n        return {\n            recentHistory,\n            currentTopic: this.context.currentTopic,\n            activeIntents: this.context.activeIntents,\n            relevantEntities,\n            conversationGoals: this.context.conversationGoals\n        };\n    }\n    /**\n   * Check if we should continue current conversation thread\n   */ shouldContinueThread(newIntent) {\n        const activeIntentStates = Array.from(this.activeIntents.values()).filter((state)=>state.isActive);\n        // Continue thread if we have related active intents\n        const relatedIntents = this.getRelatedIntents(newIntent);\n        return activeIntentStates.some((state)=>relatedIntents.includes(state.intent) && state.confidence > 0.5);\n    }\n    /**\n   * Get intents related to the given intent\n   */ getRelatedIntents(intent) {\n        const intentRelations = {\n            'IDENTITY_QUERY': [\n                'IDENTITY_INTRODUCTION',\n                'ENTITY_QUERY'\n            ],\n            'ENTITY_QUERY': [\n                'ENTITY_INTRODUCTION',\n                'IDENTITY_QUERY'\n            ],\n            'INFORMATION_REQUEST': [\n                'HELP_REQUEST',\n                'KNOWLEDGE_REQUEST'\n            ],\n            'HELP_REQUEST': [\n                'INFORMATION_REQUEST',\n                'KNOWLEDGE_REQUEST'\n            ]\n        };\n        return intentRelations[intent] || [];\n    }\n    /**\n   * Reset conversation context (for new conversations)\n   */ resetContext() {\n        this.context = {\n            currentTopic: null,\n            activeIntents: [],\n            entityMemory: new Map(),\n            conversationGoals: [],\n            userPreferences: {},\n            conversationHistory: []\n        };\n        this.activeIntents.clear();\n        console.log('🔄 Pragmatic context reset');\n    }\n    /**\n   * Find the most recent entity that could be referenced by a pronoun\n   */ findRecentEntityForPronoun(pronoun) {\n        // Look through recent conversation history for entity queries\n        const recentTurns = this.context.conversationHistory.slice(-3);\n        for(let i = recentTurns.length - 1; i >= 0; i--){\n            const turn = recentTurns[i];\n            // Look for entity queries that would establish context\n            if (turn.intent === 'ENTITY_QUERY') {\n                const entityKeys = Object.keys(turn.entities);\n                for (const key of entityKeys){\n                    const entityValue = turn.entities[key];\n                    if (typeof entityValue === 'string' && entityValue.length > 2) {\n                        // Check if this entity type makes sense for the pronoun\n                        if (pronoun === 'her' && this.isFemalePronounEntity(entityValue)) {\n                            return entityValue;\n                        } else if (pronoun === 'his' && this.isMalePronounEntity(entityValue)) {\n                            return entityValue;\n                        } else if (entityValue !== 'is' && entityValue !== 'name') {\n                            // Default to the entity if no gender-specific match\n                            return entityValue;\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /**\n   * Check if entity type typically uses female pronouns\n   */ isFemalePronounEntity(entityType) {\n        const femaleEntities = [\n            'wife',\n            'mother',\n            'sister',\n            'daughter',\n            'girlfriend',\n            'aunt',\n            'grandmother'\n        ];\n        return femaleEntities.includes(entityType.toLowerCase());\n    }\n    /**\n   * Check if entity type typically uses male pronouns\n   */ isMalePronounEntity(entityType) {\n        const maleEntities = [\n            'husband',\n            'father',\n            'brother',\n            'son',\n            'boyfriend',\n            'uncle',\n            'grandfather'\n        ];\n        return maleEntities.includes(entityType.toLowerCase());\n    }\n    /**\n   * Get debug information about current context\n   */ getDebugInfo() {\n        return {\n            currentTopic: this.context.currentTopic,\n            activeIntents: this.context.activeIntents,\n            entityMemorySize: this.context.entityMemory.size,\n            entityMemory: Object.fromEntries(this.context.entityMemory),\n            conversationGoals: this.context.conversationGoals,\n            historyLength: this.context.conversationHistory.length,\n            activeIntentStates: Object.fromEntries(this.activeIntents)\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/conversation/pragmatic-layer.ts\n");

/***/ }),

/***/ "(ssr)/./src/lib/core/prime-math.ts":
/*!************************************!*\
  !*** ./src/lib/core/prime-math.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PrimeMath: () => (/* binding */ PrimeMath)\n/* harmony export */ });\n// =============================================================================\n// PRIME MATHEMATICS UTILITIES\n// =============================================================================\nclass PrimeMath {\n    static{\n        this.primes = [];\n    }\n    static generatePrimes(n) {\n        if (this.primes.length >= n) return this.primes.slice(0, n);\n        const primes = [\n            2\n        ];\n        let num = 3;\n        while(primes.length < n){\n            let isPrime = true;\n            for(let i = 0; i < primes.length && primes[i] * primes[i] <= num; i++){\n                if (num % primes[i] === 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) primes.push(num);\n            num += 2;\n        }\n        this.primes = primes;\n        return primes;\n    }\n    static embeddingsToPrimes(embeddings, threshold = 0.02) {\n        const primes = this.generatePrimes(embeddings.length);\n        const primeFactors = {};\n        embeddings.forEach((value, index)=>{\n            if (Math.abs(value) > threshold) {\n                const prime = primes[index % primes.length];\n                const weight = Math.floor(Math.abs(value) * 1000) + 1;\n                primeFactors[prime] = (primeFactors[prime] || 0) + weight;\n            }\n        });\n        return primeFactors;\n    }\n    static calculateCoherence(primes1, primes2) {\n        const sharedFactors = {};\n        Object.keys(primes1).forEach((primeStr)=>{\n            const prime = parseInt(primeStr);\n            if (primes2[prime]) {\n                sharedFactors[prime] = Math.sqrt(primes1[prime] * primes2[prime]);\n            }\n        });\n        const sharedMagnitude = this.calculateMagnitude(sharedFactors);\n        const totalMagnitude = Math.sqrt(this.calculateMagnitude(primes1) * this.calculateMagnitude(primes2));\n        return totalMagnitude > 0 ? sharedMagnitude / totalMagnitude : 0;\n    }\n    static calculateMagnitude(primes) {\n        return Math.sqrt(Object.values(primes).reduce((sum, weight)=>sum + weight * weight, 0));\n    }\n    static combineFactors(primes1, primes2, ratio = 0.5) {\n        const combined = {};\n        // Combine from first set\n        Object.entries(primes1).forEach(([primeStr, weight])=>{\n            const prime = parseInt(primeStr);\n            combined[prime] = Math.floor(weight * ratio);\n        });\n        // Combine from second set\n        Object.entries(primes2).forEach(([primeStr, weight])=>{\n            const prime = parseInt(primeStr);\n            combined[prime] = (combined[prime] || 0) + Math.floor(weight * (1 - ratio));\n        });\n        return combined;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUN2QlcsUUFBUSxDQUFDcEIsTUFBTSxHQUFHRixLQUFLSSxLQUFLLENBQUNELFNBQVNrQjtRQUN4QztRQUVBLDBCQUEwQjtRQUMxQlosT0FBT2MsT0FBTyxDQUFDaEIsU0FBU1YsT0FBTyxDQUFDLENBQUMsQ0FBQ2MsVUFBVVIsT0FBTztZQUNqRCxNQUFNRCxRQUFRVSxTQUFTRDtZQUN2QlcsUUFBUSxDQUFDcEIsTUFBTSxHQUFHLENBQUNvQixRQUFRLENBQUNwQixNQUFNLElBQUksS0FBS0YsS0FBS0ksS0FBSyxDQUFDRCxTQUFVLEtBQUlrQixLQUFJO1FBQzFFO1FBRUEsT0FBT0M7SUFDVDtBQUNGIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9QcmltZUxNLURlbW8vc3JjL2xpYi9jb3JlL3ByaW1lLW1hdGgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFBSSU1FIE1BVEhFTUFUSUNTIFVUSUxJVElFU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZXhwb3J0IGNsYXNzIFByaW1lTWF0aCB7XG4gIHByaXZhdGUgc3RhdGljIHByaW1lczogbnVtYmVyW10gPSBbXTtcblxuICBzdGF0aWMgZ2VuZXJhdGVQcmltZXMobjogbnVtYmVyKTogbnVtYmVyW10ge1xuICAgIGlmICh0aGlzLnByaW1lcy5sZW5ndGggPj0gbikgcmV0dXJuIHRoaXMucHJpbWVzLnNsaWNlKDAsIG4pO1xuICAgIFxuICAgIGNvbnN0IHByaW1lcyA9IFsyXTtcbiAgICBsZXQgbnVtID0gMztcbiAgICB3aGlsZSAocHJpbWVzLmxlbmd0aCA8IG4pIHtcbiAgICAgIGxldCBpc1ByaW1lID0gdHJ1ZTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJpbWVzLmxlbmd0aCAmJiBwcmltZXNbaV0gKiBwcmltZXNbaV0gPD0gbnVtOyBpKyspIHtcbiAgICAgICAgaWYgKG51bSAlIHByaW1lc1tpXSA9PT0gMCkge1xuICAgICAgICAgIGlzUHJpbWUgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzUHJpbWUpIHByaW1lcy5wdXNoKG51bSk7XG4gICAgICBudW0gKz0gMjtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5wcmltZXMgPSBwcmltZXM7XG4gICAgcmV0dXJuIHByaW1lcztcbiAgfVxuXG4gIHN0YXRpYyBlbWJlZGRpbmdzVG9QcmltZXMoZW1iZWRkaW5nczogbnVtYmVyW10sIHRocmVzaG9sZDogbnVtYmVyID0gMC4wMik6IFJlY29yZDxudW1iZXIsIG51bWJlcj4ge1xuICAgIGNvbnN0IHByaW1lcyA9IHRoaXMuZ2VuZXJhdGVQcmltZXMoZW1iZWRkaW5ncy5sZW5ndGgpO1xuICAgIGNvbnN0IHByaW1lRmFjdG9yczogUmVjb3JkPG51bWJlciwgbnVtYmVyPiA9IHt9O1xuICAgIFxuICAgIGVtYmVkZGluZ3MuZm9yRWFjaCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoTWF0aC5hYnModmFsdWUpID4gdGhyZXNob2xkKSB7XG4gICAgICAgIGNvbnN0IHByaW1lID0gcHJpbWVzW2luZGV4ICUgcHJpbWVzLmxlbmd0aF07XG4gICAgICAgIGNvbnN0IHdlaWdodCA9IE1hdGguZmxvb3IoTWF0aC5hYnModmFsdWUpICogMTAwMCkgKyAxO1xuICAgICAgICBwcmltZUZhY3RvcnNbcHJpbWVdID0gKHByaW1lRmFjdG9yc1twcmltZV0gfHwgMCkgKyB3ZWlnaHQ7XG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIHByaW1lRmFjdG9ycztcbiAgfVxuXG4gIHN0YXRpYyBjYWxjdWxhdGVDb2hlcmVuY2UocHJpbWVzMTogUmVjb3JkPG51bWJlciwgbnVtYmVyPiwgcHJpbWVzMjogUmVjb3JkPG51bWJlciwgbnVtYmVyPik6IG51bWJlciB7XG4gICAgY29uc3Qgc2hhcmVkRmFjdG9yczogUmVjb3JkPG51bWJlciwgbnVtYmVyPiA9IHt9O1xuICAgIE9iamVjdC5rZXlzKHByaW1lczEpLmZvckVhY2gocHJpbWVTdHIgPT4ge1xuICAgICAgY29uc3QgcHJpbWUgPSBwYXJzZUludChwcmltZVN0cik7XG4gICAgICBpZiAocHJpbWVzMltwcmltZV0pIHtcbiAgICAgICAgc2hhcmVkRmFjdG9yc1twcmltZV0gPSBNYXRoLnNxcnQocHJpbWVzMVtwcmltZV0gKiBwcmltZXMyW3ByaW1lXSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgY29uc3Qgc2hhcmVkTWFnbml0dWRlID0gdGhpcy5jYWxjdWxhdGVNYWduaXR1ZGUoc2hhcmVkRmFjdG9ycyk7XG4gICAgY29uc3QgdG90YWxNYWduaXR1ZGUgPSBNYXRoLnNxcnQoXG4gICAgICB0aGlzLmNhbGN1bGF0ZU1hZ25pdHVkZShwcmltZXMxKSAqIHRoaXMuY2FsY3VsYXRlTWFnbml0dWRlKHByaW1lczIpXG4gICAgKTtcbiAgICBcbiAgICByZXR1cm4gdG90YWxNYWduaXR1ZGUgPiAwID8gc2hhcmVkTWFnbml0dWRlIC8gdG90YWxNYWduaXR1ZGUgOiAwO1xuICB9XG5cbiAgc3RhdGljIGNhbGN1bGF0ZU1hZ25pdHVkZShwcmltZXM6IFJlY29yZDxudW1iZXIsIG51bWJlcj4pOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLnNxcnQoXG4gICAgICBPYmplY3QudmFsdWVzKHByaW1lcykucmVkdWNlKChzdW0sIHdlaWdodCkgPT4gc3VtICsgd2VpZ2h0ICogd2VpZ2h0LCAwKVxuICAgICk7XG4gIH1cblxuICBzdGF0aWMgY29tYmluZUZhY3RvcnMocHJpbWVzMTogUmVjb3JkPG51bWJlciwgbnVtYmVyPiwgcHJpbWVzMjogUmVjb3JkPG51bWJlciwgbnVtYmVyPiwgcmF0aW86IG51bWJlciA9IDAuNSk6IFJlY29yZDxudW1iZXIsIG51bWJlcj4ge1xuICAgIGNvbnN0IGNvbWJpbmVkOiBSZWNvcmQ8bnVtYmVyLCBudW1iZXI+ID0ge307XG4gICAgXG4gICAgLy8gQ29tYmluZSBmcm9tIGZpcnN0IHNldFxuICAgIE9iamVjdC5lbnRyaWVzKHByaW1lczEpLmZvckVhY2goKFtwcmltZVN0ciwgd2VpZ2h0XSkgPT4ge1xuICAgICAgY29uc3QgcHJpbWUgPSBwYXJzZUludChwcmltZVN0cik7XG4gICAgICBjb21iaW5lZFtwcmltZV0gPSBNYXRoLmZsb29yKHdlaWdodCAqIHJhdGlvKTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBDb21iaW5lIGZyb20gc2Vjb25kIHNldFxuICAgIE9iamVjdC5lbnRyaWVzKHByaW1lczIpLmZvckVhY2goKFtwcmltZVN0ciwgd2VpZ2h0XSkgPT4ge1xuICAgICAgY29uc3QgcHJpbWUgPSBwYXJzZUludChwcmltZVN0cik7XG4gICAgICBjb21iaW5lZFtwcmltZV0gPSAoY29tYmluZWRbcHJpbWVdIHx8IDApICsgTWF0aC5mbG9vcih3ZWlnaHQgKiAoMSAtIHJhdGlvKSk7XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIGNvbWJpbmVkO1xuICB9XG59XG4iXSwibmFtZXMiOlsiUHJpbWVNYXRoIiwicHJpbWVzIiwiZ2VuZXJhdGVQcmltZXMiLCJuIiwibGVuZ3RoIiwic2xpY2UiLCJudW0iLCJpc1ByaW1lIiwiaSIsInB1c2giLCJlbWJlZGRpbmdzVG9QcmltZXMiLCJlbWJlZGRpbmdzIiwidGhyZXNob2xkIiwicHJpbWVGYWN0b3JzIiwiZm9yRWFjaCIsInZhbHVlIiwiaW5kZXgiLCJNYXRoIiwiYWJzIiwicHJpbWUiLCJ3ZWlnaHQiLCJmbG9vciIsImNhbGN1bGF0ZUNvaGVyZW5jZSIsInByaW1lczEiLCJwcmltZXMyIiwic2hhcmVkRmFjdG9ycyIsIk9iamVjdCIsImtleXMiLCJwcmltZVN0ciIsInBhcnNlSW50Iiwic3FydCIsInNoYXJlZE1hZ25pdHVkZSIsImNhbGN1bGF0ZU1hZ25pdHVkZSIsInRvdGFsTWFnbml0dWRlIiwidmFsdWVzIiwicmVkdWNlIiwic3VtIiwiY29tYmluZUZhY3RvcnMiLCJyYXRpbyIsImNvbWJpbmVkIiwiZW50cmllcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/core/prime-math.ts\n");

/***/ }),

/***/ "(ssr)/./src/lib/core/prime-resonance.ts":
/*!*****************************************!*\
  !*** ./src/lib/core/prime-resonance.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PrimeResonanceEngine: () => (/* binding */ PrimeResonanceEngine)\n/* harmony export */ });\n// =============================================================================\n// PRIME RESONANCE ENGINE\n// =============================================================================\nclass PrimeResonanceEngine {\n    /**\n   * Find words with highest mathematical resonance to input prime factors\n   * This replaces embedding-based similarity with direct prime-to-prime comparison\n   */ findMostResonantWords(inputPrimes, vocabularyPrimes, count = 3) {\n        console.log('🔢 Finding resonant words using direct prime comparison...');\n        console.log('Input primes:', this.formatPrimes(inputPrimes));\n        const resonanceResults = [];\n        for (const [word, wordPrimes] of vocabularyPrimes){\n            const resonance = this.calculatePrimeResonance(inputPrimes, wordPrimes);\n            const sharedPrimes = this.findSharedPrimes(inputPrimes, wordPrimes);\n            const harmonicMatches = this.findHarmonicMatches(inputPrimes, wordPrimes);\n            const coherenceScore = this.calculateCoherenceScore(inputPrimes, wordPrimes);\n            resonanceResults.push({\n                word,\n                resonance,\n                sharedPrimes,\n                harmonicMatches,\n                coherenceScore\n            });\n        }\n        // Sort by resonance score (highest first)\n        const sorted = resonanceResults.sort((a, b)=>b.resonance - a.resonance).slice(0, count * 2) // Get more candidates for filtering\n        .filter((result)=>result.resonance > 0); // Only meaningful resonance\n        console.log('Top resonance results:', sorted.slice(0, 5).map((r)=>`${r.word}: ${r.resonance.toFixed(1)} (shared: ${r.sharedPrimes.length}, harmonic: ${r.harmonicMatches.length})`));\n        return sorted.slice(0, count);\n    }\n    /**\n   * Calculate mathematical resonance between two prime factorizations\n   * Uses shared prime factors and their weight relationships\n   */ calculatePrimeResonance(primes1, primes2) {\n        let resonance = 0;\n        // Direct shared prime resonance (strongest signal)\n        for (const [prime, weight1] of Object.entries(primes1)){\n            const primeNum = parseInt(prime);\n            const weight2 = primes2[primeNum];\n            if (weight2) {\n                // Geometric mean of weights for shared primes\n                resonance += Math.sqrt(weight1 * weight2);\n            }\n        }\n        // Harmonic resonance (weaker but meaningful)\n        const harmonicResonance = this.calculateHarmonicResonance(primes1, primes2);\n        resonance += harmonicResonance * 0.3; // Weight harmonic matches less\n        return resonance;\n    }\n    /**\n   * Find prime numbers that appear in both factorizations\n   */ findSharedPrimes(primes1, primes2) {\n        const shared = [];\n        for (const prime of Object.keys(primes1)){\n            const primeNum = parseInt(prime);\n            if (primes2[primeNum]) {\n                shared.push(primeNum);\n            }\n        }\n        return shared.sort((a, b)=>a - b);\n    }\n    /**\n   * Find harmonic relationships between prime factorizations\n   * Looks for mathematical relationships like 2x, 3x, x+2, x-2\n   */ findHarmonicMatches(primes1, primes2) {\n        const harmonics = [];\n        for (const [prime1Str] of Object.entries(primes1)){\n            const prime1 = parseInt(prime1Str);\n            // Check for harmonic relationships\n            const harmonicCandidates = [\n                prime1 * 2,\n                prime1 * 3,\n                prime1 + 2,\n                prime1 - 2,\n                Math.floor(prime1 / 2),\n                Math.floor(prime1 / 3) // Third (if divisible)\n            ].filter((p)=>p > 1 && Number.isInteger(p));\n            for (const harmonic of harmonicCandidates){\n                if (primes2[harmonic]) {\n                    harmonics.push(harmonic);\n                }\n            }\n        }\n        return [\n            ...new Set(harmonics)\n        ].sort((a, b)=>a - b);\n    }\n    /**\n   * Calculate harmonic resonance between prime factorizations\n   */ calculateHarmonicResonance(primes1, primes2) {\n        let harmonicResonance = 0;\n        for (const [prime1Str, weight1] of Object.entries(primes1)){\n            const prime1 = parseInt(prime1Str);\n            // Check harmonic relationships\n            const harmonics = [\n                prime1 * 2,\n                prime1 + 2,\n                prime1 - 2\n            ];\n            for (const harmonic of harmonics){\n                const weight2 = primes2[harmonic];\n                if (weight2) {\n                    // Weaker resonance for harmonic matches\n                    harmonicResonance += Math.sqrt(weight1 * weight2) * 0.5;\n                }\n            }\n        }\n        return harmonicResonance;\n    }\n    /**\n   * Calculate mathematical coherence score between prime factorizations\n   * Similar to the existing coherence calculation but optimized for resonance\n   */ calculateCoherenceScore(primes1, primes2) {\n        const sharedFactors = {};\n        // Find shared prime factors\n        for (const [primeStr, weight1] of Object.entries(primes1)){\n            const prime = parseInt(primeStr);\n            const weight2 = primes2[prime];\n            if (weight2) {\n                sharedFactors[prime] = Math.sqrt(weight1 * weight2);\n            }\n        }\n        // Calculate coherence as ratio of shared to total magnitude\n        const sharedMagnitude = this.calculateMagnitude(sharedFactors);\n        const totalMagnitude = Math.sqrt(this.calculateMagnitude(primes1) * this.calculateMagnitude(primes2));\n        return totalMagnitude > 0 ? sharedMagnitude / totalMagnitude : 0;\n    }\n    /**\n   * Calculate magnitude of prime factorization\n   */ calculateMagnitude(primes) {\n        return Math.sqrt(Object.values(primes).reduce((sum, weight)=>sum + weight * weight, 0));\n    }\n    /**\n   * Format prime factorization for logging\n   */ formatPrimes(primes) {\n        const entries = Object.entries(primes).sort(([, a], [, b])=>b - a).slice(0, 5).map(([prime, weight])=>`${prime}:${Math.floor(weight)}`);\n        return `{${entries.join(', ')}}`;\n    }\n    /**\n   * Get contextual weighting based on conversation history\n   * Boosts resonance for words that appear in recent context\n   */ applyContextualWeighting(results, conversationContext, contextWeight = 1.5) {\n        const contextWords = conversationContext.join(' ').toLowerCase().split(/\\W+/).filter((word)=>word.length > 2);\n        return results.map((result)=>{\n            let boostedResonance = result.resonance;\n            // Boost resonance if word appears in conversation context\n            if (contextWords.includes(result.word.toLowerCase())) {\n                boostedResonance *= contextWeight;\n                console.log(`🎯 Context boost for \"${result.word}\": ${result.resonance.toFixed(1)} → ${boostedResonance.toFixed(1)}`);\n            }\n            return {\n                ...result,\n                resonance: boostedResonance\n            };\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/core/prime-resonance.ts\n");

/***/ }),

/***/ "(ssr)/./src/lib/core/primelm-models.ts":
/*!****************************************!*\
  !*** ./src/lib/core/primelm-models.ts ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PrimeCore: () => (/* binding */ PrimeCore)\n/* harmony export */ });\n/* harmony import */ var _xenova_transformers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @xenova/transformers */ \"@xenova/transformers\");\n/* harmony import */ var _semantic_knowledge_bootstrap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../semantic/knowledge-bootstrap */ \"(ssr)/./src/lib/semantic/knowledge-bootstrap.ts\");\n/* harmony import */ var _prime_resonance__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./prime-resonance */ \"(ssr)/./src/lib/core/prime-resonance.ts\");\n/* harmony import */ var _prime_math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./prime-math */ \"(ssr)/./src/lib/core/prime-math.ts\");\n/* harmony import */ var _semantic_semantic_layer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../semantic/semantic-layer */ \"(ssr)/./src/lib/semantic/semantic-layer.ts\");\n/* harmony import */ var _conversation_pragmatic_layer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../conversation/pragmatic-layer */ \"(ssr)/./src/lib/conversation/pragmatic-layer.ts\");\n/* harmony import */ var _semantic_schema_vocabulary__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../semantic/schema-vocabulary */ \"(ssr)/./src/lib/semantic/schema-vocabulary.ts\");\n/* harmony import */ var _conversation_discourse_layer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../conversation/discourse-layer */ \"(ssr)/./src/lib/conversation/discourse-layer.ts\");\n/* harmony import */ var _conversation_generative_layer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../conversation/generative-layer */ \"(ssr)/./src/lib/conversation/generative-layer.ts\");\n/* harmony import */ var _memory_episodic_memory__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../memory/episodic-memory */ \"(ssr)/./src/lib/memory/episodic-memory.ts\");\n/* harmony import */ var _memory_emotional_intelligence__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../memory/emotional-intelligence */ \"(ssr)/./src/lib/memory/emotional-intelligence.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_xenova_transformers__WEBPACK_IMPORTED_MODULE_0__]);\n_xenova_transformers__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\n\n\n\n\n// =============================================================================\n// PRIME CORE IMPLEMENTATION\n// =============================================================================\nclass PrimeCore {\n    constructor(){\n        this.embeddingPipeline = null;\n        this.isInitialized = false;\n        this.knowledgeBase = null;\n        // Initialize human user\n        this.humanUser = {\n            identity: {\n                id: 'human-001',\n                name: 'Human',\n                type: 'human',\n                embeddings: [],\n                primeFactors: {},\n                personality: {\n                    traits: [\n                        'curious',\n                        'conversational'\n                    ],\n                    communicationStyle: 'direct',\n                    interests: []\n                }\n            },\n            conversationState: {\n                embeddings: [],\n                primeFactors: {},\n                context: [],\n                turnCount: 0\n            },\n            preferences: {\n                topics: [],\n                responseLength: 'medium'\n            }\n        };\n        // Initialize chatbot user\n        this.chatbotUser = {\n            identity: {\n                id: 'chatbot-001',\n                name: 'PrimeBot',\n                type: 'chatbot',\n                embeddings: [],\n                primeFactors: {},\n                personality: {\n                    traits: [\n                        'helpful',\n                        'analytical',\n                        'mathematical'\n                    ],\n                    communicationStyle: 'thoughtful',\n                    interests: [\n                        'mathematics',\n                        'conversation',\n                        'learning'\n                    ]\n                }\n            },\n            conversationState: {\n                embeddings: [],\n                primeFactors: {},\n                context: [],\n                turnCount: 0\n            },\n            preferences: {\n                topics: [\n                    'mathematics',\n                    'prime numbers',\n                    'conversation'\n                ],\n                responseLength: 'medium'\n            }\n        };\n        // Initialize embeddings model\n        this.embeddingsModel = {\n            vocabulary: new Map(),\n            concepts: new Map(),\n            relationships: new Map()\n        };\n        // Initialize semantic layer\n        this.semanticLayer = new _semantic_semantic_layer__WEBPACK_IMPORTED_MODULE_4__.SemanticLayer();\n        // Initialize pragmatic layer\n        this.pragmaticLayer = new _conversation_pragmatic_layer__WEBPACK_IMPORTED_MODULE_5__.PragmaticLayer();\n        // Initialize schema vocabulary\n        this.schemaVocabulary = new _semantic_schema_vocabulary__WEBPACK_IMPORTED_MODULE_6__.SchemaVocabulary();\n        // Initialize discourse layer\n        this.discourseLayer = new _conversation_discourse_layer__WEBPACK_IMPORTED_MODULE_7__.DiscourseLayer(this.schemaVocabulary);\n        // Initialize generative layer\n        this.generativeLayer = new _conversation_generative_layer__WEBPACK_IMPORTED_MODULE_8__.GenerativeLayer(this.schemaVocabulary);\n        // Initialize Phase 3 layers\n        this.episodicMemoryLayer = new _memory_episodic_memory__WEBPACK_IMPORTED_MODULE_9__.EpisodicMemoryLayer();\n        this.emotionalIntelligenceLayer = new _memory_emotional_intelligence__WEBPACK_IMPORTED_MODULE_10__.EmotionalIntelligenceLayer();\n    // Embeddings model starts empty - no hardcoded data\n    }\n    async initialize() {\n        try {\n            console.log('🚀 Initializing PrimeLM Core...');\n            // Load embedding pipeline\n            this.embeddingPipeline = await (0,_xenova_transformers__WEBPACK_IMPORTED_MODULE_0__.pipeline)('feature-extraction', 'Xenova/all-MiniLM-L6-v2');\n            // Bootstrap chatbot knowledge\n            await this.bootstrapChatbotKnowledge();\n            this.isInitialized = true;\n            console.log('✅ PrimeLM Core initialized successfully');\n        } catch (error) {\n            console.error('❌ Failed to initialize PrimeLM Core:', error);\n            throw error;\n        }\n    }\n    async bootstrapChatbotKnowledge() {\n        if (!this.embeddingPipeline) {\n            throw new Error('Embedding pipeline not initialized');\n        }\n        try {\n            const knowledgeBootstrap = new _semantic_knowledge_bootstrap__WEBPACK_IMPORTED_MODULE_1__.KnowledgeBootstrap(this.embeddingPipeline);\n            this.knowledgeBase = await knowledgeBootstrap.bootstrapFromTokenizer();\n            // Populate embeddings model with bootstrapped knowledge\n            this.embeddingsModel.vocabulary = this.knowledgeBase.conceptEmbeddings;\n            this.embeddingsModel.concepts = this.knowledgeBase.conceptEmbeddings;\n            this.embeddingsModel.relationships = this.knowledgeBase.semanticClusters;\n            // Update chatbot identity with accumulated knowledge\n            this.populateChatbotIdentity();\n        } catch (error) {\n            console.error('❌ Knowledge bootstrap failed:', error);\n            throw new Error(`Knowledge bootstrap failed: ${error instanceof Error ? error.message : String(error)}`);\n        }\n    }\n    populateChatbotIdentity() {\n        if (!this.knowledgeBase) return;\n        // Accumulate prime factors from all vocabulary\n        const identityPrimes = {};\n        const allEmbeddings = [];\n        for (const vocabularyEntry of this.knowledgeBase.vocabulary.values()){\n            // Add prime factors to chatbot identity\n            Object.entries(vocabularyEntry.primeFactors).forEach(([prime, weight])=>{\n                const primeNum = parseInt(prime);\n                identityPrimes[primeNum] = (identityPrimes[primeNum] || 0) + weight;\n            });\n            allEmbeddings.push(vocabularyEntry.embedding);\n        }\n        // Calculate centroid embedding for chatbot identity\n        if (allEmbeddings.length > 0) {\n            const centroidEmbedding = this.calculateCentroidEmbedding(allEmbeddings);\n            this.chatbotUser.identity.embeddings = centroidEmbedding;\n            this.chatbotUser.identity.primeFactors = identityPrimes;\n        }\n    }\n    calculateCentroidEmbedding(embeddings) {\n        if (embeddings.length === 0) return new Array(384).fill(0);\n        const centroid = new Array(embeddings[0].length).fill(0);\n        embeddings.forEach((embedding)=>{\n            embedding.forEach((value, index)=>{\n                centroid[index] += value;\n            });\n        });\n        return centroid.map((value)=>value / embeddings.length);\n    }\n    async processConversation(input) {\n        if (!this.isInitialized || !this.embeddingPipeline) {\n            throw new Error('PrimeCore not initialized');\n        }\n        console.log(`🔬 Processing input: \"${input}\"`);\n        // 1. Generate embeddings for input\n        const inputEmbeddings = await this.generateEmbeddings(input);\n        // 2. Convert to primes through human user model\n        const inputPrimes = _prime_math__WEBPACK_IMPORTED_MODULE_3__.PrimeMath.embeddingsToPrimes(inputEmbeddings);\n        // 3. Update human user state\n        this.updateUserState(this.humanUser, input, inputEmbeddings, inputPrimes);\n        // 4. Generate response through mathematical translation\n        const responsePrimes = this.generateResponsePrimes(inputPrimes);\n        // 5. Convert response primes to text through chatbot user model\n        const responseText = await this.generateResponseText(responsePrimes);\n        // 6. Update chatbot user state\n        const responseEmbeddings = await this.generateEmbeddings(responseText);\n        this.updateUserState(this.chatbotUser, responseText, responseEmbeddings, responsePrimes);\n        console.log(`✅ Generated response: \"${responseText}\"`);\n        return responseText;\n    }\n    async generateEmbeddings(text) {\n        if (!this.embeddingPipeline) {\n            throw new Error('Embedding pipeline not initialized');\n        }\n        const result = await this.embeddingPipeline(text);\n        return Array.from(result.data);\n    }\n    updateUserState(user, text, embeddings, primes) {\n        user.conversationState.embeddings = embeddings;\n        user.conversationState.primeFactors = primes;\n        user.conversationState.context.push(text);\n        user.conversationState.turnCount++;\n        // Keep context manageable\n        if (user.conversationState.context.length > 10) {\n            user.conversationState.context = user.conversationState.context.slice(-10);\n        }\n        // Update identity embeddings (evolving representation)\n        if (user.identity.embeddings.length === 0) {\n            user.identity.embeddings = [\n                ...embeddings\n            ];\n            user.identity.primeFactors = {\n                ...primes\n            };\n        } else {\n            // Blend with existing identity\n            user.identity.embeddings = user.identity.embeddings.map((val, idx)=>val * 0.9 + embeddings[idx] * 0.1);\n            user.identity.primeFactors = _prime_math__WEBPACK_IMPORTED_MODULE_3__.PrimeMath.combineFactors(user.identity.primeFactors, primes, 0.9);\n        }\n        // Update embeddings model with real concepts from conversation\n        this.updateEmbeddingsModel(text, embeddings);\n    }\n    updateEmbeddingsModel(text, embeddings) {\n        // Extract key words/concepts from text\n        const words = text.toLowerCase().split(/\\W+/).filter((word)=>word.length > 2);\n        words.forEach((word)=>{\n            // Add to vocabulary with real embeddings\n            this.embeddingsModel.vocabulary.set(word, [\n                ...embeddings\n            ]);\n            // Add as concept if it's significant\n            if (word.length > 4) {\n                this.embeddingsModel.concepts.set(word, [\n                    ...embeddings\n                ]);\n            }\n        });\n        // Build relationships between concepts\n        if (words.length > 1) {\n            words.forEach((word, index)=>{\n                const relatedWords = words.filter((_, i)=>i !== index);\n                this.embeddingsModel.relationships.set(word, relatedWords);\n            });\n        }\n    }\n    generateResponsePrimes(inputPrimes) {\n        // Calculate coherence with chatbot's current state\n        const coherence = _prime_math__WEBPACK_IMPORTED_MODULE_3__.PrimeMath.calculateCoherence(inputPrimes, this.chatbotUser.conversationState.primeFactors);\n        console.log(`🧮 Coherence score: ${(coherence * 100).toFixed(1)}%`);\n        let responsePrimes;\n        if (coherence > 0.1) {\n            // High coherence: amplify resonance\n            responsePrimes = this.amplifyResonance(inputPrimes);\n        } else {\n            // Low coherence: create harmonic response\n            responsePrimes = this.createHarmonic(inputPrimes);\n        }\n        // Add chatbot personality factors\n        responsePrimes = this.addPersonalityFactors(responsePrimes);\n        return responsePrimes;\n    }\n    amplifyResonance(inputPrimes) {\n        const amplified = {};\n        // Amplify existing factors\n        Object.entries(inputPrimes).forEach(([primeStr, weight])=>{\n            const prime = parseInt(primeStr);\n            amplified[prime] = Math.floor(weight * 1.3);\n        });\n        // Add resonant harmonics\n        const primes = _prime_math__WEBPACK_IMPORTED_MODULE_3__.PrimeMath.generatePrimes(100);\n        amplified[primes[10]] = 8; // Understanding\n        amplified[primes[15]] = 6; // Response\n        return amplified;\n    }\n    createHarmonic(inputPrimes) {\n        const harmonic = {};\n        // Create harmonic response from top input factors\n        const topFactors = Object.entries(inputPrimes).sort(([, a], [, b])=>b - a).slice(0, 5);\n        topFactors.forEach(([primeStr, weight])=>{\n            const prime = parseInt(primeStr);\n            const harmonicPrime = prime + 2;\n            harmonic[harmonicPrime] = Math.floor(weight * 0.7);\n        });\n        // Add base response factors\n        const primes = _prime_math__WEBPACK_IMPORTED_MODULE_3__.PrimeMath.generatePrimes(50);\n        harmonic[primes[5]] = 10; // Help\n        harmonic[primes[8]] = 8; // Knowledge\n        return harmonic;\n    }\n    addPersonalityFactors(primes) {\n        const enhanced = {\n            ...primes\n        };\n        const personalityPrimes = _prime_math__WEBPACK_IMPORTED_MODULE_3__.PrimeMath.generatePrimes(30);\n        // Add chatbot personality traits\n        enhanced[personalityPrimes[12]] = 5; // Helpful\n        enhanced[personalityPrimes[18]] = 4; // Analytical\n        enhanced[personalityPrimes[22]] = 3; // Mathematical\n        return enhanced;\n    }\n    async generateResponseText(primes) {\n        console.log('🔍 Generating response text using Phase 3: Full 8-Layer Architecture...');\n        console.log('Knowledge base available:', !!this.knowledgeBase);\n        if (!this.knowledgeBase) {\n            console.log('⚠️ No knowledge base available');\n            throw new Error('No knowledge base available - bootstrap failed');\n        }\n        // Get the most recent user input for analysis\n        const lastUserInput = this.humanUser.conversationState.context[this.humanUser.conversationState.context.length - 1];\n        // 1. Analyze semantic context\n        const semanticContext = this.semanticLayer.analyzeSemanticContext(lastUserInput);\n        // 2. Get pragmatic context\n        const pragmaticResponseContext = this.pragmaticLayer.getContextForResponse();\n        // Convert to ConversationContext format for compatibility\n        const pragmaticContext = {\n            currentTopic: pragmaticResponseContext.currentTopic,\n            activeIntents: pragmaticResponseContext.activeIntents,\n            entityMemory: new Map(Object.entries(pragmaticResponseContext.relevantEntities)),\n            conversationGoals: pragmaticResponseContext.conversationGoals,\n            userPreferences: {},\n            conversationHistory: pragmaticResponseContext.recentHistory\n        };\n        // 3. Update pragmatic layer with current input\n        this.pragmaticLayer.processTurn('human', lastUserInput, semanticContext.intent, semanticContext.entities.reduce((acc, entity, index)=>{\n            acc[`entity_${index}`] = entity;\n            return acc;\n        }, {}), semanticContext);\n        // 4. Get updated pragmatic context after processing\n        const updatedPragmaticContext = this.pragmaticLayer.getContextForResponse();\n        // Convert to ConversationContext format for compatibility\n        const pragmaticContextForGeneration = {\n            currentTopic: updatedPragmaticContext.currentTopic,\n            activeIntents: updatedPragmaticContext.activeIntents,\n            entityMemory: new Map(Object.entries(updatedPragmaticContext.relevantEntities)),\n            conversationGoals: updatedPragmaticContext.conversationGoals,\n            userPreferences: {},\n            conversationHistory: updatedPragmaticContext.recentHistory\n        };\n        // 5. Analyze discourse context\n        const discourseContext = this.discourseLayer.analyzeDiscourseContext(lastUserInput, semanticContext, pragmaticContextForGeneration);\n        // 6. PHASE 3: Analyze emotional context\n        const emotionalContext = this.emotionalIntelligenceLayer.analyzeEmotionalContent(lastUserInput, {\n            conversationHistory: pragmaticContextForGeneration.conversationHistory,\n            currentTopic: pragmaticContextForGeneration.currentTopic\n        });\n        // 7. PHASE 3: Store episodic memory\n        const episodeId = this.episodicMemoryLayer.storeEpisode('conversation', {\n            summary: `User said: \"${lastUserInput}\"`,\n            details: {\n                intent: semanticContext.intent,\n                entities: semanticContext.entities,\n                emotionalState: emotionalContext.userEmotion\n            },\n            participants: [\n                'human',\n                'chatbot'\n            ],\n            context: discourseContext.conversationPhase || 'general'\n        }, {\n            valence: emotionalContext.userEmotion.valence,\n            arousal: emotionalContext.userEmotion.arousal,\n            dominance: emotionalContext.userEmotion.dominance,\n            emotions: [\n                emotionalContext.userEmotion.primary,\n                ...emotionalContext.userEmotion.secondary\n            ]\n        }, emotionalContext.empathyLevel);\n        // 8. PHASE 3: Generate emotional response strategy\n        const emotionalResponse = this.emotionalIntelligenceLayer.generateEmotionalResponse(emotionalContext, '' // Will be filled after generation\n        );\n        // 9. Generate response using Generative Layer with Phase 3 enhancements\n        const generationContext = {\n            responseType: discourseContext.expectedResponseType,\n            semanticContext: semanticContext,\n            discourseContext: discourseContext,\n            pragmaticContext: pragmaticContextForGeneration,\n            primeResonance: primes\n        };\n        let generatedResponse = this.generativeLayer.generateResponse(generationContext);\n        // 10. PHASE 3: Enhance response with emotional intelligence\n        if (generatedResponse) {\n            generatedResponse = this.enhanceResponseWithEmotionalIntelligence(generatedResponse, emotionalResponse, emotionalContext);\n        }\n        if (generatedResponse) {\n            console.log('🎨 Generated dynamic response:', generatedResponse);\n            return generatedResponse;\n        }\n        console.log('Vocabulary size:', this.knowledgeBase.vocabulary.size);\n        console.log('Vocabulary primes available:', this.knowledgeBase.vocabularyPrimes.size);\n        // Use prime resonance engine for direct prime-to-prime comparison\n        const resonanceEngine = new _prime_resonance__WEBPACK_IMPORTED_MODULE_2__.PrimeResonanceEngine();\n        // Find words with highest mathematical resonance to response primes\n        const resonantWords = resonanceEngine.findMostResonantWords(primes, this.knowledgeBase.vocabularyPrimes, 5 // Get more candidates for semantic enhancement\n        );\n        // Apply contextual weighting based on conversation history\n        const contextualWords = resonanceEngine.applyContextualWeighting(resonantWords, this.humanUser.conversationState.context, 1.5);\n        // Enhance resonance with semantic awareness\n        const semanticWords = this.semanticLayer.enhanceResonanceWithSemantics(contextualWords.map((w)=>({\n                word: w.word,\n                resonance: w.resonance\n            })), semanticContext);\n        console.log('Resonant words found:', semanticWords.map((w)=>`${w.word}: ${w.resonance.toFixed(1)}`));\n        if (semanticWords.length > 0) {\n            // Convert back to PrimeResonanceResult format for compatibility\n            const enhancedResonantWords = contextualWords.map((original)=>{\n                const enhanced = semanticWords.find((s)=>s.word === original.word);\n                return {\n                    ...original,\n                    resonance: enhanced ? enhanced.resonance : original.resonance\n                };\n            }).sort((a, b)=>b.resonance - a.resonance);\n            const response = this.generateSemanticResonanceResponse(enhancedResonantWords, semanticContext, primes);\n            console.log('Generated semantic-resonance response:', response);\n            return response;\n        }\n        // Fallback to basic conversational response\n        console.log('No resonant words found, using basic response');\n        return this.generateBasicResponse(primes);\n    }\n    primesToEmbeddings(primes) {\n        // Convert prime factorization back to embedding space\n        const embeddings = new Array(384).fill(0);\n        const primeList = _prime_math__WEBPACK_IMPORTED_MODULE_3__.PrimeMath.generatePrimes(384);\n        Object.entries(primes).forEach(([prime, weight])=>{\n            const primeNum = parseInt(prime);\n            const index = primeList.indexOf(primeNum);\n            if (index !== -1) {\n                embeddings[index] = weight / 1000; // Reverse the scaling\n            }\n        });\n        return embeddings;\n    }\n    findClosestConcept(embeddings) {\n        let closestConcept = null;\n        let highestSimilarity = -1;\n        for (const [concept, conceptEmbeddings] of this.embeddingsModel.concepts){\n            const similarity = this.calculateCosineSimilarity(embeddings, conceptEmbeddings);\n            if (similarity > highestSimilarity) {\n                highestSimilarity = similarity;\n                closestConcept = concept;\n            }\n        }\n        return highestSimilarity > 0.3 ? closestConcept : null;\n    }\n    calculateCosineSimilarity(a, b) {\n        const dotProduct = a.reduce((sum, val, i)=>sum + val * b[i], 0);\n        const magnitudeA = Math.sqrt(a.reduce((sum, val)=>sum + val * val, 0));\n        const magnitudeB = Math.sqrt(b.reduce((sum, val)=>sum + val * val, 0));\n        return magnitudeA && magnitudeB ? dotProduct / (magnitudeA * magnitudeB) : 0;\n    }\n    async generateTextFromConcept(concept, primes) {\n        // Use the concept to generate contextual response\n        const magnitude = _prime_math__WEBPACK_IMPORTED_MODULE_3__.PrimeMath.calculateMagnitude(primes);\n        const conceptVariations = this.getConceptVariations(concept);\n        // Select variation based on magnitude\n        const variationIndex = Math.floor(magnitude / 10) % conceptVariations.length;\n        return conceptVariations[variationIndex];\n    }\n    getConceptVariations(concept) {\n        // Generate variations based on learned concepts\n        const variations = {};\n        // Build variations from existing vocabulary\n        for (const [vocab] of this.embeddingsModel.vocabulary){\n            if (!variations[concept]) variations[concept] = [];\n            variations[concept].push(`I understand you're interested in ${vocab}. Let me help with that.`);\n        }\n        return variations[concept] || [\n            `I'm processing information related to ${concept}.`\n        ];\n    }\n    findMostSimilarConcepts(embeddings, count) {\n        const similarities = [];\n        for (const [concept, conceptEmbeddings] of this.embeddingsModel.concepts){\n            const similarity = this.calculateCosineSimilarity(embeddings, conceptEmbeddings);\n            similarities.push({\n                concept,\n                similarity\n            });\n        }\n        const sorted = similarities.sort((a, b)=>b.similarity - a.similarity);\n        console.log('Top similarities:', sorted.slice(0, 5).map((s)=>`${s.concept}: ${s.similarity.toFixed(3)}`));\n        // Lower threshold to 0.01 to find more matches\n        const filtered = sorted.slice(0, count).filter((item)=>item.similarity > 0.01);\n        console.log('Filtered similar concepts:', filtered.map((s)=>`${s.concept}: ${s.similarity.toFixed(3)}`));\n        return filtered.map((item)=>item.concept);\n    }\n    generateSemanticResonanceResponse(resonantWords, semanticContext, primes) {\n        console.log('🎭 Generating semantic-enhanced resonance response...');\n        console.log('Intent:', semanticContext.intent);\n        console.log('Semantic boosts:', semanticContext.semanticBoosts);\n        const primaryWord = resonantWords[0];\n        // Use semantic context to enhance response generation\n        switch(semanticContext.intent){\n            case 'GREETING':\n                if (primaryWord.word === 'hello' || semanticContext.semanticBoosts.includes('hello')) {\n                    return \"Hello! I'm PrimeBot. How can I help you today?\";\n                }\n                return \"Hello! Nice to meet you. I'm PrimeBot, powered by mathematical prime factorization.\";\n            case 'IDENTITY_INTRODUCTION':\n                if (semanticContext.entities.length > 0) {\n                    const name = semanticContext.entities[0];\n                    return `Nice to meet you, ${name}! I'm PrimeBot. How can I assist you today?`;\n                }\n                return \"Nice to meet you! I'm PrimeBot. What's your name?\";\n            case 'ENTITY_INTRODUCTION':\n                if (semanticContext.entities.length >= 2) {\n                    const entityType = semanticContext.entities[0];\n                    const entityName = semanticContext.entities[1];\n                    return `Nice to know that your ${entityType} is named ${entityName}! Tell me more about ${entityName}.`;\n                }\n                return \"That's interesting! Tell me more about that.\";\n            case 'IDENTITY_QUERY':\n                const context = this.humanUser.conversationState.context.join(' ').toLowerCase();\n                const nameMatch = context.match(/my name is (\\w+)/i);\n                if (nameMatch) {\n                    return `Based on our conversation, your name is ${nameMatch[1]}. Is that correct?`;\n                }\n                return \"I don't recall you mentioning your name. What is your name?\";\n            case 'HELP_REQUEST':\n                return \"I'm here to help! What would you like to know or discuss?\";\n            case 'GRATITUDE':\n                return \"You're welcome! I'm glad I could help.\";\n            case 'POSITIVE_FEEDBACK':\n                return \"That's wonderful! Is there anything else I can help you with?\";\n            case 'INFORMATION_REQUEST':\n            case 'QUESTION':\n                if (primaryWord && primaryWord.resonance > 1000) {\n                    return `I'm analyzing the concept of \"${primaryWord.word}\" to answer your question. What specifically would you like to know?`;\n                }\n                return \"That's a great question! I'm processing the mathematical patterns to provide you with an answer.\";\n            case 'KNOWLEDGE_REQUEST':\n                return \"I process information through mathematical analysis. What would you like me to understand?\";\n            default:\n                // Fall back to resonance-based response with semantic enhancement\n                if (primaryWord) {\n                    // Check if the primary word is semantically boosted\n                    if (semanticContext.semanticBoosts.includes(primaryWord.word)) {\n                        return `I notice you're particularly interested in \"${primaryWord.word}\". The mathematical resonance is strong here. Tell me more about what you'd like to explore!`;\n                    }\n                    // Use high resonance for confident responses\n                    if (primaryWord.resonance > 2000) {\n                        return `The concept of \"${primaryWord.word}\" resonates powerfully with my understanding. How can I help you explore this further?`;\n                    }\n                    return `I'm processing the mathematical patterns related to \"${primaryWord.word}\". What would you like to know about this?`;\n                }\n                return \"I'm analyzing the semantic and mathematical patterns in your message. Could you tell me more?\";\n        }\n    }\n    generateResonanceBasedResponse(resonantWords, primes) {\n        const primaryWord = resonantWords[0];\n        const magnitude = _prime_math__WEBPACK_IMPORTED_MODULE_3__.PrimeMath.calculateMagnitude(primes);\n        console.log('🎯 Generating response for primary resonant word:', primaryWord.word);\n        console.log('🔢 Resonance score:', primaryWord.resonance.toFixed(1));\n        console.log('🔗 Shared primes:', primaryWord.sharedPrimes);\n        console.log('🎵 Harmonic matches:', primaryWord.harmonicMatches);\n        // Check for greeting patterns\n        if (primaryWord.word === 'hello' || primaryWord.word === 'hi') {\n            return \"Hello! I'm PrimeBot. How can I help you today?\";\n        }\n        // Check for help/assistance patterns\n        if (primaryWord.word === 'help' || primaryWord.word === 'assist') {\n            return \"I'm here to help! What would you like to know or discuss?\";\n        }\n        // Check for gratitude patterns\n        if (primaryWord.word === 'thanks' || primaryWord.word === 'thank') {\n            return \"You're welcome! I'm glad I could help.\";\n        }\n        // Check for positive feedback\n        if (primaryWord.word === 'good' || primaryWord.word === 'great') {\n            return \"That's wonderful! Is there anything else I can help you with?\";\n        }\n        // Check for name/identity questions\n        if (primaryWord.word === 'name' || resonantWords.some((w)=>w.word === 'name')) {\n            // Check if user mentioned their name in context\n            const context = this.humanUser.conversationState.context.join(' ').toLowerCase();\n            if (context.includes('alex') || context.includes('my name is')) {\n                return \"Nice to meet you, Alex! I'm PrimeBot. How can I assist you today?\";\n            }\n            return \"I'm PrimeBot, an AI assistant powered by mathematical prime factorization. What's your name?\";\n        }\n        // Check for understanding/knowledge requests\n        if (primaryWord.word === 'understand' || primaryWord.word === 'know') {\n            return \"I process information through mathematical analysis. What would you like me to understand?\";\n        }\n        // Check for question patterns\n        if (primaryWord.word === 'what' || resonantWords.some((w)=>w.word === 'what')) {\n            const context = this.humanUser.conversationState.context.join(' ').toLowerCase();\n            if (context.includes('what is my name') || context.includes('my name')) {\n                return \"Based on our conversation, your name is Alex. Is that correct?\";\n            }\n            return \"That's a great question! I'm processing the mathematical patterns to provide you with an answer.\";\n        }\n        // Use mathematical resonance for contextual responses\n        if (primaryWord.sharedPrimes.length > 0) {\n            const sharedPrimeCount = primaryWord.sharedPrimes.length;\n            const harmonicCount = primaryWord.harmonicMatches.length;\n            if (sharedPrimeCount >= 3) {\n                return `I sense strong mathematical resonance with \"${primaryWord.word}\". Our prime factors align beautifully. What would you like to explore about this?`;\n            } else if (harmonicCount > 0) {\n                return `I detect harmonic relationships with \"${primaryWord.word}\". There's an interesting mathematical connection here. Tell me more!`;\n            }\n        }\n        // High resonance response\n        if (primaryWord.resonance > 100) {\n            return `The concept of \"${primaryWord.word}\" resonates strongly with my mathematical understanding. How can I help you with this?`;\n        }\n        // Multiple resonant words response\n        if (resonantWords.length > 1) {\n            const secondWord = resonantWords[1];\n            return `I'm processing the mathematical relationship between \"${primaryWord.word}\" and \"${secondWord.word}\". What specifically interests you about these concepts?`;\n        }\n        // Default resonance-based response\n        return `I'm analyzing the prime factorization patterns related to \"${primaryWord.word}\". Could you tell me more about what you'd like to know?`;\n    }\n    generateConceptBasedResponse(concepts, primes) {\n        const magnitude = _prime_math__WEBPACK_IMPORTED_MODULE_3__.PrimeMath.calculateMagnitude(primes);\n        const primaryConcept = concepts[0];\n        const relatedConcepts = this.embeddingsModel.relationships.get(primaryConcept) || [];\n        console.log('🎯 Generating response for primary concept:', primaryConcept);\n        console.log('🔗 Related concepts:', relatedConcepts);\n        // Check for greeting patterns\n        if (primaryConcept === 'hello' || primaryConcept === 'hi') {\n            return \"Hello! I'm PrimeBot. How can I help you today?\";\n        }\n        // Check for help/assistance patterns\n        if (primaryConcept === 'help' || primaryConcept === 'assist') {\n            return \"I'm here to help! What would you like to know or discuss?\";\n        }\n        // Check for gratitude patterns\n        if (primaryConcept === 'thanks' || primaryConcept === 'thank') {\n            return \"You're welcome! I'm glad I could help.\";\n        }\n        // Check for positive feedback\n        if (primaryConcept === 'good' || primaryConcept === 'great') {\n            return \"That's wonderful! Is there anything else I can help you with?\";\n        }\n        // Check for name/identity questions\n        if (primaryConcept === 'name' || concepts.includes('name')) {\n            // Check if user mentioned their name in context\n            const context = this.humanUser.conversationState.context.join(' ').toLowerCase();\n            if (context.includes('alex') || context.includes('my name is')) {\n                return \"Nice to meet you, Alex! I'm PrimeBot. How can I assist you today?\";\n            }\n            return \"I'm PrimeBot, an AI assistant powered by mathematical prime factorization. What's your name?\";\n        }\n        // Check for understanding/knowledge requests\n        if (primaryConcept === 'understand' || primaryConcept === 'know') {\n            return \"I process information through mathematical analysis. What would you like me to understand?\";\n        }\n        // Check for question patterns\n        if (primaryConcept === 'what' || concepts.includes('what')) {\n            const context = this.humanUser.conversationState.context.join(' ').toLowerCase();\n            if (context.includes('what is my name') || context.includes('my name')) {\n                return \"Based on our conversation, your name is Alex. Is that correct?\";\n            }\n            return \"That's a great question! I'm processing the mathematical patterns to provide you with an answer.\";\n        }\n        // Use semantic relationships for contextual responses\n        if (relatedConcepts.length > 0) {\n            const relatedConcept = relatedConcepts[Math.floor(magnitude) % relatedConcepts.length];\n            // Create more natural relationship responses\n            if (primaryConcept === 'count' && relatedConcepts.includes('number')) {\n                return \"I see you're working with numbers and counting. How can I help you with mathematical calculations?\";\n            }\n            if (primaryConcept === 'play' && relatedConcepts.includes('work')) {\n                return \"I understand the balance between work and play. What would you like to explore or discuss?\";\n            }\n            return `I notice you're interested in ${primaryConcept}. In my understanding, this connects to ${relatedConcept}. What specifically would you like to know?`;\n        }\n        // Enhanced default response with concept awareness\n        return `I'm processing the concept of \"${primaryConcept}\" through my mathematical framework. Could you tell me more about what you'd like to explore?`;\n    }\n    generateBasicResponse(primes) {\n        const magnitude = _prime_math__WEBPACK_IMPORTED_MODULE_3__.PrimeMath.calculateMagnitude(primes);\n        const primeCount = Object.keys(primes).length;\n        const dominantPrime = Object.entries(primes).sort(([, a], [, b])=>b - a)[0];\n        // Mathematical analysis-based responses\n        if (magnitude > 1000) {\n            return \"I detect strong mathematical patterns in your message. The prime factorization suggests complex semantic content. How can I help you explore this further?\";\n        } else if (magnitude > 500) {\n            return \"I'm analyzing the mathematical structure of your input. The prime resonance indicates meaningful content. What would you like to discuss?\";\n        } else if (primeCount > 5) {\n            return \"I notice rich mathematical diversity in the prime factors. This suggests multifaceted meaning. Tell me more about what interests you.\";\n        } else if (dominantPrime && parseInt(dominantPrime[0]) > 100) {\n            return `The dominant prime factor ${dominantPrime[0]} suggests sophisticated semantic content. I'm ready to engage with your ideas.`;\n        }\n        // Contextual responses based on conversation state\n        const conversationLength = this.humanUser.conversationState.turnCount;\n        if (conversationLength === 1) {\n            return \"Welcome! I'm PrimeLM, processing your input through mathematical prime factorization. What would you like to explore together?\";\n        } else if (conversationLength < 5) {\n            return \"I'm building our conversational context through mathematical analysis. What aspects would you like to delve deeper into?\";\n        }\n        // Adaptive responses based on mathematical properties\n        const responses = [\n            \"I'm processing the mathematical relationships in your message. Could you elaborate on what interests you most?\",\n            \"The prime factorization reveals interesting patterns. What specific aspects would you like to explore?\",\n            \"I'm analyzing the semantic-mathematical bridge in your input. How can I assist you further?\",\n            \"The mathematical coherence suggests meaningful content. What would you like to focus on?\",\n            \"I'm translating your input through prime mathematics. What direction shall we take our conversation?\"\n        ];\n        return responses[Math.floor(magnitude) % responses.length];\n    }\n    /**\n   * PHASE 3: Enhance response with emotional intelligence\n   */ enhanceResponseWithEmotionalIntelligence(response, emotionalResponse, emotionalContext) {\n        console.log('❤️ Enhancing response with emotional intelligence...');\n        console.log('Emotional strategy:', emotionalResponse.empathyStrategy);\n        console.log('Support level:', emotionalResponse.supportLevel);\n        console.log('Tonal adjustments:', emotionalResponse.tonalAdjustments);\n        let enhancedResponse = response;\n        // Apply tonal adjustments based on emotional context\n        const { warmth, formality, enthusiasm, patience } = emotionalResponse.tonalAdjustments;\n        // High warmth: Add empathetic phrases\n        if (warmth > 0.7) {\n            if (!enhancedResponse.includes('understand') && !enhancedResponse.includes('feel')) {\n                enhancedResponse = `I understand how you feel. ${enhancedResponse}`;\n            }\n        }\n        // Low formality: Make more casual\n        if (formality < 0.4) {\n            enhancedResponse = enhancedResponse.replace(/\\. /g, '! ');\n        }\n        // High enthusiasm: Add excitement\n        if (enthusiasm > 0.7) {\n            if (!enhancedResponse.includes('!')) {\n                enhancedResponse = enhancedResponse.replace(/\\.$/, '!');\n            }\n        }\n        // High patience: Add reassuring language\n        if (patience > 0.8) {\n            if (emotionalContext.supportNeeded === 'high') {\n                enhancedResponse += ' Take your time, and let me know if you need anything else.';\n            }\n        }\n        // Apply empathy strategy enhancements\n        switch(emotionalResponse.empathyStrategy){\n            case 'emotional_validation':\n                if (!enhancedResponse.includes('valid') && !enhancedResponse.includes('understand')) {\n                    enhancedResponse = `Your feelings are completely valid. ${enhancedResponse}`;\n                }\n                break;\n            case 'reassurance_and_safety':\n                if (emotionalContext.userEmotion.primary === 'fear' || emotionalContext.userEmotion.primary === 'anxiety') {\n                    enhancedResponse += ' You\\'re safe here to share whatever you\\'re feeling.';\n                }\n                break;\n            case 'gentle_encouragement':\n                if (!enhancedResponse.includes('great') && !enhancedResponse.includes('wonderful')) {\n                    enhancedResponse = `You\\'re doing great by sharing this. ${enhancedResponse}`;\n                }\n                break;\n        }\n        // Store enhanced response in episodic memory\n        this.episodicMemoryLayer.storeEpisode('conversation', {\n            summary: `Bot responded: \"${enhancedResponse}\"`,\n            details: {\n                originalResponse: response,\n                emotionalEnhancements: {\n                    strategy: emotionalResponse.empathyStrategy,\n                    tonalAdjustments: emotionalResponse.tonalAdjustments\n                }\n            },\n            participants: [\n                'chatbot',\n                'human'\n            ],\n            context: 'response_generation'\n        }, emotionalResponse.responseEmotion, 0.6 // Moderate importance for bot responses\n        );\n        console.log('❤️ Enhanced response:', enhancedResponse);\n        return enhancedResponse;\n    }\n    getDebugInfo() {\n        return {\n            humanUser: {\n                identity: this.humanUser.identity,\n                conversationState: {\n                    ...this.humanUser.conversationState,\n                    primeCount: Object.keys(this.humanUser.conversationState.primeFactors).length\n                }\n            },\n            chatbotUser: {\n                identity: this.chatbotUser.identity,\n                conversationState: {\n                    ...this.chatbotUser.conversationState,\n                    primeCount: Object.keys(this.chatbotUser.conversationState.primeFactors).length\n                }\n            },\n            coherence: _prime_math__WEBPACK_IMPORTED_MODULE_3__.PrimeMath.calculateCoherence(this.humanUser.conversationState.primeFactors, this.chatbotUser.conversationState.primeFactors),\n            episodicMemory: {\n                totalEpisodes: this.episodicMemoryLayer.getMemoryStats().totalEpisodes,\n                personalityTraits: this.episodicMemoryLayer.getPersonalityInsights().traits\n            }\n        };\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9zcmMvbGliL2NvcmUvcHJpbWVsbS1tb2RlbHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTBEO0FBQzBCO0FBQ0w7QUFDdEM7QUFDbUM7QUFDVTtBQUNyQjtBQUNBO0FBQ3FCO0FBR3RCO0FBQ2M7QUF5QzlFLGdGQUFnRjtBQUNoRiw0QkFBNEI7QUFDNUIsZ0ZBQWdGO0FBRXpFLE1BQU1XO0lBZ0JYQyxhQUFjO2FBZk5DLG9CQUFnQzthQUNoQ0MsZ0JBQWdCO2FBQ2hCQyxnQkFBc0M7UUFjNUMsd0JBQXdCO1FBQ3hCLElBQUksQ0FBQ0MsU0FBUyxHQUFHO1lBQ2ZDLFVBQVU7Z0JBQ1JDLElBQUk7Z0JBQ0pDLE1BQU07Z0JBQ05DLE1BQU07Z0JBQ05DLFlBQVksRUFBRTtnQkFDZEMsY0FBYyxDQUFDO2dCQUNmQyxhQUFhO29CQUNYQyxRQUFRO3dCQUFDO3dCQUFXO3FCQUFpQjtvQkFDckNDLG9CQUFvQjtvQkFDcEJDLFdBQVcsRUFBRTtnQkFDZjtZQUNGO1lBQ0FDLG1CQUFtQjtnQkFDakJOLFlBQVksRUFBRTtnQkFDZEMsY0FBYyxDQUFDO2dCQUNmTSxTQUFTLEVBQUU7Z0JBQ1hDLFdBQVc7WUFDYjtZQUNBQyxhQUFhO2dCQUNYQyxRQUFRLEVBQUU7Z0JBQ1ZDLGdCQUFnQjtZQUNsQjtRQUNGO1FBRUEsMEJBQTBCO1FBQzFCLElBQUksQ0FBQ0MsV0FBVyxHQUFHO1lBQ2pCaEIsVUFBVTtnQkFDUkMsSUFBSTtnQkFDSkMsTUFBTTtnQkFDTkMsTUFBTTtnQkFDTkMsWUFBWSxFQUFFO2dCQUNkQyxjQUFjLENBQUM7Z0JBQ2ZDLGFBQWE7b0JBQ1hDLFFBQVE7d0JBQUM7d0JBQVc7d0JBQWM7cUJBQWU7b0JBQ2pEQyxvQkFBb0I7b0JBQ3BCQyxXQUFXO3dCQUFDO3dCQUFlO3dCQUFnQjtxQkFBVztnQkFDeEQ7WUFDRjtZQUNBQyxtQkFBbUI7Z0JBQ2pCTixZQUFZLEVBQUU7Z0JBQ2RDLGNBQWMsQ0FBQztnQkFDZk0sU0FBUyxFQUFFO2dCQUNYQyxXQUFXO1lBQ2I7WUFDQUMsYUFBYTtnQkFDWEMsUUFBUTtvQkFBQztvQkFBZTtvQkFBaUI7aUJBQWU7Z0JBQ3hEQyxnQkFBZ0I7WUFDbEI7UUFDRjtRQUVBLDhCQUE4QjtRQUM5QixJQUFJLENBQUNFLGVBQWUsR0FBRztZQUNyQkMsWUFBWSxJQUFJQztZQUNoQkMsVUFBVSxJQUFJRDtZQUNkRSxlQUFlLElBQUlGO1FBQ3JCO1FBRUEsNEJBQTRCO1FBQzVCLElBQUksQ0FBQ0csYUFBYSxHQUFHLElBQUluQyxtRUFBYUE7UUFFdEMsNkJBQTZCO1FBQzdCLElBQUksQ0FBQ29DLGNBQWMsR0FBRyxJQUFJbkMseUVBQWNBO1FBRXhDLCtCQUErQjtRQUMvQixJQUFJLENBQUNvQyxnQkFBZ0IsR0FBRyxJQUFJbkMseUVBQWdCQTtRQUU1Qyw2QkFBNkI7UUFDN0IsSUFBSSxDQUFDb0MsY0FBYyxHQUFHLElBQUluQyx5RUFBY0EsQ0FBQyxJQUFJLENBQUNrQyxnQkFBZ0I7UUFFOUQsOEJBQThCO1FBQzlCLElBQUksQ0FBQ0UsZUFBZSxHQUFHLElBQUluQywyRUFBZUEsQ0FBQyxJQUFJLENBQUNpQyxnQkFBZ0I7UUFFaEUsNEJBQTRCO1FBQzVCLElBQUksQ0FBQ0csbUJBQW1CLEdBQUcsSUFBSW5DLHdFQUFtQkE7UUFDbEQsSUFBSSxDQUFDb0MsMEJBQTBCLEdBQUcsSUFBSW5DLHVGQUEwQkE7SUFFaEUsb0RBQW9EO0lBQ3REO0lBRUEsTUFBTW9DLGFBQTRCO1FBQ2hDLElBQUk7WUFDRkMsUUFBUUMsR0FBRyxDQUFDO1lBRVosMEJBQTBCO1lBQzFCLElBQUksQ0FBQ25DLGlCQUFpQixHQUFHLE1BQU1iLDhEQUFRQSxDQUNyQyxzQkFDQTtZQUdGLDhCQUE4QjtZQUM5QixNQUFNLElBQUksQ0FBQ2lELHlCQUF5QjtZQUVwQyxJQUFJLENBQUNuQyxhQUFhLEdBQUc7WUFDckJpQyxRQUFRQyxHQUFHLENBQUM7UUFFZCxFQUFFLE9BQU9FLE9BQU87WUFDZEgsUUFBUUcsS0FBSyxDQUFDLHdDQUF3Q0E7WUFDdEQsTUFBTUE7UUFDUjtJQUNGO0lBRUEsTUFBY0QsNEJBQTJDO1FBQ3ZELElBQUksQ0FBQyxJQUFJLENBQUNwQyxpQkFBaUIsRUFBRTtZQUMzQixNQUFNLElBQUlzQyxNQUFNO1FBQ2xCO1FBRUEsSUFBSTtZQUNGLE1BQU1DLHFCQUFxQixJQUFJbkQsNkVBQWtCQSxDQUFDLElBQUksQ0FBQ1ksaUJBQWlCO1lBQ3hFLElBQUksQ0FBQ0UsYUFBYSxHQUFHLE1BQU1xQyxtQkFBbUJDLHNCQUFzQjtZQUVwRSx3REFBd0Q7WUFDeEQsSUFBSSxDQUFDbkIsZUFBZSxDQUFDQyxVQUFVLEdBQUcsSUFBSSxDQUFDcEIsYUFBYSxDQUFDdUMsaUJBQWlCO1lBQ3RFLElBQUksQ0FBQ3BCLGVBQWUsQ0FBQ0csUUFBUSxHQUFHLElBQUksQ0FBQ3RCLGFBQWEsQ0FBQ3VDLGlCQUFpQjtZQUNwRSxJQUFJLENBQUNwQixlQUFlLENBQUNJLGFBQWEsR0FBRyxJQUFJLENBQUN2QixhQUFhLENBQUN3QyxnQkFBZ0I7WUFFeEUscURBQXFEO1lBQ3JELElBQUksQ0FBQ0MsdUJBQXVCO1FBRTlCLEVBQUUsT0FBT04sT0FBTztZQUNkSCxRQUFRRyxLQUFLLENBQUMsaUNBQWlDQTtZQUMvQyxNQUFNLElBQUlDLE1BQU0sQ0FBQyw0QkFBNEIsRUFBRUQsaUJBQWlCQyxRQUFRRCxNQUFNTyxPQUFPLEdBQUdDLE9BQU9SLFFBQVE7UUFDekc7SUFDRjtJQUVRTSwwQkFBZ0M7UUFDdEMsSUFBSSxDQUFDLElBQUksQ0FBQ3pDLGFBQWEsRUFBRTtRQUV6QiwrQ0FBK0M7UUFDL0MsTUFBTTRDLGlCQUF5QyxDQUFDO1FBQ2hELE1BQU1DLGdCQUE0QixFQUFFO1FBRXBDLEtBQUssTUFBTUMsbUJBQW1CLElBQUksQ0FBQzlDLGFBQWEsQ0FBQ29CLFVBQVUsQ0FBQzJCLE1BQU0sR0FBSTtZQUNwRSx3Q0FBd0M7WUFDeENDLE9BQU9DLE9BQU8sQ0FBQ0gsZ0JBQWdCdkMsWUFBWSxFQUFFMkMsT0FBTyxDQUFDLENBQUMsQ0FBQ0MsT0FBT0MsT0FBTztnQkFDbkUsTUFBTUMsV0FBV0MsU0FBU0g7Z0JBQzFCUCxjQUFjLENBQUNTLFNBQVMsR0FBRyxDQUFDVCxjQUFjLENBQUNTLFNBQVMsSUFBSSxLQUFLRDtZQUMvRDtZQUVBUCxjQUFjVSxJQUFJLENBQUNULGdCQUFnQlUsU0FBUztRQUM5QztRQUVBLG9EQUFvRDtRQUNwRCxJQUFJWCxjQUFjWSxNQUFNLEdBQUcsR0FBRztZQUM1QixNQUFNQyxvQkFBb0IsSUFBSSxDQUFDQywwQkFBMEIsQ0FBQ2Q7WUFDMUQsSUFBSSxDQUFDM0IsV0FBVyxDQUFDaEIsUUFBUSxDQUFDSSxVQUFVLEdBQUdvRDtZQUN2QyxJQUFJLENBQUN4QyxXQUFXLENBQUNoQixRQUFRLENBQUNLLFlBQVksR0FBR3FDO1FBQzNDO0lBQ0Y7SUFFUWUsMkJBQTJCckQsVUFBc0IsRUFBWTtRQUNuRSxJQUFJQSxXQUFXbUQsTUFBTSxLQUFLLEdBQUcsT0FBTyxJQUFJRyxNQUFNLEtBQUtDLElBQUksQ0FBQztRQUV4RCxNQUFNQyxXQUFXLElBQUlGLE1BQU10RCxVQUFVLENBQUMsRUFBRSxDQUFDbUQsTUFBTSxFQUFFSSxJQUFJLENBQUM7UUFFdER2RCxXQUFXNEMsT0FBTyxDQUFDTSxDQUFBQTtZQUNqQkEsVUFBVU4sT0FBTyxDQUFDLENBQUNhLE9BQU9DO2dCQUN4QkYsUUFBUSxDQUFDRSxNQUFNLElBQUlEO1lBQ3JCO1FBQ0Y7UUFFQSxPQUFPRCxTQUFTRyxHQUFHLENBQUNGLENBQUFBLFFBQVNBLFFBQVF6RCxXQUFXbUQsTUFBTTtJQUN4RDtJQUVBLE1BQU1TLG9CQUFvQkMsS0FBYSxFQUFtQjtRQUN4RCxJQUFJLENBQUMsSUFBSSxDQUFDcEUsYUFBYSxJQUFJLENBQUMsSUFBSSxDQUFDRCxpQkFBaUIsRUFBRTtZQUNsRCxNQUFNLElBQUlzQyxNQUFNO1FBQ2xCO1FBRUFKLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLHNCQUFzQixFQUFFa0MsTUFBTSxDQUFDLENBQUM7UUFFN0MsbUNBQW1DO1FBQ25DLE1BQU1DLGtCQUFrQixNQUFNLElBQUksQ0FBQ0Msa0JBQWtCLENBQUNGO1FBRXRELGdEQUFnRDtRQUNoRCxNQUFNRyxjQUFjbEYsa0RBQVNBLENBQUNtRixrQkFBa0IsQ0FBQ0g7UUFFakQsNkJBQTZCO1FBQzdCLElBQUksQ0FBQ0ksZUFBZSxDQUFDLElBQUksQ0FBQ3ZFLFNBQVMsRUFBRWtFLE9BQU9DLGlCQUFpQkU7UUFFN0Qsd0RBQXdEO1FBQ3hELE1BQU1HLGlCQUFpQixJQUFJLENBQUNDLHNCQUFzQixDQUFDSjtRQUVuRCxnRUFBZ0U7UUFDaEUsTUFBTUssZUFBZSxNQUFNLElBQUksQ0FBQ0Msb0JBQW9CLENBQUNIO1FBRXJELCtCQUErQjtRQUMvQixNQUFNSSxxQkFBcUIsTUFBTSxJQUFJLENBQUNSLGtCQUFrQixDQUFDTTtRQUN6RCxJQUFJLENBQUNILGVBQWUsQ0FBQyxJQUFJLENBQUN0RCxXQUFXLEVBQUV5RCxjQUFjRSxvQkFBb0JKO1FBRXpFekMsUUFBUUMsR0FBRyxDQUFDLENBQUMsdUJBQXVCLEVBQUUwQyxhQUFhLENBQUMsQ0FBQztRQUVyRCxPQUFPQTtJQUNUO0lBRUEsTUFBY04sbUJBQW1CUyxJQUFZLEVBQXFCO1FBQ2hFLElBQUksQ0FBQyxJQUFJLENBQUNoRixpQkFBaUIsRUFBRTtZQUMzQixNQUFNLElBQUlzQyxNQUFNO1FBQ2xCO1FBRUEsTUFBTTJDLFNBQVMsTUFBTSxJQUFJLENBQUNqRixpQkFBaUIsQ0FBQ2dGO1FBQzVDLE9BQU9sQixNQUFNb0IsSUFBSSxDQUFDRCxPQUFPRSxJQUFJO0lBQy9CO0lBRVFULGdCQUFnQlUsSUFBZSxFQUFFSixJQUFZLEVBQUV4RSxVQUFvQixFQUFFNkUsTUFBOEIsRUFBUTtRQUNqSEQsS0FBS3RFLGlCQUFpQixDQUFDTixVQUFVLEdBQUdBO1FBQ3BDNEUsS0FBS3RFLGlCQUFpQixDQUFDTCxZQUFZLEdBQUc0RTtRQUN0Q0QsS0FBS3RFLGlCQUFpQixDQUFDQyxPQUFPLENBQUMwQyxJQUFJLENBQUN1QjtRQUNwQ0ksS0FBS3RFLGlCQUFpQixDQUFDRSxTQUFTO1FBRWhDLDBCQUEwQjtRQUMxQixJQUFJb0UsS0FBS3RFLGlCQUFpQixDQUFDQyxPQUFPLENBQUM0QyxNQUFNLEdBQUcsSUFBSTtZQUM5Q3lCLEtBQUt0RSxpQkFBaUIsQ0FBQ0MsT0FBTyxHQUFHcUUsS0FBS3RFLGlCQUFpQixDQUFDQyxPQUFPLENBQUN1RSxLQUFLLENBQUMsQ0FBQztRQUN6RTtRQUVBLHVEQUF1RDtRQUN2RCxJQUFJRixLQUFLaEYsUUFBUSxDQUFDSSxVQUFVLENBQUNtRCxNQUFNLEtBQUssR0FBRztZQUN6Q3lCLEtBQUtoRixRQUFRLENBQUNJLFVBQVUsR0FBRzttQkFBSUE7YUFBVztZQUMxQzRFLEtBQUtoRixRQUFRLENBQUNLLFlBQVksR0FBRztnQkFBRSxHQUFHNEUsTUFBTTtZQUFDO1FBQzNDLE9BQU87WUFDTCwrQkFBK0I7WUFDL0JELEtBQUtoRixRQUFRLENBQUNJLFVBQVUsR0FBRzRFLEtBQUtoRixRQUFRLENBQUNJLFVBQVUsQ0FBQzJELEdBQUcsQ0FBQyxDQUFDb0IsS0FBS0MsTUFDNURELE1BQU0sTUFBTS9FLFVBQVUsQ0FBQ2dGLElBQUksR0FBRztZQUVoQ0osS0FBS2hGLFFBQVEsQ0FBQ0ssWUFBWSxHQUFHbkIsa0RBQVNBLENBQUNtRyxjQUFjLENBQ25ETCxLQUFLaEYsUUFBUSxDQUFDSyxZQUFZLEVBQzFCNEUsUUFDQTtRQUVKO1FBRUEsK0RBQStEO1FBQy9ELElBQUksQ0FBQ0sscUJBQXFCLENBQUNWLE1BQU14RTtJQUNuQztJQUVRa0Ysc0JBQXNCVixJQUFZLEVBQUV4RSxVQUFvQixFQUFRO1FBQ3RFLHVDQUF1QztRQUN2QyxNQUFNbUYsUUFBUVgsS0FBS1ksV0FBVyxHQUFHQyxLQUFLLENBQUMsT0FBT0MsTUFBTSxDQUFDQyxDQUFBQSxPQUFRQSxLQUFLcEMsTUFBTSxHQUFHO1FBRTNFZ0MsTUFBTXZDLE9BQU8sQ0FBQzJDLENBQUFBO1lBQ1oseUNBQXlDO1lBQ3pDLElBQUksQ0FBQzFFLGVBQWUsQ0FBQ0MsVUFBVSxDQUFDMEUsR0FBRyxDQUFDRCxNQUFNO21CQUFJdkY7YUFBVztZQUV6RCxxQ0FBcUM7WUFDckMsSUFBSXVGLEtBQUtwQyxNQUFNLEdBQUcsR0FBRztnQkFDbkIsSUFBSSxDQUFDdEMsZUFBZSxDQUFDRyxRQUFRLENBQUN3RSxHQUFHLENBQUNELE1BQU07dUJBQUl2RjtpQkFBVztZQUN6RDtRQUNGO1FBRUEsdUNBQXVDO1FBQ3ZDLElBQUltRixNQUFNaEMsTUFBTSxHQUFHLEdBQUc7WUFDcEJnQyxNQUFNdkMsT0FBTyxDQUFDLENBQUMyQyxNQUFNN0I7Z0JBQ25CLE1BQU0rQixlQUFlTixNQUFNRyxNQUFNLENBQUMsQ0FBQ0ksR0FBR0MsSUFBTUEsTUFBTWpDO2dCQUNsRCxJQUFJLENBQUM3QyxlQUFlLENBQUNJLGFBQWEsQ0FBQ3VFLEdBQUcsQ0FBQ0QsTUFBTUU7WUFDL0M7UUFDRjtJQUNGO0lBRVFyQix1QkFBdUJKLFdBQW1DLEVBQTBCO1FBQzFGLG1EQUFtRDtRQUNuRCxNQUFNNEIsWUFBWTlHLGtEQUFTQSxDQUFDK0csa0JBQWtCLENBQzVDN0IsYUFDQSxJQUFJLENBQUNwRCxXQUFXLENBQUNOLGlCQUFpQixDQUFDTCxZQUFZO1FBR2pEeUIsUUFBUUMsR0FBRyxDQUFDLENBQUMsb0JBQW9CLEVBQUUsQ0FBQ2lFLFlBQVksR0FBRSxFQUFHRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbEUsSUFBSTNCO1FBRUosSUFBSXlCLFlBQVksS0FBSztZQUNuQixvQ0FBb0M7WUFDcEN6QixpQkFBaUIsSUFBSSxDQUFDNEIsZ0JBQWdCLENBQUMvQjtRQUN6QyxPQUFPO1lBQ0wsMENBQTBDO1lBQzFDRyxpQkFBaUIsSUFBSSxDQUFDNkIsY0FBYyxDQUFDaEM7UUFDdkM7UUFFQSxrQ0FBa0M7UUFDbENHLGlCQUFpQixJQUFJLENBQUM4QixxQkFBcUIsQ0FBQzlCO1FBRTVDLE9BQU9BO0lBQ1Q7SUFFUTRCLGlCQUFpQi9CLFdBQW1DLEVBQTBCO1FBQ3BGLE1BQU1rQyxZQUFvQyxDQUFDO1FBRTNDLDJCQUEyQjtRQUMzQnhELE9BQU9DLE9BQU8sQ0FBQ3FCLGFBQWFwQixPQUFPLENBQUMsQ0FBQyxDQUFDdUQsVUFBVXJELE9BQU87WUFDckQsTUFBTUQsUUFBUUcsU0FBU21EO1lBQ3ZCRCxTQUFTLENBQUNyRCxNQUFNLEdBQUd1RCxLQUFLQyxLQUFLLENBQUN2RCxTQUFTO1FBQ3pDO1FBRUEseUJBQXlCO1FBQ3pCLE1BQU0rQixTQUFTL0Ysa0RBQVNBLENBQUN3SCxjQUFjLENBQUM7UUFDeENKLFNBQVMsQ0FBQ3JCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLGdCQUFnQjtRQUMzQ3FCLFNBQVMsQ0FBQ3JCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLFdBQVc7UUFFdEMsT0FBT3FCO0lBQ1Q7SUFFUUYsZUFBZWhDLFdBQW1DLEVBQTBCO1FBQ2xGLE1BQU11QyxXQUFtQyxDQUFDO1FBRTFDLGtEQUFrRDtRQUNsRCxNQUFNQyxhQUFhOUQsT0FBT0MsT0FBTyxDQUFDcUIsYUFDL0J5QyxJQUFJLENBQUMsQ0FBQyxHQUFFQyxFQUFFLEVBQUUsR0FBRUMsRUFBRSxHQUFLQSxJQUFJRCxHQUN6QjVCLEtBQUssQ0FBQyxHQUFHO1FBRVowQixXQUFXNUQsT0FBTyxDQUFDLENBQUMsQ0FBQ3VELFVBQVVyRCxPQUFPO1lBQ3BDLE1BQU1ELFFBQVFHLFNBQVNtRDtZQUN2QixNQUFNUyxnQkFBZ0IvRCxRQUFRO1lBQzlCMEQsUUFBUSxDQUFDSyxjQUFjLEdBQUdSLEtBQUtDLEtBQUssQ0FBQ3ZELFNBQVM7UUFDaEQ7UUFFQSw0QkFBNEI7UUFDNUIsTUFBTStCLFNBQVMvRixrREFBU0EsQ0FBQ3dILGNBQWMsQ0FBQztRQUN4Q0MsUUFBUSxDQUFDMUIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTztRQUNqQzBCLFFBQVEsQ0FBQzFCLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFJLFlBQVk7UUFFdEMsT0FBTzBCO0lBQ1Q7SUFFUU4sc0JBQXNCcEIsTUFBOEIsRUFBMEI7UUFDcEYsTUFBTWdDLFdBQVc7WUFBRSxHQUFHaEMsTUFBTTtRQUFDO1FBQzdCLE1BQU1pQyxvQkFBb0JoSSxrREFBU0EsQ0FBQ3dILGNBQWMsQ0FBQztRQUVuRCxpQ0FBaUM7UUFDakNPLFFBQVEsQ0FBQ0MsaUJBQWlCLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxVQUFVO1FBQy9DRCxRQUFRLENBQUNDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsYUFBYTtRQUNsREQsUUFBUSxDQUFDQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLGVBQWU7UUFFcEQsT0FBT0Q7SUFDVDtJQUVBLE1BQWN2QyxxQkFBcUJPLE1BQThCLEVBQW1CO1FBQ2xGbkQsUUFBUUMsR0FBRyxDQUFDO1FBQ1pELFFBQVFDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLElBQUksQ0FBQ2pDLGFBQWE7UUFFN0QsSUFBSSxDQUFDLElBQUksQ0FBQ0EsYUFBYSxFQUFFO1lBQ3ZCZ0MsUUFBUUMsR0FBRyxDQUFDO1lBQ1osTUFBTSxJQUFJRyxNQUFNO1FBQ2xCO1FBRUEsOENBQThDO1FBQzlDLE1BQU1pRixnQkFBZ0IsSUFBSSxDQUFDcEgsU0FBUyxDQUFDVyxpQkFBaUIsQ0FBQ0MsT0FBTyxDQUFDLElBQUksQ0FBQ1osU0FBUyxDQUFDVyxpQkFBaUIsQ0FBQ0MsT0FBTyxDQUFDNEMsTUFBTSxHQUFHLEVBQUU7UUFFbkgsOEJBQThCO1FBQzlCLE1BQU02RCxrQkFBa0IsSUFBSSxDQUFDOUYsYUFBYSxDQUFDK0Ysc0JBQXNCLENBQUNGO1FBRWxFLDJCQUEyQjtRQUMzQixNQUFNRywyQkFBMkIsSUFBSSxDQUFDL0YsY0FBYyxDQUFDZ0cscUJBQXFCO1FBRTFFLDBEQUEwRDtRQUMxRCxNQUFNQyxtQkFBd0M7WUFDNUNDLGNBQWNILHlCQUF5QkcsWUFBWTtZQUNuREMsZUFBZUoseUJBQXlCSSxhQUFhO1lBQ3JEQyxjQUFjLElBQUl4RyxJQUFJMkIsT0FBT0MsT0FBTyxDQUFDdUUseUJBQXlCTSxnQkFBZ0I7WUFDOUVDLG1CQUFtQlAseUJBQXlCTyxpQkFBaUI7WUFDN0RDLGlCQUFpQixDQUFDO1lBQ2xCQyxxQkFBcUJULHlCQUF5QlUsYUFBYTtRQUM3RDtRQUVBLCtDQUErQztRQUMvQyxJQUFJLENBQUN6RyxjQUFjLENBQUMwRyxXQUFXLENBQzdCLFNBQ0FkLGVBQ0FDLGdCQUFnQmMsTUFBTSxFQUN0QmQsZ0JBQWdCZSxRQUFRLENBQUNDLE1BQU0sQ0FBQyxDQUFDQyxLQUFLQyxRQUFReEU7WUFDNUN1RSxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUV2RSxPQUFPLENBQUMsR0FBR3dFO1lBQ3pCLE9BQU9EO1FBQ1QsR0FBRyxDQUFDLElBQ0pqQjtRQUdGLG9EQUFvRDtRQUNwRCxNQUFNbUIsMEJBQTBCLElBQUksQ0FBQ2hILGNBQWMsQ0FBQ2dHLHFCQUFxQjtRQUV6RSwwREFBMEQ7UUFDMUQsTUFBTWlCLGdDQUFxRDtZQUN6RGYsY0FBY2Msd0JBQXdCZCxZQUFZO1lBQ2xEQyxlQUFlYSx3QkFBd0JiLGFBQWE7WUFDcERDLGNBQWMsSUFBSXhHLElBQUkyQixPQUFPQyxPQUFPLENBQUN3Rix3QkFBd0JYLGdCQUFnQjtZQUM3RUMsbUJBQW1CVSx3QkFBd0JWLGlCQUFpQjtZQUM1REMsaUJBQWlCLENBQUM7WUFDbEJDLHFCQUFxQlEsd0JBQXdCUCxhQUFhO1FBQzVEO1FBRUEsK0JBQStCO1FBQy9CLE1BQU1TLG1CQUFtQixJQUFJLENBQUNoSCxjQUFjLENBQUNpSCx1QkFBdUIsQ0FDbEV2QixlQUNBQyxpQkFDQW9CO1FBR0Ysd0NBQXdDO1FBQ3hDLE1BQU1HLG1CQUFtQixJQUFJLENBQUMvRywwQkFBMEIsQ0FBQ2dILHVCQUF1QixDQUM5RXpCLGVBQ0E7WUFDRVkscUJBQXFCUyw4QkFBOEJULG1CQUFtQjtZQUN0RU4sY0FBY2UsOEJBQThCZixZQUFZO1FBQzFEO1FBR0Ysb0NBQW9DO1FBQ3BDLE1BQU1vQixZQUFZLElBQUksQ0FBQ2xILG1CQUFtQixDQUFDbUgsWUFBWSxDQUNyRCxnQkFDQTtZQUNFQyxTQUFTLENBQUMsWUFBWSxFQUFFNUIsY0FBYyxDQUFDLENBQUM7WUFDeEM2QixTQUFTO2dCQUNQZCxRQUFRZCxnQkFBZ0JjLE1BQU07Z0JBQzlCQyxVQUFVZixnQkFBZ0JlLFFBQVE7Z0JBQ2xDYyxnQkFBZ0JOLGlCQUFpQk8sV0FBVztZQUM5QztZQUNBQyxjQUFjO2dCQUFDO2dCQUFTO2FBQVU7WUFDbEN4SSxTQUFTOEgsaUJBQWlCVyxpQkFBaUIsSUFBSTtRQUNqRCxHQUNBO1lBQ0VDLFNBQVNWLGlCQUFpQk8sV0FBVyxDQUFDRyxPQUFPO1lBQzdDQyxTQUFTWCxpQkFBaUJPLFdBQVcsQ0FBQ0ksT0FBTztZQUM3Q0MsV0FBV1osaUJBQWlCTyxXQUFXLENBQUNLLFNBQVM7WUFDakRDLFVBQVU7Z0JBQUNiLGlCQUFpQk8sV0FBVyxDQUFDTyxPQUFPO21CQUFLZCxpQkFBaUJPLFdBQVcsQ0FBQ1EsU0FBUzthQUFDO1FBQzdGLEdBQ0FmLGlCQUFpQmdCLFlBQVk7UUFHL0IsbURBQW1EO1FBQ25ELE1BQU1DLG9CQUFvQixJQUFJLENBQUNoSSwwQkFBMEIsQ0FBQ2lJLHlCQUF5QixDQUNqRmxCLGtCQUNBLEdBQUcsa0NBQWtDOztRQUd2Qyx3RUFBd0U7UUFDeEUsTUFBTW1CLG9CQUF1QztZQUMzQ0MsY0FBY3RCLGlCQUFpQnVCLG9CQUFvQjtZQUNuRDVDLGlCQUFpQkE7WUFDakJxQixrQkFBa0JBO1lBQ2xCakIsa0JBQWtCZ0I7WUFDbEJ5QixnQkFBZ0JoRjtRQUNsQjtRQUVBLElBQUlpRixvQkFBb0IsSUFBSSxDQUFDeEksZUFBZSxDQUFDeUksZ0JBQWdCLENBQUNMO1FBRTlELDREQUE0RDtRQUM1RCxJQUFJSSxtQkFBbUI7WUFDckJBLG9CQUFvQixJQUFJLENBQUNFLHdDQUF3QyxDQUMvREYsbUJBQ0FOLG1CQUNBakI7UUFFSjtRQUVBLElBQUl1QixtQkFBbUI7WUFDckJwSSxRQUFRQyxHQUFHLENBQUMsa0NBQWtDbUk7WUFDOUMsT0FBT0E7UUFDVDtRQUVBcEksUUFBUUMsR0FBRyxDQUFDLG9CQUFvQixJQUFJLENBQUNqQyxhQUFhLENBQUNvQixVQUFVLENBQUNtSixJQUFJO1FBQ2xFdkksUUFBUUMsR0FBRyxDQUFDLGdDQUFnQyxJQUFJLENBQUNqQyxhQUFhLENBQUN3SyxnQkFBZ0IsQ0FBQ0QsSUFBSTtRQUVwRixrRUFBa0U7UUFDbEUsTUFBTUUsa0JBQWtCLElBQUl0TCxrRUFBb0JBO1FBRWhELG9FQUFvRTtRQUNwRSxNQUFNdUwsZ0JBQWdCRCxnQkFBZ0JFLHFCQUFxQixDQUN6RHhGLFFBQ0EsSUFBSSxDQUFDbkYsYUFBYSxDQUFDd0ssZ0JBQWdCLEVBQ25DLEVBQUUsK0NBQStDOztRQUduRCwyREFBMkQ7UUFDM0QsTUFBTUksa0JBQWtCSCxnQkFBZ0JJLHdCQUF3QixDQUM5REgsZUFDQSxJQUFJLENBQUN6SyxTQUFTLENBQUNXLGlCQUFpQixDQUFDQyxPQUFPLEVBQ3hDO1FBR0YsNENBQTRDO1FBQzVDLE1BQU1pSyxnQkFBZ0IsSUFBSSxDQUFDdEosYUFBYSxDQUFDdUosNkJBQTZCLENBQ3BFSCxnQkFBZ0IzRyxHQUFHLENBQUMrRyxDQUFBQSxJQUFNO2dCQUFFbkYsTUFBTW1GLEVBQUVuRixJQUFJO2dCQUFFb0YsV0FBV0QsRUFBRUMsU0FBUztZQUFDLEtBQ2pFM0Q7UUFHRnRGLFFBQVFDLEdBQUcsQ0FBQyx5QkFBeUI2SSxjQUFjN0csR0FBRyxDQUFDK0csQ0FBQUEsSUFDckQsR0FBR0EsRUFBRW5GLElBQUksQ0FBQyxFQUFFLEVBQUVtRixFQUFFQyxTQUFTLENBQUM3RSxPQUFPLENBQUMsSUFBSTtRQUd4QyxJQUFJMEUsY0FBY3JILE1BQU0sR0FBRyxHQUFHO1lBQzVCLGdFQUFnRTtZQUNoRSxNQUFNeUgsd0JBQXdCTixnQkFBZ0IzRyxHQUFHLENBQUNrSCxDQUFBQTtnQkFDaEQsTUFBTWhFLFdBQVcyRCxjQUFjTSxJQUFJLENBQUNDLENBQUFBLElBQUtBLEVBQUV4RixJQUFJLEtBQUtzRixTQUFTdEYsSUFBSTtnQkFDakUsT0FBTztvQkFDTCxHQUFHc0YsUUFBUTtvQkFDWEYsV0FBVzlELFdBQVdBLFNBQVM4RCxTQUFTLEdBQUdFLFNBQVNGLFNBQVM7Z0JBQy9EO1lBQ0YsR0FBR2xFLElBQUksQ0FBQyxDQUFDQyxHQUFHQyxJQUFNQSxFQUFFZ0UsU0FBUyxHQUFHakUsRUFBRWlFLFNBQVM7WUFFM0MsTUFBTUssV0FBVyxJQUFJLENBQUNDLGlDQUFpQyxDQUNyREwsdUJBQ0E1RCxpQkFDQW5DO1lBRUZuRCxRQUFRQyxHQUFHLENBQUMsMENBQTBDcUo7WUFDdEQsT0FBT0E7UUFDVDtRQUVBLDRDQUE0QztRQUM1Q3RKLFFBQVFDLEdBQUcsQ0FBQztRQUNaLE9BQU8sSUFBSSxDQUFDdUoscUJBQXFCLENBQUNyRztJQUNwQztJQUVRc0csbUJBQW1CdEcsTUFBOEIsRUFBWTtRQUNuRSxzREFBc0Q7UUFDdEQsTUFBTTdFLGFBQWEsSUFBSXNELE1BQU0sS0FBS0MsSUFBSSxDQUFDO1FBQ3ZDLE1BQU02SCxZQUFZdE0sa0RBQVNBLENBQUN3SCxjQUFjLENBQUM7UUFFM0M1RCxPQUFPQyxPQUFPLENBQUNrQyxRQUFRakMsT0FBTyxDQUFDLENBQUMsQ0FBQ0MsT0FBT0MsT0FBTztZQUM3QyxNQUFNQyxXQUFXQyxTQUFTSDtZQUMxQixNQUFNYSxRQUFRMEgsVUFBVUMsT0FBTyxDQUFDdEk7WUFDaEMsSUFBSVcsVUFBVSxDQUFDLEdBQUc7Z0JBQ2hCMUQsVUFBVSxDQUFDMEQsTUFBTSxHQUFHWixTQUFTLE1BQU0sc0JBQXNCO1lBQzNEO1FBQ0Y7UUFFQSxPQUFPOUM7SUFDVDtJQUVRc0wsbUJBQW1CdEwsVUFBb0IsRUFBaUI7UUFDOUQsSUFBSXVMLGlCQUFnQztRQUNwQyxJQUFJQyxvQkFBb0IsQ0FBQztRQUV6QixLQUFLLE1BQU0sQ0FBQ0MsU0FBU3hKLGtCQUFrQixJQUFJLElBQUksQ0FBQ3BCLGVBQWUsQ0FBQ0csUUFBUSxDQUFFO1lBQ3hFLE1BQU0wSyxhQUFhLElBQUksQ0FBQ0MseUJBQXlCLENBQUMzTCxZQUFZaUM7WUFDOUQsSUFBSXlKLGFBQWFGLG1CQUFtQjtnQkFDbENBLG9CQUFvQkU7Z0JBQ3BCSCxpQkFBaUJFO1lBQ25CO1FBQ0Y7UUFFQSxPQUFPRCxvQkFBb0IsTUFBTUQsaUJBQWlCO0lBQ3BEO0lBRVFJLDBCQUEwQmpGLENBQVcsRUFBRUMsQ0FBVyxFQUFVO1FBQ2xFLE1BQU1pRixhQUFhbEYsRUFBRXNCLE1BQU0sQ0FBQyxDQUFDNkQsS0FBSzlHLEtBQUtZLElBQU1rRyxNQUFNOUcsTUFBTTRCLENBQUMsQ0FBQ2hCLEVBQUUsRUFBRTtRQUMvRCxNQUFNbUcsYUFBYTFGLEtBQUsyRixJQUFJLENBQUNyRixFQUFFc0IsTUFBTSxDQUFDLENBQUM2RCxLQUFLOUcsTUFBUThHLE1BQU05RyxNQUFNQSxLQUFLO1FBQ3JFLE1BQU1pSCxhQUFhNUYsS0FBSzJGLElBQUksQ0FBQ3BGLEVBQUVxQixNQUFNLENBQUMsQ0FBQzZELEtBQUs5RyxNQUFROEcsTUFBTTlHLE1BQU1BLEtBQUs7UUFFckUsT0FBTytHLGNBQWNFLGFBQWFKLGFBQWNFLENBQUFBLGFBQWFFLFVBQVMsSUFBSztJQUM3RTtJQUVBLE1BQWNDLHdCQUF3QlIsT0FBZSxFQUFFNUcsTUFBOEIsRUFBbUI7UUFDdEcsa0RBQWtEO1FBQ2xELE1BQU1xSCxZQUFZcE4sa0RBQVNBLENBQUNxTixrQkFBa0IsQ0FBQ3RIO1FBQy9DLE1BQU11SCxvQkFBb0IsSUFBSSxDQUFDQyxvQkFBb0IsQ0FBQ1o7UUFFcEQsc0NBQXNDO1FBQ3RDLE1BQU1hLGlCQUFpQmxHLEtBQUtDLEtBQUssQ0FBQzZGLFlBQVksTUFBTUUsa0JBQWtCakosTUFBTTtRQUM1RSxPQUFPaUosaUJBQWlCLENBQUNFLGVBQWU7SUFDMUM7SUFFUUQscUJBQXFCWixPQUFlLEVBQVk7UUFDdEQsZ0RBQWdEO1FBQ2hELE1BQU1jLGFBQXVDLENBQUM7UUFFOUMsNENBQTRDO1FBQzVDLEtBQUssTUFBTSxDQUFDQyxNQUFNLElBQUksSUFBSSxDQUFDM0wsZUFBZSxDQUFDQyxVQUFVLENBQUU7WUFDckQsSUFBSSxDQUFDeUwsVUFBVSxDQUFDZCxRQUFRLEVBQUVjLFVBQVUsQ0FBQ2QsUUFBUSxHQUFHLEVBQUU7WUFDbERjLFVBQVUsQ0FBQ2QsUUFBUSxDQUFDeEksSUFBSSxDQUFDLENBQUMsa0NBQWtDLEVBQUV1SixNQUFNLHdCQUF3QixDQUFDO1FBQy9GO1FBRUEsT0FBT0QsVUFBVSxDQUFDZCxRQUFRLElBQUk7WUFBQyxDQUFDLHNDQUFzQyxFQUFFQSxRQUFRLENBQUMsQ0FBQztTQUFDO0lBQ3JGO0lBRVFnQix3QkFBd0J6TSxVQUFvQixFQUFFME0sS0FBYSxFQUFZO1FBQzdFLE1BQU1DLGVBQTZELEVBQUU7UUFFckUsS0FBSyxNQUFNLENBQUNsQixTQUFTeEosa0JBQWtCLElBQUksSUFBSSxDQUFDcEIsZUFBZSxDQUFDRyxRQUFRLENBQUU7WUFDeEUsTUFBTTBLLGFBQWEsSUFBSSxDQUFDQyx5QkFBeUIsQ0FBQzNMLFlBQVlpQztZQUM5RDBLLGFBQWExSixJQUFJLENBQUM7Z0JBQUN3STtnQkFBU0M7WUFBVTtRQUN4QztRQUVBLE1BQU1rQixTQUFTRCxhQUFhbEcsSUFBSSxDQUFDLENBQUNDLEdBQUdDLElBQU1BLEVBQUUrRSxVQUFVLEdBQUdoRixFQUFFZ0YsVUFBVTtRQUN0RWhLLFFBQVFDLEdBQUcsQ0FBQyxxQkFBcUJpTCxPQUFPOUgsS0FBSyxDQUFDLEdBQUcsR0FBR25CLEdBQUcsQ0FBQ29ILENBQUFBLElBQUssR0FBR0EsRUFBRVUsT0FBTyxDQUFDLEVBQUUsRUFBRVYsRUFBRVcsVUFBVSxDQUFDNUYsT0FBTyxDQUFDLElBQUk7UUFFdkcsK0NBQStDO1FBQy9DLE1BQU0rRyxXQUFXRCxPQUNkOUgsS0FBSyxDQUFDLEdBQUc0SCxPQUNUcEgsTUFBTSxDQUFDd0gsQ0FBQUEsT0FBUUEsS0FBS3BCLFVBQVUsR0FBRztRQUVwQ2hLLFFBQVFDLEdBQUcsQ0FBQyw4QkFBOEJrTCxTQUFTbEosR0FBRyxDQUFDb0gsQ0FBQUEsSUFBSyxHQUFHQSxFQUFFVSxPQUFPLENBQUMsRUFBRSxFQUFFVixFQUFFVyxVQUFVLENBQUM1RixPQUFPLENBQUMsSUFBSTtRQUV0RyxPQUFPK0csU0FBU2xKLEdBQUcsQ0FBQ21KLENBQUFBLE9BQVFBLEtBQUtyQixPQUFPO0lBQzFDO0lBRVFSLGtDQUNOYixhQUFxQyxFQUNyQ3BELGVBQWdDLEVBQ2hDbkMsTUFBOEIsRUFDdEI7UUFDUm5ELFFBQVFDLEdBQUcsQ0FBQztRQUNaRCxRQUFRQyxHQUFHLENBQUMsV0FBV3FGLGdCQUFnQmMsTUFBTTtRQUM3Q3BHLFFBQVFDLEdBQUcsQ0FBQyxvQkFBb0JxRixnQkFBZ0IrRixjQUFjO1FBRTlELE1BQU1DLGNBQWM1QyxhQUFhLENBQUMsRUFBRTtRQUVwQyxzREFBc0Q7UUFDdEQsT0FBUXBELGdCQUFnQmMsTUFBTTtZQUM1QixLQUFLO2dCQUNILElBQUlrRixZQUFZekgsSUFBSSxLQUFLLFdBQVd5QixnQkFBZ0IrRixjQUFjLENBQUNFLFFBQVEsQ0FBQyxVQUFVO29CQUNwRixPQUFPO2dCQUNUO2dCQUNBLE9BQU87WUFFVCxLQUFLO2dCQUNILElBQUlqRyxnQkFBZ0JlLFFBQVEsQ0FBQzVFLE1BQU0sR0FBRyxHQUFHO29CQUN2QyxNQUFNckQsT0FBT2tILGdCQUFnQmUsUUFBUSxDQUFDLEVBQUU7b0JBQ3hDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRWpJLEtBQUssMkNBQTJDLENBQUM7Z0JBQy9FO2dCQUNBLE9BQU87WUFFVCxLQUFLO2dCQUNILElBQUlrSCxnQkFBZ0JlLFFBQVEsQ0FBQzVFLE1BQU0sSUFBSSxHQUFHO29CQUN4QyxNQUFNK0osYUFBYWxHLGdCQUFnQmUsUUFBUSxDQUFDLEVBQUU7b0JBQzlDLE1BQU1vRixhQUFhbkcsZ0JBQWdCZSxRQUFRLENBQUMsRUFBRTtvQkFDOUMsT0FBTyxDQUFDLHVCQUF1QixFQUFFbUYsV0FBVyxVQUFVLEVBQUVDLFdBQVcscUJBQXFCLEVBQUVBLFdBQVcsQ0FBQyxDQUFDO2dCQUN6RztnQkFDQSxPQUFPO1lBRVQsS0FBSztnQkFDSCxNQUFNNU0sVUFBVSxJQUFJLENBQUNaLFNBQVMsQ0FBQ1csaUJBQWlCLENBQUNDLE9BQU8sQ0FBQzZNLElBQUksQ0FBQyxLQUFLaEksV0FBVztnQkFDOUUsTUFBTWlJLFlBQVk5TSxRQUFRK00sS0FBSyxDQUFDO2dCQUNoQyxJQUFJRCxXQUFXO29CQUNiLE9BQU8sQ0FBQyx3Q0FBd0MsRUFBRUEsU0FBUyxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztnQkFDcEY7Z0JBQ0EsT0FBTztZQUVULEtBQUs7Z0JBQ0gsT0FBTztZQUVULEtBQUs7Z0JBQ0gsT0FBTztZQUVULEtBQUs7Z0JBQ0gsT0FBTztZQUVULEtBQUs7WUFDTCxLQUFLO2dCQUNILElBQUlMLGVBQWVBLFlBQVlyQyxTQUFTLEdBQUcsTUFBTTtvQkFDL0MsT0FBTyxDQUFDLDhCQUE4QixFQUFFcUMsWUFBWXpILElBQUksQ0FBQyxvRUFBb0UsQ0FBQztnQkFDaEk7Z0JBQ0EsT0FBTztZQUVULEtBQUs7Z0JBQ0gsT0FBTztZQUVUO2dCQUNFLGtFQUFrRTtnQkFDbEUsSUFBSXlILGFBQWE7b0JBQ2Ysb0RBQW9EO29CQUNwRCxJQUFJaEcsZ0JBQWdCK0YsY0FBYyxDQUFDRSxRQUFRLENBQUNELFlBQVl6SCxJQUFJLEdBQUc7d0JBQzdELE9BQU8sQ0FBQyw0Q0FBNEMsRUFBRXlILFlBQVl6SCxJQUFJLENBQUMsNEZBQTRGLENBQUM7b0JBQ3RLO29CQUVBLDZDQUE2QztvQkFDN0MsSUFBSXlILFlBQVlyQyxTQUFTLEdBQUcsTUFBTTt3QkFDaEMsT0FBTyxDQUFDLGdCQUFnQixFQUFFcUMsWUFBWXpILElBQUksQ0FBQyxzRkFBc0YsQ0FBQztvQkFDcEk7b0JBRUEsT0FBTyxDQUFDLHFEQUFxRCxFQUFFeUgsWUFBWXpILElBQUksQ0FBQywwQ0FBMEMsQ0FBQztnQkFDN0g7Z0JBRUEsT0FBTztRQUNYO0lBQ0Y7SUFFUWdJLCtCQUErQm5ELGFBQXFDLEVBQUV2RixNQUE4QixFQUFVO1FBQ3BILE1BQU1tSSxjQUFjNUMsYUFBYSxDQUFDLEVBQUU7UUFDcEMsTUFBTThCLFlBQVlwTixrREFBU0EsQ0FBQ3FOLGtCQUFrQixDQUFDdEg7UUFFL0NuRCxRQUFRQyxHQUFHLENBQUMscURBQXFEcUwsWUFBWXpILElBQUk7UUFDakY3RCxRQUFRQyxHQUFHLENBQUMsdUJBQXVCcUwsWUFBWXJDLFNBQVMsQ0FBQzdFLE9BQU8sQ0FBQztRQUNqRXBFLFFBQVFDLEdBQUcsQ0FBQyxxQkFBcUJxTCxZQUFZUSxZQUFZO1FBQ3pEOUwsUUFBUUMsR0FBRyxDQUFDLHdCQUF3QnFMLFlBQVlTLGVBQWU7UUFFL0QsOEJBQThCO1FBQzlCLElBQUlULFlBQVl6SCxJQUFJLEtBQUssV0FBV3lILFlBQVl6SCxJQUFJLEtBQUssTUFBTTtZQUM3RCxPQUFPO1FBQ1Q7UUFFQSxxQ0FBcUM7UUFDckMsSUFBSXlILFlBQVl6SCxJQUFJLEtBQUssVUFBVXlILFlBQVl6SCxJQUFJLEtBQUssVUFBVTtZQUNoRSxPQUFPO1FBQ1Q7UUFFQSwrQkFBK0I7UUFDL0IsSUFBSXlILFlBQVl6SCxJQUFJLEtBQUssWUFBWXlILFlBQVl6SCxJQUFJLEtBQUssU0FBUztZQUNqRSxPQUFPO1FBQ1Q7UUFFQSw4QkFBOEI7UUFDOUIsSUFBSXlILFlBQVl6SCxJQUFJLEtBQUssVUFBVXlILFlBQVl6SCxJQUFJLEtBQUssU0FBUztZQUMvRCxPQUFPO1FBQ1Q7UUFFQSxvQ0FBb0M7UUFDcEMsSUFBSXlILFlBQVl6SCxJQUFJLEtBQUssVUFBVTZFLGNBQWNzRCxJQUFJLENBQUNoRCxDQUFBQSxJQUFLQSxFQUFFbkYsSUFBSSxLQUFLLFNBQVM7WUFDN0UsZ0RBQWdEO1lBQ2hELE1BQU1oRixVQUFVLElBQUksQ0FBQ1osU0FBUyxDQUFDVyxpQkFBaUIsQ0FBQ0MsT0FBTyxDQUFDNk0sSUFBSSxDQUFDLEtBQUtoSSxXQUFXO1lBQzlFLElBQUk3RSxRQUFRME0sUUFBUSxDQUFDLFdBQVcxTSxRQUFRME0sUUFBUSxDQUFDLGVBQWU7Z0JBQzlELE9BQU87WUFDVDtZQUNBLE9BQU87UUFDVDtRQUVBLDZDQUE2QztRQUM3QyxJQUFJRCxZQUFZekgsSUFBSSxLQUFLLGdCQUFnQnlILFlBQVl6SCxJQUFJLEtBQUssUUFBUTtZQUNwRSxPQUFPO1FBQ1Q7UUFFQSw4QkFBOEI7UUFDOUIsSUFBSXlILFlBQVl6SCxJQUFJLEtBQUssVUFBVTZFLGNBQWNzRCxJQUFJLENBQUNoRCxDQUFBQSxJQUFLQSxFQUFFbkYsSUFBSSxLQUFLLFNBQVM7WUFDN0UsTUFBTWhGLFVBQVUsSUFBSSxDQUFDWixTQUFTLENBQUNXLGlCQUFpQixDQUFDQyxPQUFPLENBQUM2TSxJQUFJLENBQUMsS0FBS2hJLFdBQVc7WUFDOUUsSUFBSTdFLFFBQVEwTSxRQUFRLENBQUMsc0JBQXNCMU0sUUFBUTBNLFFBQVEsQ0FBQyxZQUFZO2dCQUN0RSxPQUFPO1lBQ1Q7WUFDQSxPQUFPO1FBQ1Q7UUFFQSxzREFBc0Q7UUFDdEQsSUFBSUQsWUFBWVEsWUFBWSxDQUFDckssTUFBTSxHQUFHLEdBQUc7WUFDdkMsTUFBTXdLLG1CQUFtQlgsWUFBWVEsWUFBWSxDQUFDckssTUFBTTtZQUN4RCxNQUFNeUssZ0JBQWdCWixZQUFZUyxlQUFlLENBQUN0SyxNQUFNO1lBRXhELElBQUl3SyxvQkFBb0IsR0FBRztnQkFDekIsT0FBTyxDQUFDLDRDQUE0QyxFQUFFWCxZQUFZekgsSUFBSSxDQUFDLGtGQUFrRixDQUFDO1lBQzVKLE9BQU8sSUFBSXFJLGdCQUFnQixHQUFHO2dCQUM1QixPQUFPLENBQUMsc0NBQXNDLEVBQUVaLFlBQVl6SCxJQUFJLENBQUMscUVBQXFFLENBQUM7WUFDekk7UUFDRjtRQUVBLDBCQUEwQjtRQUMxQixJQUFJeUgsWUFBWXJDLFNBQVMsR0FBRyxLQUFLO1lBQy9CLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRXFDLFlBQVl6SCxJQUFJLENBQUMsc0ZBQXNGLENBQUM7UUFDcEk7UUFFQSxtQ0FBbUM7UUFDbkMsSUFBSTZFLGNBQWNqSCxNQUFNLEdBQUcsR0FBRztZQUM1QixNQUFNMEssYUFBYXpELGFBQWEsQ0FBQyxFQUFFO1lBQ25DLE9BQU8sQ0FBQyxzREFBc0QsRUFBRTRDLFlBQVl6SCxJQUFJLENBQUMsT0FBTyxFQUFFc0ksV0FBV3RJLElBQUksQ0FBQyx3REFBd0QsQ0FBQztRQUNySztRQUVBLG1DQUFtQztRQUNuQyxPQUFPLENBQUMsMkRBQTJELEVBQUV5SCxZQUFZekgsSUFBSSxDQUFDLHdEQUF3RCxDQUFDO0lBQ2pKO0lBRVF1SSw2QkFBNkI5TSxRQUFrQixFQUFFNkQsTUFBOEIsRUFBVTtRQUMvRixNQUFNcUgsWUFBWXBOLGtEQUFTQSxDQUFDcU4sa0JBQWtCLENBQUN0SDtRQUMvQyxNQUFNa0osaUJBQWlCL00sUUFBUSxDQUFDLEVBQUU7UUFDbEMsTUFBTWdOLGtCQUFrQixJQUFJLENBQUNuTixlQUFlLENBQUNJLGFBQWEsQ0FBQ2dOLEdBQUcsQ0FBQ0YsbUJBQW1CLEVBQUU7UUFFcEZyTSxRQUFRQyxHQUFHLENBQUMsK0NBQStDb007UUFDM0RyTSxRQUFRQyxHQUFHLENBQUMsd0JBQXdCcU07UUFFcEMsOEJBQThCO1FBQzlCLElBQUlELG1CQUFtQixXQUFXQSxtQkFBbUIsTUFBTTtZQUN6RCxPQUFPO1FBQ1Q7UUFFQSxxQ0FBcUM7UUFDckMsSUFBSUEsbUJBQW1CLFVBQVVBLG1CQUFtQixVQUFVO1lBQzVELE9BQU87UUFDVDtRQUVBLCtCQUErQjtRQUMvQixJQUFJQSxtQkFBbUIsWUFBWUEsbUJBQW1CLFNBQVM7WUFDN0QsT0FBTztRQUNUO1FBRUEsOEJBQThCO1FBQzlCLElBQUlBLG1CQUFtQixVQUFVQSxtQkFBbUIsU0FBUztZQUMzRCxPQUFPO1FBQ1Q7UUFFQSxvQ0FBb0M7UUFDcEMsSUFBSUEsbUJBQW1CLFVBQVUvTSxTQUFTaU0sUUFBUSxDQUFDLFNBQVM7WUFDMUQsZ0RBQWdEO1lBQ2hELE1BQU0xTSxVQUFVLElBQUksQ0FBQ1osU0FBUyxDQUFDVyxpQkFBaUIsQ0FBQ0MsT0FBTyxDQUFDNk0sSUFBSSxDQUFDLEtBQUtoSSxXQUFXO1lBQzlFLElBQUk3RSxRQUFRME0sUUFBUSxDQUFDLFdBQVcxTSxRQUFRME0sUUFBUSxDQUFDLGVBQWU7Z0JBQzlELE9BQU87WUFDVDtZQUNBLE9BQU87UUFDVDtRQUVBLDZDQUE2QztRQUM3QyxJQUFJYyxtQkFBbUIsZ0JBQWdCQSxtQkFBbUIsUUFBUTtZQUNoRSxPQUFPO1FBQ1Q7UUFFQSw4QkFBOEI7UUFDOUIsSUFBSUEsbUJBQW1CLFVBQVUvTSxTQUFTaU0sUUFBUSxDQUFDLFNBQVM7WUFDMUQsTUFBTTFNLFVBQVUsSUFBSSxDQUFDWixTQUFTLENBQUNXLGlCQUFpQixDQUFDQyxPQUFPLENBQUM2TSxJQUFJLENBQUMsS0FBS2hJLFdBQVc7WUFDOUUsSUFBSTdFLFFBQVEwTSxRQUFRLENBQUMsc0JBQXNCMU0sUUFBUTBNLFFBQVEsQ0FBQyxZQUFZO2dCQUN0RSxPQUFPO1lBQ1Q7WUFDQSxPQUFPO1FBQ1Q7UUFFQSxzREFBc0Q7UUFDdEQsSUFBSWUsZ0JBQWdCN0ssTUFBTSxHQUFHLEdBQUc7WUFDOUIsTUFBTStLLGlCQUFpQkYsZUFBZSxDQUFDNUgsS0FBS0MsS0FBSyxDQUFDNkYsYUFBYThCLGdCQUFnQjdLLE1BQU0sQ0FBQztZQUV0Riw2Q0FBNkM7WUFDN0MsSUFBSTRLLG1CQUFtQixXQUFXQyxnQkFBZ0JmLFFBQVEsQ0FBQyxXQUFXO2dCQUNwRSxPQUFPO1lBQ1Q7WUFFQSxJQUFJYyxtQkFBbUIsVUFBVUMsZ0JBQWdCZixRQUFRLENBQUMsU0FBUztnQkFDakUsT0FBTztZQUNUO1lBRUEsT0FBTyxDQUFDLDhCQUE4QixFQUFFYyxlQUFlLHdDQUF3QyxFQUFFRyxlQUFlLDJDQUEyQyxDQUFDO1FBQzlKO1FBRUEsbURBQW1EO1FBQ25ELE9BQU8sQ0FBQywrQkFBK0IsRUFBRUgsZUFBZSw2RkFBNkYsQ0FBQztJQUN4SjtJQUVRN0Msc0JBQXNCckcsTUFBOEIsRUFBVTtRQUNwRSxNQUFNcUgsWUFBWXBOLGtEQUFTQSxDQUFDcU4sa0JBQWtCLENBQUN0SDtRQUMvQyxNQUFNc0osYUFBYXpMLE9BQU8wTCxJQUFJLENBQUN2SixRQUFRMUIsTUFBTTtRQUM3QyxNQUFNa0wsZ0JBQWdCM0wsT0FBT0MsT0FBTyxDQUFDa0MsUUFBUTRCLElBQUksQ0FBQyxDQUFDLEdBQUVDLEVBQUUsRUFBRSxHQUFFQyxFQUFFLEdBQUtBLElBQUlELEVBQUUsQ0FBQyxFQUFFO1FBRTNFLHdDQUF3QztRQUN4QyxJQUFJd0YsWUFBWSxNQUFNO1lBQ3BCLE9BQU87UUFDVCxPQUFPLElBQUlBLFlBQVksS0FBSztZQUMxQixPQUFPO1FBQ1QsT0FBTyxJQUFJaUMsYUFBYSxHQUFHO1lBQ3pCLE9BQU87UUFDVCxPQUFPLElBQUlFLGlCQUFpQnJMLFNBQVNxTCxhQUFhLENBQUMsRUFBRSxJQUFJLEtBQUs7WUFDNUQsT0FBTyxDQUFDLDBCQUEwQixFQUFFQSxhQUFhLENBQUMsRUFBRSxDQUFDLDhFQUE4RSxDQUFDO1FBQ3RJO1FBRUEsbURBQW1EO1FBQ25ELE1BQU1DLHFCQUFxQixJQUFJLENBQUMzTyxTQUFTLENBQUNXLGlCQUFpQixDQUFDRSxTQUFTO1FBQ3JFLElBQUk4Tix1QkFBdUIsR0FBRztZQUM1QixPQUFPO1FBQ1QsT0FBTyxJQUFJQSxxQkFBcUIsR0FBRztZQUNqQyxPQUFPO1FBQ1Q7UUFFQSxzREFBc0Q7UUFDdEQsTUFBTUMsWUFBWTtZQUNoQjtZQUNBO1lBQ0E7WUFDQTtZQUNBO1NBQ0Q7UUFFRCxPQUFPQSxTQUFTLENBQUNuSSxLQUFLQyxLQUFLLENBQUM2RixhQUFhcUMsVUFBVXBMLE1BQU0sQ0FBQztJQUM1RDtJQUVBOztHQUVDLEdBQ0QseUNBQ0U2SCxRQUFnQixFQUNoQnhCLGlCQUFzQixFQUN0QmpCLGdCQUFxQixFQUNiO1FBQ1I3RyxRQUFRQyxHQUFHLENBQUM7UUFDWkQsUUFBUUMsR0FBRyxDQUFDLHVCQUF1QjZILGtCQUFrQmdGLGVBQWU7UUFDcEU5TSxRQUFRQyxHQUFHLENBQUMsa0JBQWtCNkgsa0JBQWtCaUYsWUFBWTtRQUM1RC9NLFFBQVFDLEdBQUcsQ0FBQyxzQkFBc0I2SCxrQkFBa0JrRixnQkFBZ0I7UUFFcEUsSUFBSUMsbUJBQW1CM0Q7UUFFdkIscURBQXFEO1FBQ3JELE1BQU0sRUFBRTRELE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxVQUFVLEVBQUVDLFFBQVEsRUFBRSxHQUFHdkYsa0JBQWtCa0YsZ0JBQWdCO1FBRXRGLHNDQUFzQztRQUN0QyxJQUFJRSxTQUFTLEtBQUs7WUFDaEIsSUFBSSxDQUFDRCxpQkFBaUIxQixRQUFRLENBQUMsaUJBQWlCLENBQUMwQixpQkFBaUIxQixRQUFRLENBQUMsU0FBUztnQkFDbEYwQixtQkFBbUIsQ0FBQywyQkFBMkIsRUFBRUEsa0JBQWtCO1lBQ3JFO1FBQ0Y7UUFFQSxrQ0FBa0M7UUFDbEMsSUFBSUUsWUFBWSxLQUFLO1lBQ25CRixtQkFBbUJBLGlCQUFpQkssT0FBTyxDQUFDLFFBQVE7UUFDdEQ7UUFFQSxrQ0FBa0M7UUFDbEMsSUFBSUYsYUFBYSxLQUFLO1lBQ3BCLElBQUksQ0FBQ0gsaUJBQWlCMUIsUUFBUSxDQUFDLE1BQU07Z0JBQ25DMEIsbUJBQW1CQSxpQkFBaUJLLE9BQU8sQ0FBQyxPQUFPO1lBQ3JEO1FBQ0Y7UUFFQSx5Q0FBeUM7UUFDekMsSUFBSUQsV0FBVyxLQUFLO1lBQ2xCLElBQUl4RyxpQkFBaUIwRyxhQUFhLEtBQUssUUFBUTtnQkFDN0NOLG9CQUFvQjtZQUN0QjtRQUNGO1FBRUEsc0NBQXNDO1FBQ3RDLE9BQVFuRixrQkFBa0JnRixlQUFlO1lBQ3ZDLEtBQUs7Z0JBQ0gsSUFBSSxDQUFDRyxpQkFBaUIxQixRQUFRLENBQUMsWUFBWSxDQUFDMEIsaUJBQWlCMUIsUUFBUSxDQUFDLGVBQWU7b0JBQ25GMEIsbUJBQW1CLENBQUMsb0NBQW9DLEVBQUVBLGtCQUFrQjtnQkFDOUU7Z0JBQ0E7WUFFRixLQUFLO2dCQUNILElBQUlwRyxpQkFBaUJPLFdBQVcsQ0FBQ08sT0FBTyxLQUFLLFVBQVVkLGlCQUFpQk8sV0FBVyxDQUFDTyxPQUFPLEtBQUssV0FBVztvQkFDekdzRixvQkFBb0I7Z0JBQ3RCO2dCQUNBO1lBRUYsS0FBSztnQkFDSCxJQUFJLENBQUNBLGlCQUFpQjFCLFFBQVEsQ0FBQyxZQUFZLENBQUMwQixpQkFBaUIxQixRQUFRLENBQUMsY0FBYztvQkFDbEYwQixtQkFBbUIsQ0FBQyxxQ0FBcUMsRUFBRUEsa0JBQWtCO2dCQUMvRTtnQkFDQTtRQUNKO1FBRUEsNkNBQTZDO1FBQzdDLElBQUksQ0FBQ3BOLG1CQUFtQixDQUFDbUgsWUFBWSxDQUNuQyxnQkFDQTtZQUNFQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUVnRyxpQkFBaUIsQ0FBQyxDQUFDO1lBQy9DL0YsU0FBUztnQkFDUHNHLGtCQUFrQmxFO2dCQUNsQm1FLHVCQUF1QjtvQkFDckJDLFVBQVU1RixrQkFBa0JnRixlQUFlO29CQUMzQ0Usa0JBQWtCbEYsa0JBQWtCa0YsZ0JBQWdCO2dCQUN0RDtZQUNGO1lBQ0EzRixjQUFjO2dCQUFDO2dCQUFXO2FBQVE7WUFDbEN4SSxTQUFTO1FBQ1gsR0FDQWlKLGtCQUFrQjZGLGVBQWUsRUFDakMsSUFBSSx3Q0FBd0M7O1FBRzlDM04sUUFBUUMsR0FBRyxDQUFDLHlCQUF5QmdOO1FBQ3JDLE9BQU9BO0lBQ1Q7SUFFQVcsZUFBb0I7UUFDbEIsT0FBTztZQUNMM1AsV0FBVztnQkFDVEMsVUFBVSxJQUFJLENBQUNELFNBQVMsQ0FBQ0MsUUFBUTtnQkFDakNVLG1CQUFtQjtvQkFDakIsR0FBRyxJQUFJLENBQUNYLFNBQVMsQ0FBQ1csaUJBQWlCO29CQUNuQzZOLFlBQVl6TCxPQUFPMEwsSUFBSSxDQUFDLElBQUksQ0FBQ3pPLFNBQVMsQ0FBQ1csaUJBQWlCLENBQUNMLFlBQVksRUFBRWtELE1BQU07Z0JBQy9FO1lBQ0Y7WUFDQXZDLGFBQWE7Z0JBQ1hoQixVQUFVLElBQUksQ0FBQ2dCLFdBQVcsQ0FBQ2hCLFFBQVE7Z0JBQ25DVSxtQkFBbUI7b0JBQ2pCLEdBQUcsSUFBSSxDQUFDTSxXQUFXLENBQUNOLGlCQUFpQjtvQkFDckM2TixZQUFZekwsT0FBTzBMLElBQUksQ0FBQyxJQUFJLENBQUN4TixXQUFXLENBQUNOLGlCQUFpQixDQUFDTCxZQUFZLEVBQUVrRCxNQUFNO2dCQUNqRjtZQUNGO1lBQ0F5QyxXQUFXOUcsa0RBQVNBLENBQUMrRyxrQkFBa0IsQ0FDckMsSUFBSSxDQUFDbEcsU0FBUyxDQUFDVyxpQkFBaUIsQ0FBQ0wsWUFBWSxFQUM3QyxJQUFJLENBQUNXLFdBQVcsQ0FBQ04saUJBQWlCLENBQUNMLFlBQVk7WUFFakRzUCxnQkFBZ0I7Z0JBQ2RDLGVBQWUsSUFBSSxDQUFDak8sbUJBQW1CLENBQUNrTyxjQUFjLEdBQUdELGFBQWE7Z0JBQ3RFRSxtQkFBbUIsSUFBSSxDQUFDbk8sbUJBQW1CLENBQUNvTyxzQkFBc0IsR0FBR3hQLE1BQU07WUFDN0U7UUFDRjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL1ByaW1lTE0tRGVtby9zcmMvbGliL2NvcmUvcHJpbWVsbS1tb2RlbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGlwZWxpbmUsIFBpcGVsaW5lIH0gZnJvbSAnQHhlbm92YS90cmFuc2Zvcm1lcnMnO1xuaW1wb3J0IHsgS25vd2xlZGdlQm9vdHN0cmFwLCBLbm93bGVkZ2VCYXNlIH0gZnJvbSAnLi4vc2VtYW50aWMva25vd2xlZGdlLWJvb3RzdHJhcCc7XG5pbXBvcnQgeyBQcmltZVJlc29uYW5jZUVuZ2luZSwgUHJpbWVSZXNvbmFuY2VSZXN1bHQgfSBmcm9tICcuL3ByaW1lLXJlc29uYW5jZSc7XG5pbXBvcnQgeyBQcmltZU1hdGggfSBmcm9tICcuL3ByaW1lLW1hdGgnO1xuaW1wb3J0IHsgU2VtYW50aWNMYXllciwgU2VtYW50aWNDb250ZXh0IH0gZnJvbSAnLi4vc2VtYW50aWMvc2VtYW50aWMtbGF5ZXInO1xuaW1wb3J0IHsgUHJhZ21hdGljTGF5ZXIsIENvbnZlcnNhdGlvbkNvbnRleHQgfSBmcm9tICcuLi9jb252ZXJzYXRpb24vcHJhZ21hdGljLWxheWVyJztcbmltcG9ydCB7IFNjaGVtYVZvY2FidWxhcnkgfSBmcm9tICcuLi9zZW1hbnRpYy9zY2hlbWEtdm9jYWJ1bGFyeSc7XG5pbXBvcnQgeyBEaXNjb3Vyc2VMYXllciB9IGZyb20gJy4uL2NvbnZlcnNhdGlvbi9kaXNjb3Vyc2UtbGF5ZXInO1xuaW1wb3J0IHsgR2VuZXJhdGl2ZUxheWVyLCBHZW5lcmF0aW9uQ29udGV4dCB9IGZyb20gJy4uL2NvbnZlcnNhdGlvbi9nZW5lcmF0aXZlLWxheWVyJztcbmltcG9ydCB7IENvbnZlcnNhdGlvblN0YXRlTWFuYWdlciwgQ29udmVyc2F0aW9uVHVybiB9IGZyb20gJy4uL2NvbnZlcnNhdGlvbi9jb252ZXJzYXRpb24tc3RhdGUnO1xuaW1wb3J0IHsgR3JhY2VmdWxFcnJvckhhbmRsZXIsIGNyZWF0ZUVycm9yQ29udGV4dCwgc2FmZUFzeW5jIH0gZnJvbSAnLi4vc3lzdGVtL2Vycm9yLWhhbmRsaW5nJztcbmltcG9ydCB7IEVwaXNvZGljTWVtb3J5TGF5ZXIgfSBmcm9tICcuLi9tZW1vcnkvZXBpc29kaWMtbWVtb3J5JztcbmltcG9ydCB7IEVtb3Rpb25hbEludGVsbGlnZW5jZUxheWVyIH0gZnJvbSAnLi4vbWVtb3J5L2Vtb3Rpb25hbC1pbnRlbGxpZ2VuY2UnO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gQ09SRSBNT0RFTCBJTlRFUkZBQ0VTXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnQgaW50ZXJmYWNlIElkZW50aXR5TW9kZWwge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIHR5cGU6ICdodW1hbicgfCAnY2hhdGJvdCc7XG4gIGVtYmVkZGluZ3M6IG51bWJlcltdO1xuICBwcmltZUZhY3RvcnM6IFJlY29yZDxudW1iZXIsIG51bWJlcj47XG4gIHBlcnNvbmFsaXR5OiB7XG4gICAgdHJhaXRzOiBzdHJpbmdbXTtcbiAgICBjb21tdW5pY2F0aW9uU3R5bGU6IHN0cmluZztcbiAgICBpbnRlcmVzdHM6IHN0cmluZ1tdO1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJNb2RlbCB7XG4gIGlkZW50aXR5OiBJZGVudGl0eU1vZGVsO1xuICBjb252ZXJzYXRpb25TdGF0ZToge1xuICAgIGVtYmVkZGluZ3M6IG51bWJlcltdO1xuICAgIHByaW1lRmFjdG9yczogUmVjb3JkPG51bWJlciwgbnVtYmVyPjtcbiAgICBjb250ZXh0OiBzdHJpbmdbXTtcbiAgICB0dXJuQ291bnQ6IG51bWJlcjtcbiAgfTtcbiAgcHJlZmVyZW5jZXM6IHtcbiAgICB0b3BpY3M6IHN0cmluZ1tdO1xuICAgIHJlc3BvbnNlTGVuZ3RoOiAnc2hvcnQnIHwgJ21lZGl1bScgfCAnbG9uZyc7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW1iZWRkaW5nc01vZGVsIHtcbiAgdm9jYWJ1bGFyeTogTWFwPHN0cmluZywgbnVtYmVyW10+O1xuICBjb25jZXB0czogTWFwPHN0cmluZywgbnVtYmVyW10+O1xuICByZWxhdGlvbnNoaXBzOiBNYXA8c3RyaW5nLCBzdHJpbmdbXT47XG59XG5cblxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gUFJJTUUgQ09SRSBJTVBMRU1FTlRBVElPTlxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZXhwb3J0IGNsYXNzIFByaW1lQ29yZSB7XG4gIHByaXZhdGUgZW1iZWRkaW5nUGlwZWxpbmU6IGFueSB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIGlzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBrbm93bGVkZ2VCYXNlOiBLbm93bGVkZ2VCYXNlIHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgc2VtYW50aWNMYXllcjogU2VtYW50aWNMYXllcjtcbiAgcHJpdmF0ZSBwcmFnbWF0aWNMYXllcjogUHJhZ21hdGljTGF5ZXI7XG4gIHByaXZhdGUgc2NoZW1hVm9jYWJ1bGFyeTogU2NoZW1hVm9jYWJ1bGFyeTtcbiAgcHJpdmF0ZSBkaXNjb3Vyc2VMYXllcjogRGlzY291cnNlTGF5ZXI7XG4gIHByaXZhdGUgZ2VuZXJhdGl2ZUxheWVyOiBHZW5lcmF0aXZlTGF5ZXI7XG4gIHByaXZhdGUgZXBpc29kaWNNZW1vcnlMYXllcjogRXBpc29kaWNNZW1vcnlMYXllcjtcbiAgcHJpdmF0ZSBlbW90aW9uYWxJbnRlbGxpZ2VuY2VMYXllcjogRW1vdGlvbmFsSW50ZWxsaWdlbmNlTGF5ZXI7XG4gIFxuICBodW1hblVzZXI6IFVzZXJNb2RlbDtcbiAgY2hhdGJvdFVzZXI6IFVzZXJNb2RlbDtcbiAgZW1iZWRkaW5nc01vZGVsOiBFbWJlZGRpbmdzTW9kZWw7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBodW1hbiB1c2VyXG4gICAgdGhpcy5odW1hblVzZXIgPSB7XG4gICAgICBpZGVudGl0eToge1xuICAgICAgICBpZDogJ2h1bWFuLTAwMScsXG4gICAgICAgIG5hbWU6ICdIdW1hbicsXG4gICAgICAgIHR5cGU6ICdodW1hbicsXG4gICAgICAgIGVtYmVkZGluZ3M6IFtdLFxuICAgICAgICBwcmltZUZhY3RvcnM6IHt9LFxuICAgICAgICBwZXJzb25hbGl0eToge1xuICAgICAgICAgIHRyYWl0czogWydjdXJpb3VzJywgJ2NvbnZlcnNhdGlvbmFsJ10sXG4gICAgICAgICAgY29tbXVuaWNhdGlvblN0eWxlOiAnZGlyZWN0JyxcbiAgICAgICAgICBpbnRlcmVzdHM6IFtdXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjb252ZXJzYXRpb25TdGF0ZToge1xuICAgICAgICBlbWJlZGRpbmdzOiBbXSxcbiAgICAgICAgcHJpbWVGYWN0b3JzOiB7fSxcbiAgICAgICAgY29udGV4dDogW10sXG4gICAgICAgIHR1cm5Db3VudDogMFxuICAgICAgfSxcbiAgICAgIHByZWZlcmVuY2VzOiB7XG4gICAgICAgIHRvcGljczogW10sXG4gICAgICAgIHJlc3BvbnNlTGVuZ3RoOiAnbWVkaXVtJ1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBJbml0aWFsaXplIGNoYXRib3QgdXNlclxuICAgIHRoaXMuY2hhdGJvdFVzZXIgPSB7XG4gICAgICBpZGVudGl0eToge1xuICAgICAgICBpZDogJ2NoYXRib3QtMDAxJyxcbiAgICAgICAgbmFtZTogJ1ByaW1lQm90JyxcbiAgICAgICAgdHlwZTogJ2NoYXRib3QnLFxuICAgICAgICBlbWJlZGRpbmdzOiBbXSxcbiAgICAgICAgcHJpbWVGYWN0b3JzOiB7fSxcbiAgICAgICAgcGVyc29uYWxpdHk6IHtcbiAgICAgICAgICB0cmFpdHM6IFsnaGVscGZ1bCcsICdhbmFseXRpY2FsJywgJ21hdGhlbWF0aWNhbCddLFxuICAgICAgICAgIGNvbW11bmljYXRpb25TdHlsZTogJ3Rob3VnaHRmdWwnLFxuICAgICAgICAgIGludGVyZXN0czogWydtYXRoZW1hdGljcycsICdjb252ZXJzYXRpb24nLCAnbGVhcm5pbmcnXVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY29udmVyc2F0aW9uU3RhdGU6IHtcbiAgICAgICAgZW1iZWRkaW5nczogW10sXG4gICAgICAgIHByaW1lRmFjdG9yczoge30sXG4gICAgICAgIGNvbnRleHQ6IFtdLFxuICAgICAgICB0dXJuQ291bnQ6IDBcbiAgICAgIH0sXG4gICAgICBwcmVmZXJlbmNlczoge1xuICAgICAgICB0b3BpY3M6IFsnbWF0aGVtYXRpY3MnLCAncHJpbWUgbnVtYmVycycsICdjb252ZXJzYXRpb24nXSxcbiAgICAgICAgcmVzcG9uc2VMZW5ndGg6ICdtZWRpdW0nXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEluaXRpYWxpemUgZW1iZWRkaW5ncyBtb2RlbFxuICAgIHRoaXMuZW1iZWRkaW5nc01vZGVsID0ge1xuICAgICAgdm9jYWJ1bGFyeTogbmV3IE1hcCgpLFxuICAgICAgY29uY2VwdHM6IG5ldyBNYXAoKSxcbiAgICAgIHJlbGF0aW9uc2hpcHM6IG5ldyBNYXAoKVxuICAgIH07XG5cbiAgICAvLyBJbml0aWFsaXplIHNlbWFudGljIGxheWVyXG4gICAgdGhpcy5zZW1hbnRpY0xheWVyID0gbmV3IFNlbWFudGljTGF5ZXIoKTtcbiAgICBcbiAgICAvLyBJbml0aWFsaXplIHByYWdtYXRpYyBsYXllclxuICAgIHRoaXMucHJhZ21hdGljTGF5ZXIgPSBuZXcgUHJhZ21hdGljTGF5ZXIoKTtcbiAgICBcbiAgICAvLyBJbml0aWFsaXplIHNjaGVtYSB2b2NhYnVsYXJ5XG4gICAgdGhpcy5zY2hlbWFWb2NhYnVsYXJ5ID0gbmV3IFNjaGVtYVZvY2FidWxhcnkoKTtcbiAgICBcbiAgICAvLyBJbml0aWFsaXplIGRpc2NvdXJzZSBsYXllclxuICAgIHRoaXMuZGlzY291cnNlTGF5ZXIgPSBuZXcgRGlzY291cnNlTGF5ZXIodGhpcy5zY2hlbWFWb2NhYnVsYXJ5KTtcbiAgICBcbiAgICAvLyBJbml0aWFsaXplIGdlbmVyYXRpdmUgbGF5ZXJcbiAgICB0aGlzLmdlbmVyYXRpdmVMYXllciA9IG5ldyBHZW5lcmF0aXZlTGF5ZXIodGhpcy5zY2hlbWFWb2NhYnVsYXJ5KTtcbiAgICBcbiAgICAvLyBJbml0aWFsaXplIFBoYXNlIDMgbGF5ZXJzXG4gICAgdGhpcy5lcGlzb2RpY01lbW9yeUxheWVyID0gbmV3IEVwaXNvZGljTWVtb3J5TGF5ZXIoKTtcbiAgICB0aGlzLmVtb3Rpb25hbEludGVsbGlnZW5jZUxheWVyID0gbmV3IEVtb3Rpb25hbEludGVsbGlnZW5jZUxheWVyKCk7XG5cbiAgICAvLyBFbWJlZGRpbmdzIG1vZGVsIHN0YXJ0cyBlbXB0eSAtIG5vIGhhcmRjb2RlZCBkYXRhXG4gIH1cblxuICBhc3luYyBpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygn8J+agCBJbml0aWFsaXppbmcgUHJpbWVMTSBDb3JlLi4uJyk7XG4gICAgICBcbiAgICAgIC8vIExvYWQgZW1iZWRkaW5nIHBpcGVsaW5lXG4gICAgICB0aGlzLmVtYmVkZGluZ1BpcGVsaW5lID0gYXdhaXQgcGlwZWxpbmUoXG4gICAgICAgICdmZWF0dXJlLWV4dHJhY3Rpb24nLFxuICAgICAgICAnWGVub3ZhL2FsbC1NaW5pTE0tTDYtdjInXG4gICAgICApO1xuICAgICAgXG4gICAgICAvLyBCb290c3RyYXAgY2hhdGJvdCBrbm93bGVkZ2VcbiAgICAgIGF3YWl0IHRoaXMuYm9vdHN0cmFwQ2hhdGJvdEtub3dsZWRnZSgpO1xuICAgICAgXG4gICAgICB0aGlzLmlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgY29uc29sZS5sb2coJ+KchSBQcmltZUxNIENvcmUgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEZhaWxlZCB0byBpbml0aWFsaXplIFByaW1lTE0gQ29yZTonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGJvb3RzdHJhcENoYXRib3RLbm93bGVkZ2UoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCF0aGlzLmVtYmVkZGluZ1BpcGVsaW5lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VtYmVkZGluZyBwaXBlbGluZSBub3QgaW5pdGlhbGl6ZWQnKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3Qga25vd2xlZGdlQm9vdHN0cmFwID0gbmV3IEtub3dsZWRnZUJvb3RzdHJhcCh0aGlzLmVtYmVkZGluZ1BpcGVsaW5lKTtcbiAgICAgIHRoaXMua25vd2xlZGdlQmFzZSA9IGF3YWl0IGtub3dsZWRnZUJvb3RzdHJhcC5ib290c3RyYXBGcm9tVG9rZW5pemVyKCk7XG4gICAgICBcbiAgICAgIC8vIFBvcHVsYXRlIGVtYmVkZGluZ3MgbW9kZWwgd2l0aCBib290c3RyYXBwZWQga25vd2xlZGdlXG4gICAgICB0aGlzLmVtYmVkZGluZ3NNb2RlbC52b2NhYnVsYXJ5ID0gdGhpcy5rbm93bGVkZ2VCYXNlLmNvbmNlcHRFbWJlZGRpbmdzO1xuICAgICAgdGhpcy5lbWJlZGRpbmdzTW9kZWwuY29uY2VwdHMgPSB0aGlzLmtub3dsZWRnZUJhc2UuY29uY2VwdEVtYmVkZGluZ3M7XG4gICAgICB0aGlzLmVtYmVkZGluZ3NNb2RlbC5yZWxhdGlvbnNoaXBzID0gdGhpcy5rbm93bGVkZ2VCYXNlLnNlbWFudGljQ2x1c3RlcnM7XG4gICAgICBcbiAgICAgIC8vIFVwZGF0ZSBjaGF0Ym90IGlkZW50aXR5IHdpdGggYWNjdW11bGF0ZWQga25vd2xlZGdlXG4gICAgICB0aGlzLnBvcHVsYXRlQ2hhdGJvdElkZW50aXR5KCk7XG4gICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEtub3dsZWRnZSBib290c3RyYXAgZmFpbGVkOicsIGVycm9yKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgS25vd2xlZGdlIGJvb3RzdHJhcCBmYWlsZWQ6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcG9wdWxhdGVDaGF0Ym90SWRlbnRpdHkoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmtub3dsZWRnZUJhc2UpIHJldHVybjtcbiAgICBcbiAgICAvLyBBY2N1bXVsYXRlIHByaW1lIGZhY3RvcnMgZnJvbSBhbGwgdm9jYWJ1bGFyeVxuICAgIGNvbnN0IGlkZW50aXR5UHJpbWVzOiBSZWNvcmQ8bnVtYmVyLCBudW1iZXI+ID0ge307XG4gICAgY29uc3QgYWxsRW1iZWRkaW5nczogbnVtYmVyW11bXSA9IFtdO1xuICAgIFxuICAgIGZvciAoY29uc3Qgdm9jYWJ1bGFyeUVudHJ5IG9mIHRoaXMua25vd2xlZGdlQmFzZS52b2NhYnVsYXJ5LnZhbHVlcygpKSB7XG4gICAgICAvLyBBZGQgcHJpbWUgZmFjdG9ycyB0byBjaGF0Ym90IGlkZW50aXR5XG4gICAgICBPYmplY3QuZW50cmllcyh2b2NhYnVsYXJ5RW50cnkucHJpbWVGYWN0b3JzKS5mb3JFYWNoKChbcHJpbWUsIHdlaWdodF0pID0+IHtcbiAgICAgICAgY29uc3QgcHJpbWVOdW0gPSBwYXJzZUludChwcmltZSk7XG4gICAgICAgIGlkZW50aXR5UHJpbWVzW3ByaW1lTnVtXSA9IChpZGVudGl0eVByaW1lc1twcmltZU51bV0gfHwgMCkgKyB3ZWlnaHQ7XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgYWxsRW1iZWRkaW5ncy5wdXNoKHZvY2FidWxhcnlFbnRyeS5lbWJlZGRpbmcpO1xuICAgIH1cbiAgICBcbiAgICAvLyBDYWxjdWxhdGUgY2VudHJvaWQgZW1iZWRkaW5nIGZvciBjaGF0Ym90IGlkZW50aXR5XG4gICAgaWYgKGFsbEVtYmVkZGluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgY2VudHJvaWRFbWJlZGRpbmcgPSB0aGlzLmNhbGN1bGF0ZUNlbnRyb2lkRW1iZWRkaW5nKGFsbEVtYmVkZGluZ3MpO1xuICAgICAgdGhpcy5jaGF0Ym90VXNlci5pZGVudGl0eS5lbWJlZGRpbmdzID0gY2VudHJvaWRFbWJlZGRpbmc7XG4gICAgICB0aGlzLmNoYXRib3RVc2VyLmlkZW50aXR5LnByaW1lRmFjdG9ycyA9IGlkZW50aXR5UHJpbWVzO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlQ2VudHJvaWRFbWJlZGRpbmcoZW1iZWRkaW5nczogbnVtYmVyW11bXSk6IG51bWJlcltdIHtcbiAgICBpZiAoZW1iZWRkaW5ncy5sZW5ndGggPT09IDApIHJldHVybiBuZXcgQXJyYXkoMzg0KS5maWxsKDApO1xuICAgIFxuICAgIGNvbnN0IGNlbnRyb2lkID0gbmV3IEFycmF5KGVtYmVkZGluZ3NbMF0ubGVuZ3RoKS5maWxsKDApO1xuICAgIFxuICAgIGVtYmVkZGluZ3MuZm9yRWFjaChlbWJlZGRpbmcgPT4ge1xuICAgICAgZW1iZWRkaW5nLmZvckVhY2goKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICBjZW50cm9pZFtpbmRleF0gKz0gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gY2VudHJvaWQubWFwKHZhbHVlID0+IHZhbHVlIC8gZW1iZWRkaW5ncy5sZW5ndGgpO1xuICB9XG5cbiAgYXN5bmMgcHJvY2Vzc0NvbnZlcnNhdGlvbihpbnB1dDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXplZCB8fCAhdGhpcy5lbWJlZGRpbmdQaXBlbGluZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQcmltZUNvcmUgbm90IGluaXRpYWxpemVkJyk7XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coYPCflKwgUHJvY2Vzc2luZyBpbnB1dDogXCIke2lucHV0fVwiYCk7XG5cbiAgICAvLyAxLiBHZW5lcmF0ZSBlbWJlZGRpbmdzIGZvciBpbnB1dFxuICAgIGNvbnN0IGlucHV0RW1iZWRkaW5ncyA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVFbWJlZGRpbmdzKGlucHV0KTtcbiAgICBcbiAgICAvLyAyLiBDb252ZXJ0IHRvIHByaW1lcyB0aHJvdWdoIGh1bWFuIHVzZXIgbW9kZWxcbiAgICBjb25zdCBpbnB1dFByaW1lcyA9IFByaW1lTWF0aC5lbWJlZGRpbmdzVG9QcmltZXMoaW5wdXRFbWJlZGRpbmdzKTtcbiAgICBcbiAgICAvLyAzLiBVcGRhdGUgaHVtYW4gdXNlciBzdGF0ZVxuICAgIHRoaXMudXBkYXRlVXNlclN0YXRlKHRoaXMuaHVtYW5Vc2VyLCBpbnB1dCwgaW5wdXRFbWJlZGRpbmdzLCBpbnB1dFByaW1lcyk7XG4gICAgXG4gICAgLy8gNC4gR2VuZXJhdGUgcmVzcG9uc2UgdGhyb3VnaCBtYXRoZW1hdGljYWwgdHJhbnNsYXRpb25cbiAgICBjb25zdCByZXNwb25zZVByaW1lcyA9IHRoaXMuZ2VuZXJhdGVSZXNwb25zZVByaW1lcyhpbnB1dFByaW1lcyk7XG4gICAgXG4gICAgLy8gNS4gQ29udmVydCByZXNwb25zZSBwcmltZXMgdG8gdGV4dCB0aHJvdWdoIGNoYXRib3QgdXNlciBtb2RlbFxuICAgIGNvbnN0IHJlc3BvbnNlVGV4dCA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVSZXNwb25zZVRleHQocmVzcG9uc2VQcmltZXMpO1xuICAgIFxuICAgIC8vIDYuIFVwZGF0ZSBjaGF0Ym90IHVzZXIgc3RhdGVcbiAgICBjb25zdCByZXNwb25zZUVtYmVkZGluZ3MgPSBhd2FpdCB0aGlzLmdlbmVyYXRlRW1iZWRkaW5ncyhyZXNwb25zZVRleHQpO1xuICAgIHRoaXMudXBkYXRlVXNlclN0YXRlKHRoaXMuY2hhdGJvdFVzZXIsIHJlc3BvbnNlVGV4dCwgcmVzcG9uc2VFbWJlZGRpbmdzLCByZXNwb25zZVByaW1lcyk7XG4gICAgXG4gICAgY29uc29sZS5sb2coYOKchSBHZW5lcmF0ZWQgcmVzcG9uc2U6IFwiJHtyZXNwb25zZVRleHR9XCJgKTtcbiAgICBcbiAgICByZXR1cm4gcmVzcG9uc2VUZXh0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBnZW5lcmF0ZUVtYmVkZGluZ3ModGV4dDogc3RyaW5nKTogUHJvbWlzZTxudW1iZXJbXT4ge1xuICAgIGlmICghdGhpcy5lbWJlZGRpbmdQaXBlbGluZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbWJlZGRpbmcgcGlwZWxpbmUgbm90IGluaXRpYWxpemVkJyk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZW1iZWRkaW5nUGlwZWxpbmUodGV4dCk7XG4gICAgcmV0dXJuIEFycmF5LmZyb20ocmVzdWx0LmRhdGEpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVVc2VyU3RhdGUodXNlcjogVXNlck1vZGVsLCB0ZXh0OiBzdHJpbmcsIGVtYmVkZGluZ3M6IG51bWJlcltdLCBwcmltZXM6IFJlY29yZDxudW1iZXIsIG51bWJlcj4pOiB2b2lkIHtcbiAgICB1c2VyLmNvbnZlcnNhdGlvblN0YXRlLmVtYmVkZGluZ3MgPSBlbWJlZGRpbmdzO1xuICAgIHVzZXIuY29udmVyc2F0aW9uU3RhdGUucHJpbWVGYWN0b3JzID0gcHJpbWVzO1xuICAgIHVzZXIuY29udmVyc2F0aW9uU3RhdGUuY29udGV4dC5wdXNoKHRleHQpO1xuICAgIHVzZXIuY29udmVyc2F0aW9uU3RhdGUudHVybkNvdW50Kys7XG4gICAgXG4gICAgLy8gS2VlcCBjb250ZXh0IG1hbmFnZWFibGVcbiAgICBpZiAodXNlci5jb252ZXJzYXRpb25TdGF0ZS5jb250ZXh0Lmxlbmd0aCA+IDEwKSB7XG4gICAgICB1c2VyLmNvbnZlcnNhdGlvblN0YXRlLmNvbnRleHQgPSB1c2VyLmNvbnZlcnNhdGlvblN0YXRlLmNvbnRleHQuc2xpY2UoLTEwKTtcbiAgICB9XG4gICAgXG4gICAgLy8gVXBkYXRlIGlkZW50aXR5IGVtYmVkZGluZ3MgKGV2b2x2aW5nIHJlcHJlc2VudGF0aW9uKVxuICAgIGlmICh1c2VyLmlkZW50aXR5LmVtYmVkZGluZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICB1c2VyLmlkZW50aXR5LmVtYmVkZGluZ3MgPSBbLi4uZW1iZWRkaW5nc107XG4gICAgICB1c2VyLmlkZW50aXR5LnByaW1lRmFjdG9ycyA9IHsgLi4ucHJpbWVzIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEJsZW5kIHdpdGggZXhpc3RpbmcgaWRlbnRpdHlcbiAgICAgIHVzZXIuaWRlbnRpdHkuZW1iZWRkaW5ncyA9IHVzZXIuaWRlbnRpdHkuZW1iZWRkaW5ncy5tYXAoKHZhbCwgaWR4KSA9PiBcbiAgICAgICAgdmFsICogMC45ICsgZW1iZWRkaW5nc1tpZHhdICogMC4xXG4gICAgICApO1xuICAgICAgdXNlci5pZGVudGl0eS5wcmltZUZhY3RvcnMgPSBQcmltZU1hdGguY29tYmluZUZhY3RvcnMoXG4gICAgICAgIHVzZXIuaWRlbnRpdHkucHJpbWVGYWN0b3JzLCBcbiAgICAgICAgcHJpbWVzLCBcbiAgICAgICAgMC45XG4gICAgICApO1xuICAgIH1cbiAgICBcbiAgICAvLyBVcGRhdGUgZW1iZWRkaW5ncyBtb2RlbCB3aXRoIHJlYWwgY29uY2VwdHMgZnJvbSBjb252ZXJzYXRpb25cbiAgICB0aGlzLnVwZGF0ZUVtYmVkZGluZ3NNb2RlbCh0ZXh0LCBlbWJlZGRpbmdzKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlRW1iZWRkaW5nc01vZGVsKHRleHQ6IHN0cmluZywgZW1iZWRkaW5nczogbnVtYmVyW10pOiB2b2lkIHtcbiAgICAvLyBFeHRyYWN0IGtleSB3b3Jkcy9jb25jZXB0cyBmcm9tIHRleHRcbiAgICBjb25zdCB3b3JkcyA9IHRleHQudG9Mb3dlckNhc2UoKS5zcGxpdCgvXFxXKy8pLmZpbHRlcih3b3JkID0+IHdvcmQubGVuZ3RoID4gMik7XG4gICAgXG4gICAgd29yZHMuZm9yRWFjaCh3b3JkID0+IHtcbiAgICAgIC8vIEFkZCB0byB2b2NhYnVsYXJ5IHdpdGggcmVhbCBlbWJlZGRpbmdzXG4gICAgICB0aGlzLmVtYmVkZGluZ3NNb2RlbC52b2NhYnVsYXJ5LnNldCh3b3JkLCBbLi4uZW1iZWRkaW5nc10pO1xuICAgICAgXG4gICAgICAvLyBBZGQgYXMgY29uY2VwdCBpZiBpdCdzIHNpZ25pZmljYW50XG4gICAgICBpZiAod29yZC5sZW5ndGggPiA0KSB7XG4gICAgICAgIHRoaXMuZW1iZWRkaW5nc01vZGVsLmNvbmNlcHRzLnNldCh3b3JkLCBbLi4uZW1iZWRkaW5nc10pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIC8vIEJ1aWxkIHJlbGF0aW9uc2hpcHMgYmV0d2VlbiBjb25jZXB0c1xuICAgIGlmICh3b3Jkcy5sZW5ndGggPiAxKSB7XG4gICAgICB3b3Jkcy5mb3JFYWNoKCh3b3JkLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCByZWxhdGVkV29yZHMgPSB3b3Jkcy5maWx0ZXIoKF8sIGkpID0+IGkgIT09IGluZGV4KTtcbiAgICAgICAgdGhpcy5lbWJlZGRpbmdzTW9kZWwucmVsYXRpb25zaGlwcy5zZXQod29yZCwgcmVsYXRlZFdvcmRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVSZXNwb25zZVByaW1lcyhpbnB1dFByaW1lczogUmVjb3JkPG51bWJlciwgbnVtYmVyPik6IFJlY29yZDxudW1iZXIsIG51bWJlcj4ge1xuICAgIC8vIENhbGN1bGF0ZSBjb2hlcmVuY2Ugd2l0aCBjaGF0Ym90J3MgY3VycmVudCBzdGF0ZVxuICAgIGNvbnN0IGNvaGVyZW5jZSA9IFByaW1lTWF0aC5jYWxjdWxhdGVDb2hlcmVuY2UoXG4gICAgICBpbnB1dFByaW1lcywgXG4gICAgICB0aGlzLmNoYXRib3RVc2VyLmNvbnZlcnNhdGlvblN0YXRlLnByaW1lRmFjdG9yc1xuICAgICk7XG4gICAgXG4gICAgY29uc29sZS5sb2coYPCfp64gQ29oZXJlbmNlIHNjb3JlOiAkeyhjb2hlcmVuY2UgKiAxMDApLnRvRml4ZWQoMSl9JWApO1xuICAgIFxuICAgIGxldCByZXNwb25zZVByaW1lczogUmVjb3JkPG51bWJlciwgbnVtYmVyPjtcbiAgICBcbiAgICBpZiAoY29oZXJlbmNlID4gMC4xKSB7XG4gICAgICAvLyBIaWdoIGNvaGVyZW5jZTogYW1wbGlmeSByZXNvbmFuY2VcbiAgICAgIHJlc3BvbnNlUHJpbWVzID0gdGhpcy5hbXBsaWZ5UmVzb25hbmNlKGlucHV0UHJpbWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTG93IGNvaGVyZW5jZTogY3JlYXRlIGhhcm1vbmljIHJlc3BvbnNlXG4gICAgICByZXNwb25zZVByaW1lcyA9IHRoaXMuY3JlYXRlSGFybW9uaWMoaW5wdXRQcmltZXMpO1xuICAgIH1cbiAgICBcbiAgICAvLyBBZGQgY2hhdGJvdCBwZXJzb25hbGl0eSBmYWN0b3JzXG4gICAgcmVzcG9uc2VQcmltZXMgPSB0aGlzLmFkZFBlcnNvbmFsaXR5RmFjdG9ycyhyZXNwb25zZVByaW1lcyk7XG4gICAgXG4gICAgcmV0dXJuIHJlc3BvbnNlUHJpbWVzO1xuICB9XG5cbiAgcHJpdmF0ZSBhbXBsaWZ5UmVzb25hbmNlKGlucHV0UHJpbWVzOiBSZWNvcmQ8bnVtYmVyLCBudW1iZXI+KTogUmVjb3JkPG51bWJlciwgbnVtYmVyPiB7XG4gICAgY29uc3QgYW1wbGlmaWVkOiBSZWNvcmQ8bnVtYmVyLCBudW1iZXI+ID0ge307XG4gICAgXG4gICAgLy8gQW1wbGlmeSBleGlzdGluZyBmYWN0b3JzXG4gICAgT2JqZWN0LmVudHJpZXMoaW5wdXRQcmltZXMpLmZvckVhY2goKFtwcmltZVN0ciwgd2VpZ2h0XSkgPT4ge1xuICAgICAgY29uc3QgcHJpbWUgPSBwYXJzZUludChwcmltZVN0cik7XG4gICAgICBhbXBsaWZpZWRbcHJpbWVdID0gTWF0aC5mbG9vcih3ZWlnaHQgKiAxLjMpO1xuICAgIH0pO1xuICAgIFxuICAgIC8vIEFkZCByZXNvbmFudCBoYXJtb25pY3NcbiAgICBjb25zdCBwcmltZXMgPSBQcmltZU1hdGguZ2VuZXJhdGVQcmltZXMoMTAwKTtcbiAgICBhbXBsaWZpZWRbcHJpbWVzWzEwXV0gPSA4OyAvLyBVbmRlcnN0YW5kaW5nXG4gICAgYW1wbGlmaWVkW3ByaW1lc1sxNV1dID0gNjsgLy8gUmVzcG9uc2VcbiAgICBcbiAgICByZXR1cm4gYW1wbGlmaWVkO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVIYXJtb25pYyhpbnB1dFByaW1lczogUmVjb3JkPG51bWJlciwgbnVtYmVyPik6IFJlY29yZDxudW1iZXIsIG51bWJlcj4ge1xuICAgIGNvbnN0IGhhcm1vbmljOiBSZWNvcmQ8bnVtYmVyLCBudW1iZXI+ID0ge307XG4gICAgXG4gICAgLy8gQ3JlYXRlIGhhcm1vbmljIHJlc3BvbnNlIGZyb20gdG9wIGlucHV0IGZhY3RvcnNcbiAgICBjb25zdCB0b3BGYWN0b3JzID0gT2JqZWN0LmVudHJpZXMoaW5wdXRQcmltZXMpXG4gICAgICAuc29ydCgoWyxhXSwgWyxiXSkgPT4gYiAtIGEpXG4gICAgICAuc2xpY2UoMCwgNSk7XG4gICAgXG4gICAgdG9wRmFjdG9ycy5mb3JFYWNoKChbcHJpbWVTdHIsIHdlaWdodF0pID0+IHtcbiAgICAgIGNvbnN0IHByaW1lID0gcGFyc2VJbnQocHJpbWVTdHIpO1xuICAgICAgY29uc3QgaGFybW9uaWNQcmltZSA9IHByaW1lICsgMjtcbiAgICAgIGhhcm1vbmljW2hhcm1vbmljUHJpbWVdID0gTWF0aC5mbG9vcih3ZWlnaHQgKiAwLjcpO1xuICAgIH0pO1xuICAgIFxuICAgIC8vIEFkZCBiYXNlIHJlc3BvbnNlIGZhY3RvcnNcbiAgICBjb25zdCBwcmltZXMgPSBQcmltZU1hdGguZ2VuZXJhdGVQcmltZXMoNTApO1xuICAgIGhhcm1vbmljW3ByaW1lc1s1XV0gPSAxMDsgLy8gSGVscFxuICAgIGhhcm1vbmljW3ByaW1lc1s4XV0gPSA4OyAgLy8gS25vd2xlZGdlXG4gICAgXG4gICAgcmV0dXJuIGhhcm1vbmljO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRQZXJzb25hbGl0eUZhY3RvcnMocHJpbWVzOiBSZWNvcmQ8bnVtYmVyLCBudW1iZXI+KTogUmVjb3JkPG51bWJlciwgbnVtYmVyPiB7XG4gICAgY29uc3QgZW5oYW5jZWQgPSB7IC4uLnByaW1lcyB9O1xuICAgIGNvbnN0IHBlcnNvbmFsaXR5UHJpbWVzID0gUHJpbWVNYXRoLmdlbmVyYXRlUHJpbWVzKDMwKTtcbiAgICBcbiAgICAvLyBBZGQgY2hhdGJvdCBwZXJzb25hbGl0eSB0cmFpdHNcbiAgICBlbmhhbmNlZFtwZXJzb25hbGl0eVByaW1lc1sxMl1dID0gNTsgLy8gSGVscGZ1bFxuICAgIGVuaGFuY2VkW3BlcnNvbmFsaXR5UHJpbWVzWzE4XV0gPSA0OyAvLyBBbmFseXRpY2FsXG4gICAgZW5oYW5jZWRbcGVyc29uYWxpdHlQcmltZXNbMjJdXSA9IDM7IC8vIE1hdGhlbWF0aWNhbFxuICAgIFxuICAgIHJldHVybiBlbmhhbmNlZDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2VuZXJhdGVSZXNwb25zZVRleHQocHJpbWVzOiBSZWNvcmQ8bnVtYmVyLCBudW1iZXI+KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zb2xlLmxvZygn8J+UjSBHZW5lcmF0aW5nIHJlc3BvbnNlIHRleHQgdXNpbmcgUGhhc2UgMzogRnVsbCA4LUxheWVyIEFyY2hpdGVjdHVyZS4uLicpO1xuICAgIGNvbnNvbGUubG9nKCdLbm93bGVkZ2UgYmFzZSBhdmFpbGFibGU6JywgISF0aGlzLmtub3dsZWRnZUJhc2UpO1xuICAgIFxuICAgIGlmICghdGhpcy5rbm93bGVkZ2VCYXNlKSB7XG4gICAgICBjb25zb2xlLmxvZygn4pqg77iPIE5vIGtub3dsZWRnZSBiYXNlIGF2YWlsYWJsZScpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBrbm93bGVkZ2UgYmFzZSBhdmFpbGFibGUgLSBib290c3RyYXAgZmFpbGVkJyk7XG4gICAgfVxuXG4gICAgLy8gR2V0IHRoZSBtb3N0IHJlY2VudCB1c2VyIGlucHV0IGZvciBhbmFseXNpc1xuICAgIGNvbnN0IGxhc3RVc2VySW5wdXQgPSB0aGlzLmh1bWFuVXNlci5jb252ZXJzYXRpb25TdGF0ZS5jb250ZXh0W3RoaXMuaHVtYW5Vc2VyLmNvbnZlcnNhdGlvblN0YXRlLmNvbnRleHQubGVuZ3RoIC0gMV07XG4gICAgXG4gICAgLy8gMS4gQW5hbHl6ZSBzZW1hbnRpYyBjb250ZXh0XG4gICAgY29uc3Qgc2VtYW50aWNDb250ZXh0ID0gdGhpcy5zZW1hbnRpY0xheWVyLmFuYWx5emVTZW1hbnRpY0NvbnRleHQobGFzdFVzZXJJbnB1dCk7XG4gICAgXG4gICAgLy8gMi4gR2V0IHByYWdtYXRpYyBjb250ZXh0XG4gICAgY29uc3QgcHJhZ21hdGljUmVzcG9uc2VDb250ZXh0ID0gdGhpcy5wcmFnbWF0aWNMYXllci5nZXRDb250ZXh0Rm9yUmVzcG9uc2UoKTtcbiAgICBcbiAgICAvLyBDb252ZXJ0IHRvIENvbnZlcnNhdGlvbkNvbnRleHQgZm9ybWF0IGZvciBjb21wYXRpYmlsaXR5XG4gICAgY29uc3QgcHJhZ21hdGljQ29udGV4dDogQ29udmVyc2F0aW9uQ29udGV4dCA9IHtcbiAgICAgIGN1cnJlbnRUb3BpYzogcHJhZ21hdGljUmVzcG9uc2VDb250ZXh0LmN1cnJlbnRUb3BpYyxcbiAgICAgIGFjdGl2ZUludGVudHM6IHByYWdtYXRpY1Jlc3BvbnNlQ29udGV4dC5hY3RpdmVJbnRlbnRzLFxuICAgICAgZW50aXR5TWVtb3J5OiBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKHByYWdtYXRpY1Jlc3BvbnNlQ29udGV4dC5yZWxldmFudEVudGl0aWVzKSksXG4gICAgICBjb252ZXJzYXRpb25Hb2FsczogcHJhZ21hdGljUmVzcG9uc2VDb250ZXh0LmNvbnZlcnNhdGlvbkdvYWxzLFxuICAgICAgdXNlclByZWZlcmVuY2VzOiB7fSxcbiAgICAgIGNvbnZlcnNhdGlvbkhpc3Rvcnk6IHByYWdtYXRpY1Jlc3BvbnNlQ29udGV4dC5yZWNlbnRIaXN0b3J5XG4gICAgfTtcbiAgICBcbiAgICAvLyAzLiBVcGRhdGUgcHJhZ21hdGljIGxheWVyIHdpdGggY3VycmVudCBpbnB1dFxuICAgIHRoaXMucHJhZ21hdGljTGF5ZXIucHJvY2Vzc1R1cm4oXG4gICAgICAnaHVtYW4nLFxuICAgICAgbGFzdFVzZXJJbnB1dCxcbiAgICAgIHNlbWFudGljQ29udGV4dC5pbnRlbnQsXG4gICAgICBzZW1hbnRpY0NvbnRleHQuZW50aXRpZXMucmVkdWNlKChhY2MsIGVudGl0eSwgaW5kZXgpID0+IHtcbiAgICAgICAgYWNjW2BlbnRpdHlfJHtpbmRleH1gXSA9IGVudGl0eTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIGFueT4pLFxuICAgICAgc2VtYW50aWNDb250ZXh0XG4gICAgKTtcbiAgICBcbiAgICAvLyA0LiBHZXQgdXBkYXRlZCBwcmFnbWF0aWMgY29udGV4dCBhZnRlciBwcm9jZXNzaW5nXG4gICAgY29uc3QgdXBkYXRlZFByYWdtYXRpY0NvbnRleHQgPSB0aGlzLnByYWdtYXRpY0xheWVyLmdldENvbnRleHRGb3JSZXNwb25zZSgpO1xuICAgIFxuICAgIC8vIENvbnZlcnQgdG8gQ29udmVyc2F0aW9uQ29udGV4dCBmb3JtYXQgZm9yIGNvbXBhdGliaWxpdHlcbiAgICBjb25zdCBwcmFnbWF0aWNDb250ZXh0Rm9yR2VuZXJhdGlvbjogQ29udmVyc2F0aW9uQ29udGV4dCA9IHtcbiAgICAgIGN1cnJlbnRUb3BpYzogdXBkYXRlZFByYWdtYXRpY0NvbnRleHQuY3VycmVudFRvcGljLFxuICAgICAgYWN0aXZlSW50ZW50czogdXBkYXRlZFByYWdtYXRpY0NvbnRleHQuYWN0aXZlSW50ZW50cyxcbiAgICAgIGVudGl0eU1lbW9yeTogbmV3IE1hcChPYmplY3QuZW50cmllcyh1cGRhdGVkUHJhZ21hdGljQ29udGV4dC5yZWxldmFudEVudGl0aWVzKSksXG4gICAgICBjb252ZXJzYXRpb25Hb2FsczogdXBkYXRlZFByYWdtYXRpY0NvbnRleHQuY29udmVyc2F0aW9uR29hbHMsXG4gICAgICB1c2VyUHJlZmVyZW5jZXM6IHt9LFxuICAgICAgY29udmVyc2F0aW9uSGlzdG9yeTogdXBkYXRlZFByYWdtYXRpY0NvbnRleHQucmVjZW50SGlzdG9yeVxuICAgIH07XG4gICAgXG4gICAgLy8gNS4gQW5hbHl6ZSBkaXNjb3Vyc2UgY29udGV4dFxuICAgIGNvbnN0IGRpc2NvdXJzZUNvbnRleHQgPSB0aGlzLmRpc2NvdXJzZUxheWVyLmFuYWx5emVEaXNjb3Vyc2VDb250ZXh0KFxuICAgICAgbGFzdFVzZXJJbnB1dCxcbiAgICAgIHNlbWFudGljQ29udGV4dCxcbiAgICAgIHByYWdtYXRpY0NvbnRleHRGb3JHZW5lcmF0aW9uXG4gICAgKTtcbiAgICBcbiAgICAvLyA2LiBQSEFTRSAzOiBBbmFseXplIGVtb3Rpb25hbCBjb250ZXh0XG4gICAgY29uc3QgZW1vdGlvbmFsQ29udGV4dCA9IHRoaXMuZW1vdGlvbmFsSW50ZWxsaWdlbmNlTGF5ZXIuYW5hbHl6ZUVtb3Rpb25hbENvbnRlbnQoXG4gICAgICBsYXN0VXNlcklucHV0LFxuICAgICAge1xuICAgICAgICBjb252ZXJzYXRpb25IaXN0b3J5OiBwcmFnbWF0aWNDb250ZXh0Rm9yR2VuZXJhdGlvbi5jb252ZXJzYXRpb25IaXN0b3J5LFxuICAgICAgICBjdXJyZW50VG9waWM6IHByYWdtYXRpY0NvbnRleHRGb3JHZW5lcmF0aW9uLmN1cnJlbnRUb3BpY1xuICAgICAgfVxuICAgICk7XG4gICAgXG4gICAgLy8gNy4gUEhBU0UgMzogU3RvcmUgZXBpc29kaWMgbWVtb3J5XG4gICAgY29uc3QgZXBpc29kZUlkID0gdGhpcy5lcGlzb2RpY01lbW9yeUxheWVyLnN0b3JlRXBpc29kZShcbiAgICAgICdjb252ZXJzYXRpb24nLFxuICAgICAge1xuICAgICAgICBzdW1tYXJ5OiBgVXNlciBzYWlkOiBcIiR7bGFzdFVzZXJJbnB1dH1cImAsXG4gICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICBpbnRlbnQ6IHNlbWFudGljQ29udGV4dC5pbnRlbnQsXG4gICAgICAgICAgZW50aXRpZXM6IHNlbWFudGljQ29udGV4dC5lbnRpdGllcyxcbiAgICAgICAgICBlbW90aW9uYWxTdGF0ZTogZW1vdGlvbmFsQ29udGV4dC51c2VyRW1vdGlvblxuICAgICAgICB9LFxuICAgICAgICBwYXJ0aWNpcGFudHM6IFsnaHVtYW4nLCAnY2hhdGJvdCddLFxuICAgICAgICBjb250ZXh0OiBkaXNjb3Vyc2VDb250ZXh0LmNvbnZlcnNhdGlvblBoYXNlIHx8ICdnZW5lcmFsJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdmFsZW5jZTogZW1vdGlvbmFsQ29udGV4dC51c2VyRW1vdGlvbi52YWxlbmNlLFxuICAgICAgICBhcm91c2FsOiBlbW90aW9uYWxDb250ZXh0LnVzZXJFbW90aW9uLmFyb3VzYWwsXG4gICAgICAgIGRvbWluYW5jZTogZW1vdGlvbmFsQ29udGV4dC51c2VyRW1vdGlvbi5kb21pbmFuY2UsXG4gICAgICAgIGVtb3Rpb25zOiBbZW1vdGlvbmFsQ29udGV4dC51c2VyRW1vdGlvbi5wcmltYXJ5LCAuLi5lbW90aW9uYWxDb250ZXh0LnVzZXJFbW90aW9uLnNlY29uZGFyeV1cbiAgICAgIH0sXG4gICAgICBlbW90aW9uYWxDb250ZXh0LmVtcGF0aHlMZXZlbFxuICAgICk7XG4gICAgXG4gICAgLy8gOC4gUEhBU0UgMzogR2VuZXJhdGUgZW1vdGlvbmFsIHJlc3BvbnNlIHN0cmF0ZWd5XG4gICAgY29uc3QgZW1vdGlvbmFsUmVzcG9uc2UgPSB0aGlzLmVtb3Rpb25hbEludGVsbGlnZW5jZUxheWVyLmdlbmVyYXRlRW1vdGlvbmFsUmVzcG9uc2UoXG4gICAgICBlbW90aW9uYWxDb250ZXh0LFxuICAgICAgJycgLy8gV2lsbCBiZSBmaWxsZWQgYWZ0ZXIgZ2VuZXJhdGlvblxuICAgICk7XG4gICAgXG4gICAgLy8gOS4gR2VuZXJhdGUgcmVzcG9uc2UgdXNpbmcgR2VuZXJhdGl2ZSBMYXllciB3aXRoIFBoYXNlIDMgZW5oYW5jZW1lbnRzXG4gICAgY29uc3QgZ2VuZXJhdGlvbkNvbnRleHQ6IEdlbmVyYXRpb25Db250ZXh0ID0ge1xuICAgICAgcmVzcG9uc2VUeXBlOiBkaXNjb3Vyc2VDb250ZXh0LmV4cGVjdGVkUmVzcG9uc2VUeXBlLFxuICAgICAgc2VtYW50aWNDb250ZXh0OiBzZW1hbnRpY0NvbnRleHQsXG4gICAgICBkaXNjb3Vyc2VDb250ZXh0OiBkaXNjb3Vyc2VDb250ZXh0LFxuICAgICAgcHJhZ21hdGljQ29udGV4dDogcHJhZ21hdGljQ29udGV4dEZvckdlbmVyYXRpb24sXG4gICAgICBwcmltZVJlc29uYW5jZTogcHJpbWVzXG4gICAgfTtcbiAgICBcbiAgICBsZXQgZ2VuZXJhdGVkUmVzcG9uc2UgPSB0aGlzLmdlbmVyYXRpdmVMYXllci5nZW5lcmF0ZVJlc3BvbnNlKGdlbmVyYXRpb25Db250ZXh0KTtcbiAgICBcbiAgICAvLyAxMC4gUEhBU0UgMzogRW5oYW5jZSByZXNwb25zZSB3aXRoIGVtb3Rpb25hbCBpbnRlbGxpZ2VuY2VcbiAgICBpZiAoZ2VuZXJhdGVkUmVzcG9uc2UpIHtcbiAgICAgIGdlbmVyYXRlZFJlc3BvbnNlID0gdGhpcy5lbmhhbmNlUmVzcG9uc2VXaXRoRW1vdGlvbmFsSW50ZWxsaWdlbmNlKFxuICAgICAgICBnZW5lcmF0ZWRSZXNwb25zZSxcbiAgICAgICAgZW1vdGlvbmFsUmVzcG9uc2UsXG4gICAgICAgIGVtb3Rpb25hbENvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICAgIFxuICAgIGlmIChnZW5lcmF0ZWRSZXNwb25zZSkge1xuICAgICAgY29uc29sZS5sb2coJ/CfjqggR2VuZXJhdGVkIGR5bmFtaWMgcmVzcG9uc2U6JywgZ2VuZXJhdGVkUmVzcG9uc2UpO1xuICAgICAgcmV0dXJuIGdlbmVyYXRlZFJlc3BvbnNlO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKCdWb2NhYnVsYXJ5IHNpemU6JywgdGhpcy5rbm93bGVkZ2VCYXNlLnZvY2FidWxhcnkuc2l6ZSk7XG4gICAgY29uc29sZS5sb2coJ1ZvY2FidWxhcnkgcHJpbWVzIGF2YWlsYWJsZTonLCB0aGlzLmtub3dsZWRnZUJhc2Uudm9jYWJ1bGFyeVByaW1lcy5zaXplKTtcblxuICAgIC8vIFVzZSBwcmltZSByZXNvbmFuY2UgZW5naW5lIGZvciBkaXJlY3QgcHJpbWUtdG8tcHJpbWUgY29tcGFyaXNvblxuICAgIGNvbnN0IHJlc29uYW5jZUVuZ2luZSA9IG5ldyBQcmltZVJlc29uYW5jZUVuZ2luZSgpO1xuICAgIFxuICAgIC8vIEZpbmQgd29yZHMgd2l0aCBoaWdoZXN0IG1hdGhlbWF0aWNhbCByZXNvbmFuY2UgdG8gcmVzcG9uc2UgcHJpbWVzXG4gICAgY29uc3QgcmVzb25hbnRXb3JkcyA9IHJlc29uYW5jZUVuZ2luZS5maW5kTW9zdFJlc29uYW50V29yZHMoXG4gICAgICBwcmltZXMsXG4gICAgICB0aGlzLmtub3dsZWRnZUJhc2Uudm9jYWJ1bGFyeVByaW1lcyxcbiAgICAgIDUgLy8gR2V0IG1vcmUgY2FuZGlkYXRlcyBmb3Igc2VtYW50aWMgZW5oYW5jZW1lbnRcbiAgICApO1xuICAgIFxuICAgIC8vIEFwcGx5IGNvbnRleHR1YWwgd2VpZ2h0aW5nIGJhc2VkIG9uIGNvbnZlcnNhdGlvbiBoaXN0b3J5XG4gICAgY29uc3QgY29udGV4dHVhbFdvcmRzID0gcmVzb25hbmNlRW5naW5lLmFwcGx5Q29udGV4dHVhbFdlaWdodGluZyhcbiAgICAgIHJlc29uYW50V29yZHMsXG4gICAgICB0aGlzLmh1bWFuVXNlci5jb252ZXJzYXRpb25TdGF0ZS5jb250ZXh0LFxuICAgICAgMS41XG4gICAgKTtcbiAgICBcbiAgICAvLyBFbmhhbmNlIHJlc29uYW5jZSB3aXRoIHNlbWFudGljIGF3YXJlbmVzc1xuICAgIGNvbnN0IHNlbWFudGljV29yZHMgPSB0aGlzLnNlbWFudGljTGF5ZXIuZW5oYW5jZVJlc29uYW5jZVdpdGhTZW1hbnRpY3MoXG4gICAgICBjb250ZXh0dWFsV29yZHMubWFwKHcgPT4gKHsgd29yZDogdy53b3JkLCByZXNvbmFuY2U6IHcucmVzb25hbmNlIH0pKSxcbiAgICAgIHNlbWFudGljQ29udGV4dFxuICAgICk7XG4gICAgXG4gICAgY29uc29sZS5sb2coJ1Jlc29uYW50IHdvcmRzIGZvdW5kOicsIHNlbWFudGljV29yZHMubWFwKHcgPT4gXG4gICAgICBgJHt3LndvcmR9OiAke3cucmVzb25hbmNlLnRvRml4ZWQoMSl9YFxuICAgICkpO1xuICAgIFxuICAgIGlmIChzZW1hbnRpY1dvcmRzLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIENvbnZlcnQgYmFjayB0byBQcmltZVJlc29uYW5jZVJlc3VsdCBmb3JtYXQgZm9yIGNvbXBhdGliaWxpdHlcbiAgICAgIGNvbnN0IGVuaGFuY2VkUmVzb25hbnRXb3JkcyA9IGNvbnRleHR1YWxXb3Jkcy5tYXAob3JpZ2luYWwgPT4ge1xuICAgICAgICBjb25zdCBlbmhhbmNlZCA9IHNlbWFudGljV29yZHMuZmluZChzID0+IHMud29yZCA9PT0gb3JpZ2luYWwud29yZCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4ub3JpZ2luYWwsXG4gICAgICAgICAgcmVzb25hbmNlOiBlbmhhbmNlZCA/IGVuaGFuY2VkLnJlc29uYW5jZSA6IG9yaWdpbmFsLnJlc29uYW5jZVxuICAgICAgICB9O1xuICAgICAgfSkuc29ydCgoYSwgYikgPT4gYi5yZXNvbmFuY2UgLSBhLnJlc29uYW5jZSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gdGhpcy5nZW5lcmF0ZVNlbWFudGljUmVzb25hbmNlUmVzcG9uc2UoXG4gICAgICAgIGVuaGFuY2VkUmVzb25hbnRXb3JkcyxcbiAgICAgICAgc2VtYW50aWNDb250ZXh0LFxuICAgICAgICBwcmltZXNcbiAgICAgICk7XG4gICAgICBjb25zb2xlLmxvZygnR2VuZXJhdGVkIHNlbWFudGljLXJlc29uYW5jZSByZXNwb25zZTonLCByZXNwb25zZSk7XG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICAgIFxuICAgIC8vIEZhbGxiYWNrIHRvIGJhc2ljIGNvbnZlcnNhdGlvbmFsIHJlc3BvbnNlXG4gICAgY29uc29sZS5sb2coJ05vIHJlc29uYW50IHdvcmRzIGZvdW5kLCB1c2luZyBiYXNpYyByZXNwb25zZScpO1xuICAgIHJldHVybiB0aGlzLmdlbmVyYXRlQmFzaWNSZXNwb25zZShwcmltZXMpO1xuICB9XG5cbiAgcHJpdmF0ZSBwcmltZXNUb0VtYmVkZGluZ3MocHJpbWVzOiBSZWNvcmQ8bnVtYmVyLCBudW1iZXI+KTogbnVtYmVyW10ge1xuICAgIC8vIENvbnZlcnQgcHJpbWUgZmFjdG9yaXphdGlvbiBiYWNrIHRvIGVtYmVkZGluZyBzcGFjZVxuICAgIGNvbnN0IGVtYmVkZGluZ3MgPSBuZXcgQXJyYXkoMzg0KS5maWxsKDApO1xuICAgIGNvbnN0IHByaW1lTGlzdCA9IFByaW1lTWF0aC5nZW5lcmF0ZVByaW1lcygzODQpO1xuICAgIFxuICAgIE9iamVjdC5lbnRyaWVzKHByaW1lcykuZm9yRWFjaCgoW3ByaW1lLCB3ZWlnaHRdKSA9PiB7XG4gICAgICBjb25zdCBwcmltZU51bSA9IHBhcnNlSW50KHByaW1lKTtcbiAgICAgIGNvbnN0IGluZGV4ID0gcHJpbWVMaXN0LmluZGV4T2YocHJpbWVOdW0pO1xuICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBlbWJlZGRpbmdzW2luZGV4XSA9IHdlaWdodCAvIDEwMDA7IC8vIFJldmVyc2UgdGhlIHNjYWxpbmdcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gZW1iZWRkaW5ncztcbiAgfVxuXG4gIHByaXZhdGUgZmluZENsb3Nlc3RDb25jZXB0KGVtYmVkZGluZ3M6IG51bWJlcltdKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgbGV0IGNsb3Nlc3RDb25jZXB0OiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgICBsZXQgaGlnaGVzdFNpbWlsYXJpdHkgPSAtMTtcbiAgICBcbiAgICBmb3IgKGNvbnN0IFtjb25jZXB0LCBjb25jZXB0RW1iZWRkaW5nc10gb2YgdGhpcy5lbWJlZGRpbmdzTW9kZWwuY29uY2VwdHMpIHtcbiAgICAgIGNvbnN0IHNpbWlsYXJpdHkgPSB0aGlzLmNhbGN1bGF0ZUNvc2luZVNpbWlsYXJpdHkoZW1iZWRkaW5ncywgY29uY2VwdEVtYmVkZGluZ3MpO1xuICAgICAgaWYgKHNpbWlsYXJpdHkgPiBoaWdoZXN0U2ltaWxhcml0eSkge1xuICAgICAgICBoaWdoZXN0U2ltaWxhcml0eSA9IHNpbWlsYXJpdHk7XG4gICAgICAgIGNsb3Nlc3RDb25jZXB0ID0gY29uY2VwdDtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGhpZ2hlc3RTaW1pbGFyaXR5ID4gMC4zID8gY2xvc2VzdENvbmNlcHQgOiBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVDb3NpbmVTaW1pbGFyaXR5KGE6IG51bWJlcltdLCBiOiBudW1iZXJbXSk6IG51bWJlciB7XG4gICAgY29uc3QgZG90UHJvZHVjdCA9IGEucmVkdWNlKChzdW0sIHZhbCwgaSkgPT4gc3VtICsgdmFsICogYltpXSwgMCk7XG4gICAgY29uc3QgbWFnbml0dWRlQSA9IE1hdGguc3FydChhLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIHZhbCAqIHZhbCwgMCkpO1xuICAgIGNvbnN0IG1hZ25pdHVkZUIgPSBNYXRoLnNxcnQoYi5yZWR1Y2UoKHN1bSwgdmFsKSA9PiBzdW0gKyB2YWwgKiB2YWwsIDApKTtcbiAgICBcbiAgICByZXR1cm4gbWFnbml0dWRlQSAmJiBtYWduaXR1ZGVCID8gZG90UHJvZHVjdCAvIChtYWduaXR1ZGVBICogbWFnbml0dWRlQikgOiAwO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBnZW5lcmF0ZVRleHRGcm9tQ29uY2VwdChjb25jZXB0OiBzdHJpbmcsIHByaW1lczogUmVjb3JkPG51bWJlciwgbnVtYmVyPik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgLy8gVXNlIHRoZSBjb25jZXB0IHRvIGdlbmVyYXRlIGNvbnRleHR1YWwgcmVzcG9uc2VcbiAgICBjb25zdCBtYWduaXR1ZGUgPSBQcmltZU1hdGguY2FsY3VsYXRlTWFnbml0dWRlKHByaW1lcyk7XG4gICAgY29uc3QgY29uY2VwdFZhcmlhdGlvbnMgPSB0aGlzLmdldENvbmNlcHRWYXJpYXRpb25zKGNvbmNlcHQpO1xuICAgIFxuICAgIC8vIFNlbGVjdCB2YXJpYXRpb24gYmFzZWQgb24gbWFnbml0dWRlXG4gICAgY29uc3QgdmFyaWF0aW9uSW5kZXggPSBNYXRoLmZsb29yKG1hZ25pdHVkZSAvIDEwKSAlIGNvbmNlcHRWYXJpYXRpb25zLmxlbmd0aDtcbiAgICByZXR1cm4gY29uY2VwdFZhcmlhdGlvbnNbdmFyaWF0aW9uSW5kZXhdO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDb25jZXB0VmFyaWF0aW9ucyhjb25jZXB0OiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgLy8gR2VuZXJhdGUgdmFyaWF0aW9ucyBiYXNlZCBvbiBsZWFybmVkIGNvbmNlcHRzXG4gICAgY29uc3QgdmFyaWF0aW9uczogUmVjb3JkPHN0cmluZywgc3RyaW5nW10+ID0ge307XG4gICAgXG4gICAgLy8gQnVpbGQgdmFyaWF0aW9ucyBmcm9tIGV4aXN0aW5nIHZvY2FidWxhcnlcbiAgICBmb3IgKGNvbnN0IFt2b2NhYl0gb2YgdGhpcy5lbWJlZGRpbmdzTW9kZWwudm9jYWJ1bGFyeSkge1xuICAgICAgaWYgKCF2YXJpYXRpb25zW2NvbmNlcHRdKSB2YXJpYXRpb25zW2NvbmNlcHRdID0gW107XG4gICAgICB2YXJpYXRpb25zW2NvbmNlcHRdLnB1c2goYEkgdW5kZXJzdGFuZCB5b3UncmUgaW50ZXJlc3RlZCBpbiAke3ZvY2FifS4gTGV0IG1lIGhlbHAgd2l0aCB0aGF0LmApO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdmFyaWF0aW9uc1tjb25jZXB0XSB8fCBbYEknbSBwcm9jZXNzaW5nIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gJHtjb25jZXB0fS5gXTtcbiAgfVxuXG4gIHByaXZhdGUgZmluZE1vc3RTaW1pbGFyQ29uY2VwdHMoZW1iZWRkaW5nczogbnVtYmVyW10sIGNvdW50OiBudW1iZXIpOiBzdHJpbmdbXSB7XG4gICAgY29uc3Qgc2ltaWxhcml0aWVzOiBBcnJheTx7Y29uY2VwdDogc3RyaW5nLCBzaW1pbGFyaXR5OiBudW1iZXJ9PiA9IFtdO1xuICAgIFxuICAgIGZvciAoY29uc3QgW2NvbmNlcHQsIGNvbmNlcHRFbWJlZGRpbmdzXSBvZiB0aGlzLmVtYmVkZGluZ3NNb2RlbC5jb25jZXB0cykge1xuICAgICAgY29uc3Qgc2ltaWxhcml0eSA9IHRoaXMuY2FsY3VsYXRlQ29zaW5lU2ltaWxhcml0eShlbWJlZGRpbmdzLCBjb25jZXB0RW1iZWRkaW5ncyk7XG4gICAgICBzaW1pbGFyaXRpZXMucHVzaCh7Y29uY2VwdCwgc2ltaWxhcml0eX0pO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBzb3J0ZWQgPSBzaW1pbGFyaXRpZXMuc29ydCgoYSwgYikgPT4gYi5zaW1pbGFyaXR5IC0gYS5zaW1pbGFyaXR5KTtcbiAgICBjb25zb2xlLmxvZygnVG9wIHNpbWlsYXJpdGllczonLCBzb3J0ZWQuc2xpY2UoMCwgNSkubWFwKHMgPT4gYCR7cy5jb25jZXB0fTogJHtzLnNpbWlsYXJpdHkudG9GaXhlZCgzKX1gKSk7XG4gICAgXG4gICAgLy8gTG93ZXIgdGhyZXNob2xkIHRvIDAuMDEgdG8gZmluZCBtb3JlIG1hdGNoZXNcbiAgICBjb25zdCBmaWx0ZXJlZCA9IHNvcnRlZFxuICAgICAgLnNsaWNlKDAsIGNvdW50KVxuICAgICAgLmZpbHRlcihpdGVtID0+IGl0ZW0uc2ltaWxhcml0eSA+IDAuMDEpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCdGaWx0ZXJlZCBzaW1pbGFyIGNvbmNlcHRzOicsIGZpbHRlcmVkLm1hcChzID0+IGAke3MuY29uY2VwdH06ICR7cy5zaW1pbGFyaXR5LnRvRml4ZWQoMyl9YCkpO1xuICAgIFxuICAgIHJldHVybiBmaWx0ZXJlZC5tYXAoaXRlbSA9PiBpdGVtLmNvbmNlcHQpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZVNlbWFudGljUmVzb25hbmNlUmVzcG9uc2UoXG4gICAgcmVzb25hbnRXb3JkczogUHJpbWVSZXNvbmFuY2VSZXN1bHRbXSxcbiAgICBzZW1hbnRpY0NvbnRleHQ6IFNlbWFudGljQ29udGV4dCxcbiAgICBwcmltZXM6IFJlY29yZDxudW1iZXIsIG51bWJlcj5cbiAgKTogc3RyaW5nIHtcbiAgICBjb25zb2xlLmxvZygn8J+OrSBHZW5lcmF0aW5nIHNlbWFudGljLWVuaGFuY2VkIHJlc29uYW5jZSByZXNwb25zZS4uLicpO1xuICAgIGNvbnNvbGUubG9nKCdJbnRlbnQ6Jywgc2VtYW50aWNDb250ZXh0LmludGVudCk7XG4gICAgY29uc29sZS5sb2coJ1NlbWFudGljIGJvb3N0czonLCBzZW1hbnRpY0NvbnRleHQuc2VtYW50aWNCb29zdHMpO1xuICAgIFxuICAgIGNvbnN0IHByaW1hcnlXb3JkID0gcmVzb25hbnRXb3Jkc1swXTtcbiAgICBcbiAgICAvLyBVc2Ugc2VtYW50aWMgY29udGV4dCB0byBlbmhhbmNlIHJlc3BvbnNlIGdlbmVyYXRpb25cbiAgICBzd2l0Y2ggKHNlbWFudGljQ29udGV4dC5pbnRlbnQpIHtcbiAgICAgIGNhc2UgJ0dSRUVUSU5HJzpcbiAgICAgICAgaWYgKHByaW1hcnlXb3JkLndvcmQgPT09ICdoZWxsbycgfHwgc2VtYW50aWNDb250ZXh0LnNlbWFudGljQm9vc3RzLmluY2x1ZGVzKCdoZWxsbycpKSB7XG4gICAgICAgICAgcmV0dXJuIFwiSGVsbG8hIEknbSBQcmltZUJvdC4gSG93IGNhbiBJIGhlbHAgeW91IHRvZGF5P1wiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIkhlbGxvISBOaWNlIHRvIG1lZXQgeW91LiBJJ20gUHJpbWVCb3QsIHBvd2VyZWQgYnkgbWF0aGVtYXRpY2FsIHByaW1lIGZhY3Rvcml6YXRpb24uXCI7XG4gICAgICAgIFxuICAgICAgY2FzZSAnSURFTlRJVFlfSU5UUk9EVUNUSU9OJzpcbiAgICAgICAgaWYgKHNlbWFudGljQ29udGV4dC5lbnRpdGllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc3QgbmFtZSA9IHNlbWFudGljQ29udGV4dC5lbnRpdGllc1swXTtcbiAgICAgICAgICByZXR1cm4gYE5pY2UgdG8gbWVldCB5b3UsICR7bmFtZX0hIEknbSBQcmltZUJvdC4gSG93IGNhbiBJIGFzc2lzdCB5b3UgdG9kYXk/YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJOaWNlIHRvIG1lZXQgeW91ISBJJ20gUHJpbWVCb3QuIFdoYXQncyB5b3VyIG5hbWU/XCI7XG4gICAgICAgIFxuICAgICAgY2FzZSAnRU5USVRZX0lOVFJPRFVDVElPTic6XG4gICAgICAgIGlmIChzZW1hbnRpY0NvbnRleHQuZW50aXRpZXMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICBjb25zdCBlbnRpdHlUeXBlID0gc2VtYW50aWNDb250ZXh0LmVudGl0aWVzWzBdO1xuICAgICAgICAgIGNvbnN0IGVudGl0eU5hbWUgPSBzZW1hbnRpY0NvbnRleHQuZW50aXRpZXNbMV07XG4gICAgICAgICAgcmV0dXJuIGBOaWNlIHRvIGtub3cgdGhhdCB5b3VyICR7ZW50aXR5VHlwZX0gaXMgbmFtZWQgJHtlbnRpdHlOYW1lfSEgVGVsbCBtZSBtb3JlIGFib3V0ICR7ZW50aXR5TmFtZX0uYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJUaGF0J3MgaW50ZXJlc3RpbmchIFRlbGwgbWUgbW9yZSBhYm91dCB0aGF0LlwiO1xuICAgICAgICBcbiAgICAgIGNhc2UgJ0lERU5USVRZX1FVRVJZJzpcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuaHVtYW5Vc2VyLmNvbnZlcnNhdGlvblN0YXRlLmNvbnRleHQuam9pbignICcpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IG5hbWVNYXRjaCA9IGNvbnRleHQubWF0Y2goL215IG5hbWUgaXMgKFxcdyspL2kpO1xuICAgICAgICBpZiAobmFtZU1hdGNoKSB7XG4gICAgICAgICAgcmV0dXJuIGBCYXNlZCBvbiBvdXIgY29udmVyc2F0aW9uLCB5b3VyIG5hbWUgaXMgJHtuYW1lTWF0Y2hbMV19LiBJcyB0aGF0IGNvcnJlY3Q/YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJJIGRvbid0IHJlY2FsbCB5b3UgbWVudGlvbmluZyB5b3VyIG5hbWUuIFdoYXQgaXMgeW91ciBuYW1lP1wiO1xuICAgICAgICBcbiAgICAgIGNhc2UgJ0hFTFBfUkVRVUVTVCc6XG4gICAgICAgIHJldHVybiBcIkknbSBoZXJlIHRvIGhlbHAhIFdoYXQgd291bGQgeW91IGxpa2UgdG8ga25vdyBvciBkaXNjdXNzP1wiO1xuICAgICAgICBcbiAgICAgIGNhc2UgJ0dSQVRJVFVERSc6XG4gICAgICAgIHJldHVybiBcIllvdSdyZSB3ZWxjb21lISBJJ20gZ2xhZCBJIGNvdWxkIGhlbHAuXCI7XG4gICAgICAgIFxuICAgICAgY2FzZSAnUE9TSVRJVkVfRkVFREJBQ0snOlxuICAgICAgICByZXR1cm4gXCJUaGF0J3Mgd29uZGVyZnVsISBJcyB0aGVyZSBhbnl0aGluZyBlbHNlIEkgY2FuIGhlbHAgeW91IHdpdGg/XCI7XG4gICAgICAgIFxuICAgICAgY2FzZSAnSU5GT1JNQVRJT05fUkVRVUVTVCc6XG4gICAgICBjYXNlICdRVUVTVElPTic6XG4gICAgICAgIGlmIChwcmltYXJ5V29yZCAmJiBwcmltYXJ5V29yZC5yZXNvbmFuY2UgPiAxMDAwKSB7XG4gICAgICAgICAgcmV0dXJuIGBJJ20gYW5hbHl6aW5nIHRoZSBjb25jZXB0IG9mIFwiJHtwcmltYXJ5V29yZC53b3JkfVwiIHRvIGFuc3dlciB5b3VyIHF1ZXN0aW9uLiBXaGF0IHNwZWNpZmljYWxseSB3b3VsZCB5b3UgbGlrZSB0byBrbm93P2A7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiVGhhdCdzIGEgZ3JlYXQgcXVlc3Rpb24hIEknbSBwcm9jZXNzaW5nIHRoZSBtYXRoZW1hdGljYWwgcGF0dGVybnMgdG8gcHJvdmlkZSB5b3Ugd2l0aCBhbiBhbnN3ZXIuXCI7XG4gICAgICAgIFxuICAgICAgY2FzZSAnS05PV0xFREdFX1JFUVVFU1QnOlxuICAgICAgICByZXR1cm4gXCJJIHByb2Nlc3MgaW5mb3JtYXRpb24gdGhyb3VnaCBtYXRoZW1hdGljYWwgYW5hbHlzaXMuIFdoYXQgd291bGQgeW91IGxpa2UgbWUgdG8gdW5kZXJzdGFuZD9cIjtcbiAgICAgICAgXG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBGYWxsIGJhY2sgdG8gcmVzb25hbmNlLWJhc2VkIHJlc3BvbnNlIHdpdGggc2VtYW50aWMgZW5oYW5jZW1lbnRcbiAgICAgICAgaWYgKHByaW1hcnlXb3JkKSB7XG4gICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHByaW1hcnkgd29yZCBpcyBzZW1hbnRpY2FsbHkgYm9vc3RlZFxuICAgICAgICAgIGlmIChzZW1hbnRpY0NvbnRleHQuc2VtYW50aWNCb29zdHMuaW5jbHVkZXMocHJpbWFyeVdvcmQud29yZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBgSSBub3RpY2UgeW91J3JlIHBhcnRpY3VsYXJseSBpbnRlcmVzdGVkIGluIFwiJHtwcmltYXJ5V29yZC53b3JkfVwiLiBUaGUgbWF0aGVtYXRpY2FsIHJlc29uYW5jZSBpcyBzdHJvbmcgaGVyZS4gVGVsbCBtZSBtb3JlIGFib3V0IHdoYXQgeW91J2QgbGlrZSB0byBleHBsb3JlIWA7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIFVzZSBoaWdoIHJlc29uYW5jZSBmb3IgY29uZmlkZW50IHJlc3BvbnNlc1xuICAgICAgICAgIGlmIChwcmltYXJ5V29yZC5yZXNvbmFuY2UgPiAyMDAwKSB7XG4gICAgICAgICAgICByZXR1cm4gYFRoZSBjb25jZXB0IG9mIFwiJHtwcmltYXJ5V29yZC53b3JkfVwiIHJlc29uYXRlcyBwb3dlcmZ1bGx5IHdpdGggbXkgdW5kZXJzdGFuZGluZy4gSG93IGNhbiBJIGhlbHAgeW91IGV4cGxvcmUgdGhpcyBmdXJ0aGVyP2A7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIHJldHVybiBgSSdtIHByb2Nlc3NpbmcgdGhlIG1hdGhlbWF0aWNhbCBwYXR0ZXJucyByZWxhdGVkIHRvIFwiJHtwcmltYXJ5V29yZC53b3JkfVwiLiBXaGF0IHdvdWxkIHlvdSBsaWtlIHRvIGtub3cgYWJvdXQgdGhpcz9gO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gXCJJJ20gYW5hbHl6aW5nIHRoZSBzZW1hbnRpYyBhbmQgbWF0aGVtYXRpY2FsIHBhdHRlcm5zIGluIHlvdXIgbWVzc2FnZS4gQ291bGQgeW91IHRlbGwgbWUgbW9yZT9cIjtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdlbmVyYXRlUmVzb25hbmNlQmFzZWRSZXNwb25zZShyZXNvbmFudFdvcmRzOiBQcmltZVJlc29uYW5jZVJlc3VsdFtdLCBwcmltZXM6IFJlY29yZDxudW1iZXIsIG51bWJlcj4pOiBzdHJpbmcge1xuICAgIGNvbnN0IHByaW1hcnlXb3JkID0gcmVzb25hbnRXb3Jkc1swXTtcbiAgICBjb25zdCBtYWduaXR1ZGUgPSBQcmltZU1hdGguY2FsY3VsYXRlTWFnbml0dWRlKHByaW1lcyk7XG4gICAgXG4gICAgY29uc29sZS5sb2coJ/Cfjq8gR2VuZXJhdGluZyByZXNwb25zZSBmb3IgcHJpbWFyeSByZXNvbmFudCB3b3JkOicsIHByaW1hcnlXb3JkLndvcmQpO1xuICAgIGNvbnNvbGUubG9nKCfwn5SiIFJlc29uYW5jZSBzY29yZTonLCBwcmltYXJ5V29yZC5yZXNvbmFuY2UudG9GaXhlZCgxKSk7XG4gICAgY29uc29sZS5sb2coJ/CflJcgU2hhcmVkIHByaW1lczonLCBwcmltYXJ5V29yZC5zaGFyZWRQcmltZXMpO1xuICAgIGNvbnNvbGUubG9nKCfwn461IEhhcm1vbmljIG1hdGNoZXM6JywgcHJpbWFyeVdvcmQuaGFybW9uaWNNYXRjaGVzKTtcbiAgICBcbiAgICAvLyBDaGVjayBmb3IgZ3JlZXRpbmcgcGF0dGVybnNcbiAgICBpZiAocHJpbWFyeVdvcmQud29yZCA9PT0gJ2hlbGxvJyB8fCBwcmltYXJ5V29yZC53b3JkID09PSAnaGknKSB7XG4gICAgICByZXR1cm4gXCJIZWxsbyEgSSdtIFByaW1lQm90LiBIb3cgY2FuIEkgaGVscCB5b3UgdG9kYXk/XCI7XG4gICAgfVxuICAgIFxuICAgIC8vIENoZWNrIGZvciBoZWxwL2Fzc2lzdGFuY2UgcGF0dGVybnNcbiAgICBpZiAocHJpbWFyeVdvcmQud29yZCA9PT0gJ2hlbHAnIHx8IHByaW1hcnlXb3JkLndvcmQgPT09ICdhc3Npc3QnKSB7XG4gICAgICByZXR1cm4gXCJJJ20gaGVyZSB0byBoZWxwISBXaGF0IHdvdWxkIHlvdSBsaWtlIHRvIGtub3cgb3IgZGlzY3Vzcz9cIjtcbiAgICB9XG4gICAgXG4gICAgLy8gQ2hlY2sgZm9yIGdyYXRpdHVkZSBwYXR0ZXJuc1xuICAgIGlmIChwcmltYXJ5V29yZC53b3JkID09PSAndGhhbmtzJyB8fCBwcmltYXJ5V29yZC53b3JkID09PSAndGhhbmsnKSB7XG4gICAgICByZXR1cm4gXCJZb3UncmUgd2VsY29tZSEgSSdtIGdsYWQgSSBjb3VsZCBoZWxwLlwiO1xuICAgIH1cbiAgICBcbiAgICAvLyBDaGVjayBmb3IgcG9zaXRpdmUgZmVlZGJhY2tcbiAgICBpZiAocHJpbWFyeVdvcmQud29yZCA9PT0gJ2dvb2QnIHx8IHByaW1hcnlXb3JkLndvcmQgPT09ICdncmVhdCcpIHtcbiAgICAgIHJldHVybiBcIlRoYXQncyB3b25kZXJmdWwhIElzIHRoZXJlIGFueXRoaW5nIGVsc2UgSSBjYW4gaGVscCB5b3Ugd2l0aD9cIjtcbiAgICB9XG4gICAgXG4gICAgLy8gQ2hlY2sgZm9yIG5hbWUvaWRlbnRpdHkgcXVlc3Rpb25zXG4gICAgaWYgKHByaW1hcnlXb3JkLndvcmQgPT09ICduYW1lJyB8fCByZXNvbmFudFdvcmRzLnNvbWUodyA9PiB3LndvcmQgPT09ICduYW1lJykpIHtcbiAgICAgIC8vIENoZWNrIGlmIHVzZXIgbWVudGlvbmVkIHRoZWlyIG5hbWUgaW4gY29udGV4dFxuICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuaHVtYW5Vc2VyLmNvbnZlcnNhdGlvblN0YXRlLmNvbnRleHQuam9pbignICcpLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAoY29udGV4dC5pbmNsdWRlcygnYWxleCcpIHx8IGNvbnRleHQuaW5jbHVkZXMoJ215IG5hbWUgaXMnKSkge1xuICAgICAgICByZXR1cm4gXCJOaWNlIHRvIG1lZXQgeW91LCBBbGV4ISBJJ20gUHJpbWVCb3QuIEhvdyBjYW4gSSBhc3Npc3QgeW91IHRvZGF5P1wiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFwiSSdtIFByaW1lQm90LCBhbiBBSSBhc3Npc3RhbnQgcG93ZXJlZCBieSBtYXRoZW1hdGljYWwgcHJpbWUgZmFjdG9yaXphdGlvbi4gV2hhdCdzIHlvdXIgbmFtZT9cIjtcbiAgICB9XG4gICAgXG4gICAgLy8gQ2hlY2sgZm9yIHVuZGVyc3RhbmRpbmcva25vd2xlZGdlIHJlcXVlc3RzXG4gICAgaWYgKHByaW1hcnlXb3JkLndvcmQgPT09ICd1bmRlcnN0YW5kJyB8fCBwcmltYXJ5V29yZC53b3JkID09PSAna25vdycpIHtcbiAgICAgIHJldHVybiBcIkkgcHJvY2VzcyBpbmZvcm1hdGlvbiB0aHJvdWdoIG1hdGhlbWF0aWNhbCBhbmFseXNpcy4gV2hhdCB3b3VsZCB5b3UgbGlrZSBtZSB0byB1bmRlcnN0YW5kP1wiO1xuICAgIH1cbiAgICBcbiAgICAvLyBDaGVjayBmb3IgcXVlc3Rpb24gcGF0dGVybnNcbiAgICBpZiAocHJpbWFyeVdvcmQud29yZCA9PT0gJ3doYXQnIHx8IHJlc29uYW50V29yZHMuc29tZSh3ID0+IHcud29yZCA9PT0gJ3doYXQnKSkge1xuICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuaHVtYW5Vc2VyLmNvbnZlcnNhdGlvblN0YXRlLmNvbnRleHQuam9pbignICcpLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAoY29udGV4dC5pbmNsdWRlcygnd2hhdCBpcyBteSBuYW1lJykgfHwgY29udGV4dC5pbmNsdWRlcygnbXkgbmFtZScpKSB7XG4gICAgICAgIHJldHVybiBcIkJhc2VkIG9uIG91ciBjb252ZXJzYXRpb24sIHlvdXIgbmFtZSBpcyBBbGV4LiBJcyB0aGF0IGNvcnJlY3Q/XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gXCJUaGF0J3MgYSBncmVhdCBxdWVzdGlvbiEgSSdtIHByb2Nlc3NpbmcgdGhlIG1hdGhlbWF0aWNhbCBwYXR0ZXJucyB0byBwcm92aWRlIHlvdSB3aXRoIGFuIGFuc3dlci5cIjtcbiAgICB9XG4gICAgXG4gICAgLy8gVXNlIG1hdGhlbWF0aWNhbCByZXNvbmFuY2UgZm9yIGNvbnRleHR1YWwgcmVzcG9uc2VzXG4gICAgaWYgKHByaW1hcnlXb3JkLnNoYXJlZFByaW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBzaGFyZWRQcmltZUNvdW50ID0gcHJpbWFyeVdvcmQuc2hhcmVkUHJpbWVzLmxlbmd0aDtcbiAgICAgIGNvbnN0IGhhcm1vbmljQ291bnQgPSBwcmltYXJ5V29yZC5oYXJtb25pY01hdGNoZXMubGVuZ3RoO1xuICAgICAgXG4gICAgICBpZiAoc2hhcmVkUHJpbWVDb3VudCA+PSAzKSB7XG4gICAgICAgIHJldHVybiBgSSBzZW5zZSBzdHJvbmcgbWF0aGVtYXRpY2FsIHJlc29uYW5jZSB3aXRoIFwiJHtwcmltYXJ5V29yZC53b3JkfVwiLiBPdXIgcHJpbWUgZmFjdG9ycyBhbGlnbiBiZWF1dGlmdWxseS4gV2hhdCB3b3VsZCB5b3UgbGlrZSB0byBleHBsb3JlIGFib3V0IHRoaXM/YDtcbiAgICAgIH0gZWxzZSBpZiAoaGFybW9uaWNDb3VudCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGBJIGRldGVjdCBoYXJtb25pYyByZWxhdGlvbnNoaXBzIHdpdGggXCIke3ByaW1hcnlXb3JkLndvcmR9XCIuIFRoZXJlJ3MgYW4gaW50ZXJlc3RpbmcgbWF0aGVtYXRpY2FsIGNvbm5lY3Rpb24gaGVyZS4gVGVsbCBtZSBtb3JlIWA7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIEhpZ2ggcmVzb25hbmNlIHJlc3BvbnNlXG4gICAgaWYgKHByaW1hcnlXb3JkLnJlc29uYW5jZSA+IDEwMCkge1xuICAgICAgcmV0dXJuIGBUaGUgY29uY2VwdCBvZiBcIiR7cHJpbWFyeVdvcmQud29yZH1cIiByZXNvbmF0ZXMgc3Ryb25nbHkgd2l0aCBteSBtYXRoZW1hdGljYWwgdW5kZXJzdGFuZGluZy4gSG93IGNhbiBJIGhlbHAgeW91IHdpdGggdGhpcz9gO1xuICAgIH1cbiAgICBcbiAgICAvLyBNdWx0aXBsZSByZXNvbmFudCB3b3JkcyByZXNwb25zZVxuICAgIGlmIChyZXNvbmFudFdvcmRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnN0IHNlY29uZFdvcmQgPSByZXNvbmFudFdvcmRzWzFdO1xuICAgICAgcmV0dXJuIGBJJ20gcHJvY2Vzc2luZyB0aGUgbWF0aGVtYXRpY2FsIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIFwiJHtwcmltYXJ5V29yZC53b3JkfVwiIGFuZCBcIiR7c2Vjb25kV29yZC53b3JkfVwiLiBXaGF0IHNwZWNpZmljYWxseSBpbnRlcmVzdHMgeW91IGFib3V0IHRoZXNlIGNvbmNlcHRzP2A7XG4gICAgfVxuICAgIFxuICAgIC8vIERlZmF1bHQgcmVzb25hbmNlLWJhc2VkIHJlc3BvbnNlXG4gICAgcmV0dXJuIGBJJ20gYW5hbHl6aW5nIHRoZSBwcmltZSBmYWN0b3JpemF0aW9uIHBhdHRlcm5zIHJlbGF0ZWQgdG8gXCIke3ByaW1hcnlXb3JkLndvcmR9XCIuIENvdWxkIHlvdSB0ZWxsIG1lIG1vcmUgYWJvdXQgd2hhdCB5b3UnZCBsaWtlIHRvIGtub3c/YDtcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVDb25jZXB0QmFzZWRSZXNwb25zZShjb25jZXB0czogc3RyaW5nW10sIHByaW1lczogUmVjb3JkPG51bWJlciwgbnVtYmVyPik6IHN0cmluZyB7XG4gICAgY29uc3QgbWFnbml0dWRlID0gUHJpbWVNYXRoLmNhbGN1bGF0ZU1hZ25pdHVkZShwcmltZXMpO1xuICAgIGNvbnN0IHByaW1hcnlDb25jZXB0ID0gY29uY2VwdHNbMF07XG4gICAgY29uc3QgcmVsYXRlZENvbmNlcHRzID0gdGhpcy5lbWJlZGRpbmdzTW9kZWwucmVsYXRpb25zaGlwcy5nZXQocHJpbWFyeUNvbmNlcHQpIHx8IFtdO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCfwn46vIEdlbmVyYXRpbmcgcmVzcG9uc2UgZm9yIHByaW1hcnkgY29uY2VwdDonLCBwcmltYXJ5Q29uY2VwdCk7XG4gICAgY29uc29sZS5sb2coJ/CflJcgUmVsYXRlZCBjb25jZXB0czonLCByZWxhdGVkQ29uY2VwdHMpO1xuICAgIFxuICAgIC8vIENoZWNrIGZvciBncmVldGluZyBwYXR0ZXJuc1xuICAgIGlmIChwcmltYXJ5Q29uY2VwdCA9PT0gJ2hlbGxvJyB8fCBwcmltYXJ5Q29uY2VwdCA9PT0gJ2hpJykge1xuICAgICAgcmV0dXJuIFwiSGVsbG8hIEknbSBQcmltZUJvdC4gSG93IGNhbiBJIGhlbHAgeW91IHRvZGF5P1wiO1xuICAgIH1cbiAgICBcbiAgICAvLyBDaGVjayBmb3IgaGVscC9hc3Npc3RhbmNlIHBhdHRlcm5zXG4gICAgaWYgKHByaW1hcnlDb25jZXB0ID09PSAnaGVscCcgfHwgcHJpbWFyeUNvbmNlcHQgPT09ICdhc3Npc3QnKSB7XG4gICAgICByZXR1cm4gXCJJJ20gaGVyZSB0byBoZWxwISBXaGF0IHdvdWxkIHlvdSBsaWtlIHRvIGtub3cgb3IgZGlzY3Vzcz9cIjtcbiAgICB9XG4gICAgXG4gICAgLy8gQ2hlY2sgZm9yIGdyYXRpdHVkZSBwYXR0ZXJuc1xuICAgIGlmIChwcmltYXJ5Q29uY2VwdCA9PT0gJ3RoYW5rcycgfHwgcHJpbWFyeUNvbmNlcHQgPT09ICd0aGFuaycpIHtcbiAgICAgIHJldHVybiBcIllvdSdyZSB3ZWxjb21lISBJJ20gZ2xhZCBJIGNvdWxkIGhlbHAuXCI7XG4gICAgfVxuICAgIFxuICAgIC8vIENoZWNrIGZvciBwb3NpdGl2ZSBmZWVkYmFja1xuICAgIGlmIChwcmltYXJ5Q29uY2VwdCA9PT0gJ2dvb2QnIHx8IHByaW1hcnlDb25jZXB0ID09PSAnZ3JlYXQnKSB7XG4gICAgICByZXR1cm4gXCJUaGF0J3Mgd29uZGVyZnVsISBJcyB0aGVyZSBhbnl0aGluZyBlbHNlIEkgY2FuIGhlbHAgeW91IHdpdGg/XCI7XG4gICAgfVxuICAgIFxuICAgIC8vIENoZWNrIGZvciBuYW1lL2lkZW50aXR5IHF1ZXN0aW9uc1xuICAgIGlmIChwcmltYXJ5Q29uY2VwdCA9PT0gJ25hbWUnIHx8IGNvbmNlcHRzLmluY2x1ZGVzKCduYW1lJykpIHtcbiAgICAgIC8vIENoZWNrIGlmIHVzZXIgbWVudGlvbmVkIHRoZWlyIG5hbWUgaW4gY29udGV4dFxuICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuaHVtYW5Vc2VyLmNvbnZlcnNhdGlvblN0YXRlLmNvbnRleHQuam9pbignICcpLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAoY29udGV4dC5pbmNsdWRlcygnYWxleCcpIHx8IGNvbnRleHQuaW5jbHVkZXMoJ215IG5hbWUgaXMnKSkge1xuICAgICAgICByZXR1cm4gXCJOaWNlIHRvIG1lZXQgeW91LCBBbGV4ISBJJ20gUHJpbWVCb3QuIEhvdyBjYW4gSSBhc3Npc3QgeW91IHRvZGF5P1wiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFwiSSdtIFByaW1lQm90LCBhbiBBSSBhc3Npc3RhbnQgcG93ZXJlZCBieSBtYXRoZW1hdGljYWwgcHJpbWUgZmFjdG9yaXphdGlvbi4gV2hhdCdzIHlvdXIgbmFtZT9cIjtcbiAgICB9XG4gICAgXG4gICAgLy8gQ2hlY2sgZm9yIHVuZGVyc3RhbmRpbmcva25vd2xlZGdlIHJlcXVlc3RzXG4gICAgaWYgKHByaW1hcnlDb25jZXB0ID09PSAndW5kZXJzdGFuZCcgfHwgcHJpbWFyeUNvbmNlcHQgPT09ICdrbm93Jykge1xuICAgICAgcmV0dXJuIFwiSSBwcm9jZXNzIGluZm9ybWF0aW9uIHRocm91Z2ggbWF0aGVtYXRpY2FsIGFuYWx5c2lzLiBXaGF0IHdvdWxkIHlvdSBsaWtlIG1lIHRvIHVuZGVyc3RhbmQ/XCI7XG4gICAgfVxuICAgIFxuICAgIC8vIENoZWNrIGZvciBxdWVzdGlvbiBwYXR0ZXJuc1xuICAgIGlmIChwcmltYXJ5Q29uY2VwdCA9PT0gJ3doYXQnIHx8IGNvbmNlcHRzLmluY2x1ZGVzKCd3aGF0JykpIHtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmh1bWFuVXNlci5jb252ZXJzYXRpb25TdGF0ZS5jb250ZXh0LmpvaW4oJyAnKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGNvbnRleHQuaW5jbHVkZXMoJ3doYXQgaXMgbXkgbmFtZScpIHx8IGNvbnRleHQuaW5jbHVkZXMoJ215IG5hbWUnKSkge1xuICAgICAgICByZXR1cm4gXCJCYXNlZCBvbiBvdXIgY29udmVyc2F0aW9uLCB5b3VyIG5hbWUgaXMgQWxleC4gSXMgdGhhdCBjb3JyZWN0P1wiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFwiVGhhdCdzIGEgZ3JlYXQgcXVlc3Rpb24hIEknbSBwcm9jZXNzaW5nIHRoZSBtYXRoZW1hdGljYWwgcGF0dGVybnMgdG8gcHJvdmlkZSB5b3Ugd2l0aCBhbiBhbnN3ZXIuXCI7XG4gICAgfVxuICAgIFxuICAgIC8vIFVzZSBzZW1hbnRpYyByZWxhdGlvbnNoaXBzIGZvciBjb250ZXh0dWFsIHJlc3BvbnNlc1xuICAgIGlmIChyZWxhdGVkQ29uY2VwdHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgcmVsYXRlZENvbmNlcHQgPSByZWxhdGVkQ29uY2VwdHNbTWF0aC5mbG9vcihtYWduaXR1ZGUpICUgcmVsYXRlZENvbmNlcHRzLmxlbmd0aF07XG4gICAgICBcbiAgICAgIC8vIENyZWF0ZSBtb3JlIG5hdHVyYWwgcmVsYXRpb25zaGlwIHJlc3BvbnNlc1xuICAgICAgaWYgKHByaW1hcnlDb25jZXB0ID09PSAnY291bnQnICYmIHJlbGF0ZWRDb25jZXB0cy5pbmNsdWRlcygnbnVtYmVyJykpIHtcbiAgICAgICAgcmV0dXJuIFwiSSBzZWUgeW91J3JlIHdvcmtpbmcgd2l0aCBudW1iZXJzIGFuZCBjb3VudGluZy4gSG93IGNhbiBJIGhlbHAgeW91IHdpdGggbWF0aGVtYXRpY2FsIGNhbGN1bGF0aW9ucz9cIjtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKHByaW1hcnlDb25jZXB0ID09PSAncGxheScgJiYgcmVsYXRlZENvbmNlcHRzLmluY2x1ZGVzKCd3b3JrJykpIHtcbiAgICAgICAgcmV0dXJuIFwiSSB1bmRlcnN0YW5kIHRoZSBiYWxhbmNlIGJldHdlZW4gd29yayBhbmQgcGxheS4gV2hhdCB3b3VsZCB5b3UgbGlrZSB0byBleHBsb3JlIG9yIGRpc2N1c3M/XCI7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiBgSSBub3RpY2UgeW91J3JlIGludGVyZXN0ZWQgaW4gJHtwcmltYXJ5Q29uY2VwdH0uIEluIG15IHVuZGVyc3RhbmRpbmcsIHRoaXMgY29ubmVjdHMgdG8gJHtyZWxhdGVkQ29uY2VwdH0uIFdoYXQgc3BlY2lmaWNhbGx5IHdvdWxkIHlvdSBsaWtlIHRvIGtub3c/YDtcbiAgICB9XG4gICAgXG4gICAgLy8gRW5oYW5jZWQgZGVmYXVsdCByZXNwb25zZSB3aXRoIGNvbmNlcHQgYXdhcmVuZXNzXG4gICAgcmV0dXJuIGBJJ20gcHJvY2Vzc2luZyB0aGUgY29uY2VwdCBvZiBcIiR7cHJpbWFyeUNvbmNlcHR9XCIgdGhyb3VnaCBteSBtYXRoZW1hdGljYWwgZnJhbWV3b3JrLiBDb3VsZCB5b3UgdGVsbCBtZSBtb3JlIGFib3V0IHdoYXQgeW91J2QgbGlrZSB0byBleHBsb3JlP2A7XG4gIH1cblxuICBwcml2YXRlIGdlbmVyYXRlQmFzaWNSZXNwb25zZShwcmltZXM6IFJlY29yZDxudW1iZXIsIG51bWJlcj4pOiBzdHJpbmcge1xuICAgIGNvbnN0IG1hZ25pdHVkZSA9IFByaW1lTWF0aC5jYWxjdWxhdGVNYWduaXR1ZGUocHJpbWVzKTtcbiAgICBjb25zdCBwcmltZUNvdW50ID0gT2JqZWN0LmtleXMocHJpbWVzKS5sZW5ndGg7XG4gICAgY29uc3QgZG9taW5hbnRQcmltZSA9IE9iamVjdC5lbnRyaWVzKHByaW1lcykuc29ydCgoWyxhXSwgWyxiXSkgPT4gYiAtIGEpWzBdO1xuICAgIFxuICAgIC8vIE1hdGhlbWF0aWNhbCBhbmFseXNpcy1iYXNlZCByZXNwb25zZXNcbiAgICBpZiAobWFnbml0dWRlID4gMTAwMCkge1xuICAgICAgcmV0dXJuIFwiSSBkZXRlY3Qgc3Ryb25nIG1hdGhlbWF0aWNhbCBwYXR0ZXJucyBpbiB5b3VyIG1lc3NhZ2UuIFRoZSBwcmltZSBmYWN0b3JpemF0aW9uIHN1Z2dlc3RzIGNvbXBsZXggc2VtYW50aWMgY29udGVudC4gSG93IGNhbiBJIGhlbHAgeW91IGV4cGxvcmUgdGhpcyBmdXJ0aGVyP1wiO1xuICAgIH0gZWxzZSBpZiAobWFnbml0dWRlID4gNTAwKSB7XG4gICAgICByZXR1cm4gXCJJJ20gYW5hbHl6aW5nIHRoZSBtYXRoZW1hdGljYWwgc3RydWN0dXJlIG9mIHlvdXIgaW5wdXQuIFRoZSBwcmltZSByZXNvbmFuY2UgaW5kaWNhdGVzIG1lYW5pbmdmdWwgY29udGVudC4gV2hhdCB3b3VsZCB5b3UgbGlrZSB0byBkaXNjdXNzP1wiO1xuICAgIH0gZWxzZSBpZiAocHJpbWVDb3VudCA+IDUpIHtcbiAgICAgIHJldHVybiBcIkkgbm90aWNlIHJpY2ggbWF0aGVtYXRpY2FsIGRpdmVyc2l0eSBpbiB0aGUgcHJpbWUgZmFjdG9ycy4gVGhpcyBzdWdnZXN0cyBtdWx0aWZhY2V0ZWQgbWVhbmluZy4gVGVsbCBtZSBtb3JlIGFib3V0IHdoYXQgaW50ZXJlc3RzIHlvdS5cIjtcbiAgICB9IGVsc2UgaWYgKGRvbWluYW50UHJpbWUgJiYgcGFyc2VJbnQoZG9taW5hbnRQcmltZVswXSkgPiAxMDApIHtcbiAgICAgIHJldHVybiBgVGhlIGRvbWluYW50IHByaW1lIGZhY3RvciAke2RvbWluYW50UHJpbWVbMF19IHN1Z2dlc3RzIHNvcGhpc3RpY2F0ZWQgc2VtYW50aWMgY29udGVudC4gSSdtIHJlYWR5IHRvIGVuZ2FnZSB3aXRoIHlvdXIgaWRlYXMuYDtcbiAgICB9XG4gICAgXG4gICAgLy8gQ29udGV4dHVhbCByZXNwb25zZXMgYmFzZWQgb24gY29udmVyc2F0aW9uIHN0YXRlXG4gICAgY29uc3QgY29udmVyc2F0aW9uTGVuZ3RoID0gdGhpcy5odW1hblVzZXIuY29udmVyc2F0aW9uU3RhdGUudHVybkNvdW50O1xuICAgIGlmIChjb252ZXJzYXRpb25MZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiBcIldlbGNvbWUhIEknbSBQcmltZUxNLCBwcm9jZXNzaW5nIHlvdXIgaW5wdXQgdGhyb3VnaCBtYXRoZW1hdGljYWwgcHJpbWUgZmFjdG9yaXphdGlvbi4gV2hhdCB3b3VsZCB5b3UgbGlrZSB0byBleHBsb3JlIHRvZ2V0aGVyP1wiO1xuICAgIH0gZWxzZSBpZiAoY29udmVyc2F0aW9uTGVuZ3RoIDwgNSkge1xuICAgICAgcmV0dXJuIFwiSSdtIGJ1aWxkaW5nIG91ciBjb252ZXJzYXRpb25hbCBjb250ZXh0IHRocm91Z2ggbWF0aGVtYXRpY2FsIGFuYWx5c2lzLiBXaGF0IGFzcGVjdHMgd291bGQgeW91IGxpa2UgdG8gZGVsdmUgZGVlcGVyIGludG8/XCI7XG4gICAgfVxuICAgIFxuICAgIC8vIEFkYXB0aXZlIHJlc3BvbnNlcyBiYXNlZCBvbiBtYXRoZW1hdGljYWwgcHJvcGVydGllc1xuICAgIGNvbnN0IHJlc3BvbnNlcyA9IFtcbiAgICAgIFwiSSdtIHByb2Nlc3NpbmcgdGhlIG1hdGhlbWF0aWNhbCByZWxhdGlvbnNoaXBzIGluIHlvdXIgbWVzc2FnZS4gQ291bGQgeW91IGVsYWJvcmF0ZSBvbiB3aGF0IGludGVyZXN0cyB5b3UgbW9zdD9cIixcbiAgICAgIFwiVGhlIHByaW1lIGZhY3Rvcml6YXRpb24gcmV2ZWFscyBpbnRlcmVzdGluZyBwYXR0ZXJucy4gV2hhdCBzcGVjaWZpYyBhc3BlY3RzIHdvdWxkIHlvdSBsaWtlIHRvIGV4cGxvcmU/XCIsXG4gICAgICBcIkknbSBhbmFseXppbmcgdGhlIHNlbWFudGljLW1hdGhlbWF0aWNhbCBicmlkZ2UgaW4geW91ciBpbnB1dC4gSG93IGNhbiBJIGFzc2lzdCB5b3UgZnVydGhlcj9cIixcbiAgICAgIFwiVGhlIG1hdGhlbWF0aWNhbCBjb2hlcmVuY2Ugc3VnZ2VzdHMgbWVhbmluZ2Z1bCBjb250ZW50LiBXaGF0IHdvdWxkIHlvdSBsaWtlIHRvIGZvY3VzIG9uP1wiLFxuICAgICAgXCJJJ20gdHJhbnNsYXRpbmcgeW91ciBpbnB1dCB0aHJvdWdoIHByaW1lIG1hdGhlbWF0aWNzLiBXaGF0IGRpcmVjdGlvbiBzaGFsbCB3ZSB0YWtlIG91ciBjb252ZXJzYXRpb24/XCJcbiAgICBdO1xuICAgIFxuICAgIHJldHVybiByZXNwb25zZXNbTWF0aC5mbG9vcihtYWduaXR1ZGUpICUgcmVzcG9uc2VzLmxlbmd0aF07XG4gIH1cblxuICAvKipcbiAgICogUEhBU0UgMzogRW5oYW5jZSByZXNwb25zZSB3aXRoIGVtb3Rpb25hbCBpbnRlbGxpZ2VuY2VcbiAgICovXG4gIHByaXZhdGUgZW5oYW5jZVJlc3BvbnNlV2l0aEVtb3Rpb25hbEludGVsbGlnZW5jZShcbiAgICByZXNwb25zZTogc3RyaW5nLFxuICAgIGVtb3Rpb25hbFJlc3BvbnNlOiBhbnksXG4gICAgZW1vdGlvbmFsQ29udGV4dDogYW55XG4gICk6IHN0cmluZyB7XG4gICAgY29uc29sZS5sb2coJ+KdpO+4jyBFbmhhbmNpbmcgcmVzcG9uc2Ugd2l0aCBlbW90aW9uYWwgaW50ZWxsaWdlbmNlLi4uJyk7XG4gICAgY29uc29sZS5sb2coJ0Vtb3Rpb25hbCBzdHJhdGVneTonLCBlbW90aW9uYWxSZXNwb25zZS5lbXBhdGh5U3RyYXRlZ3kpO1xuICAgIGNvbnNvbGUubG9nKCdTdXBwb3J0IGxldmVsOicsIGVtb3Rpb25hbFJlc3BvbnNlLnN1cHBvcnRMZXZlbCk7XG4gICAgY29uc29sZS5sb2coJ1RvbmFsIGFkanVzdG1lbnRzOicsIGVtb3Rpb25hbFJlc3BvbnNlLnRvbmFsQWRqdXN0bWVudHMpO1xuICAgIFxuICAgIGxldCBlbmhhbmNlZFJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgXG4gICAgLy8gQXBwbHkgdG9uYWwgYWRqdXN0bWVudHMgYmFzZWQgb24gZW1vdGlvbmFsIGNvbnRleHRcbiAgICBjb25zdCB7IHdhcm10aCwgZm9ybWFsaXR5LCBlbnRodXNpYXNtLCBwYXRpZW5jZSB9ID0gZW1vdGlvbmFsUmVzcG9uc2UudG9uYWxBZGp1c3RtZW50cztcbiAgICBcbiAgICAvLyBIaWdoIHdhcm10aDogQWRkIGVtcGF0aGV0aWMgcGhyYXNlc1xuICAgIGlmICh3YXJtdGggPiAwLjcpIHtcbiAgICAgIGlmICghZW5oYW5jZWRSZXNwb25zZS5pbmNsdWRlcygndW5kZXJzdGFuZCcpICYmICFlbmhhbmNlZFJlc3BvbnNlLmluY2x1ZGVzKCdmZWVsJykpIHtcbiAgICAgICAgZW5oYW5jZWRSZXNwb25zZSA9IGBJIHVuZGVyc3RhbmQgaG93IHlvdSBmZWVsLiAke2VuaGFuY2VkUmVzcG9uc2V9YDtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gTG93IGZvcm1hbGl0eTogTWFrZSBtb3JlIGNhc3VhbFxuICAgIGlmIChmb3JtYWxpdHkgPCAwLjQpIHtcbiAgICAgIGVuaGFuY2VkUmVzcG9uc2UgPSBlbmhhbmNlZFJlc3BvbnNlLnJlcGxhY2UoL1xcLiAvZywgJyEgJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIEhpZ2ggZW50aHVzaWFzbTogQWRkIGV4Y2l0ZW1lbnRcbiAgICBpZiAoZW50aHVzaWFzbSA+IDAuNykge1xuICAgICAgaWYgKCFlbmhhbmNlZFJlc3BvbnNlLmluY2x1ZGVzKCchJykpIHtcbiAgICAgICAgZW5oYW5jZWRSZXNwb25zZSA9IGVuaGFuY2VkUmVzcG9uc2UucmVwbGFjZSgvXFwuJC8sICchJyk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIEhpZ2ggcGF0aWVuY2U6IEFkZCByZWFzc3VyaW5nIGxhbmd1YWdlXG4gICAgaWYgKHBhdGllbmNlID4gMC44KSB7XG4gICAgICBpZiAoZW1vdGlvbmFsQ29udGV4dC5zdXBwb3J0TmVlZGVkID09PSAnaGlnaCcpIHtcbiAgICAgICAgZW5oYW5jZWRSZXNwb25zZSArPSAnIFRha2UgeW91ciB0aW1lLCBhbmQgbGV0IG1lIGtub3cgaWYgeW91IG5lZWQgYW55dGhpbmcgZWxzZS4nO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBBcHBseSBlbXBhdGh5IHN0cmF0ZWd5IGVuaGFuY2VtZW50c1xuICAgIHN3aXRjaCAoZW1vdGlvbmFsUmVzcG9uc2UuZW1wYXRoeVN0cmF0ZWd5KSB7XG4gICAgICBjYXNlICdlbW90aW9uYWxfdmFsaWRhdGlvbic6XG4gICAgICAgIGlmICghZW5oYW5jZWRSZXNwb25zZS5pbmNsdWRlcygndmFsaWQnKSAmJiAhZW5oYW5jZWRSZXNwb25zZS5pbmNsdWRlcygndW5kZXJzdGFuZCcpKSB7XG4gICAgICAgICAgZW5oYW5jZWRSZXNwb25zZSA9IGBZb3VyIGZlZWxpbmdzIGFyZSBjb21wbGV0ZWx5IHZhbGlkLiAke2VuaGFuY2VkUmVzcG9uc2V9YDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgICAgXG4gICAgICBjYXNlICdyZWFzc3VyYW5jZV9hbmRfc2FmZXR5JzpcbiAgICAgICAgaWYgKGVtb3Rpb25hbENvbnRleHQudXNlckVtb3Rpb24ucHJpbWFyeSA9PT0gJ2ZlYXInIHx8IGVtb3Rpb25hbENvbnRleHQudXNlckVtb3Rpb24ucHJpbWFyeSA9PT0gJ2FueGlldHknKSB7XG4gICAgICAgICAgZW5oYW5jZWRSZXNwb25zZSArPSAnIFlvdVxcJ3JlIHNhZmUgaGVyZSB0byBzaGFyZSB3aGF0ZXZlciB5b3VcXCdyZSBmZWVsaW5nLic7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICAgIFxuICAgICAgY2FzZSAnZ2VudGxlX2VuY291cmFnZW1lbnQnOlxuICAgICAgICBpZiAoIWVuaGFuY2VkUmVzcG9uc2UuaW5jbHVkZXMoJ2dyZWF0JykgJiYgIWVuaGFuY2VkUmVzcG9uc2UuaW5jbHVkZXMoJ3dvbmRlcmZ1bCcpKSB7XG4gICAgICAgICAgZW5oYW5jZWRSZXNwb25zZSA9IGBZb3VcXCdyZSBkb2luZyBncmVhdCBieSBzaGFyaW5nIHRoaXMuICR7ZW5oYW5jZWRSZXNwb25zZX1gO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBcbiAgICAvLyBTdG9yZSBlbmhhbmNlZCByZXNwb25zZSBpbiBlcGlzb2RpYyBtZW1vcnlcbiAgICB0aGlzLmVwaXNvZGljTWVtb3J5TGF5ZXIuc3RvcmVFcGlzb2RlKFxuICAgICAgJ2NvbnZlcnNhdGlvbicsXG4gICAgICB7XG4gICAgICAgIHN1bW1hcnk6IGBCb3QgcmVzcG9uZGVkOiBcIiR7ZW5oYW5jZWRSZXNwb25zZX1cImAsXG4gICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICBvcmlnaW5hbFJlc3BvbnNlOiByZXNwb25zZSxcbiAgICAgICAgICBlbW90aW9uYWxFbmhhbmNlbWVudHM6IHtcbiAgICAgICAgICAgIHN0cmF0ZWd5OiBlbW90aW9uYWxSZXNwb25zZS5lbXBhdGh5U3RyYXRlZ3ksXG4gICAgICAgICAgICB0b25hbEFkanVzdG1lbnRzOiBlbW90aW9uYWxSZXNwb25zZS50b25hbEFkanVzdG1lbnRzXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwYXJ0aWNpcGFudHM6IFsnY2hhdGJvdCcsICdodW1hbiddLFxuICAgICAgICBjb250ZXh0OiAncmVzcG9uc2VfZ2VuZXJhdGlvbidcbiAgICAgIH0sXG4gICAgICBlbW90aW9uYWxSZXNwb25zZS5yZXNwb25zZUVtb3Rpb24sXG4gICAgICAwLjYgLy8gTW9kZXJhdGUgaW1wb3J0YW5jZSBmb3IgYm90IHJlc3BvbnNlc1xuICAgICk7XG4gICAgXG4gICAgY29uc29sZS5sb2coJ+KdpO+4jyBFbmhhbmNlZCByZXNwb25zZTonLCBlbmhhbmNlZFJlc3BvbnNlKTtcbiAgICByZXR1cm4gZW5oYW5jZWRSZXNwb25zZTtcbiAgfVxuXG4gIGdldERlYnVnSW5mbygpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBodW1hblVzZXI6IHtcbiAgICAgICAgaWRlbnRpdHk6IHRoaXMuaHVtYW5Vc2VyLmlkZW50aXR5LFxuICAgICAgICBjb252ZXJzYXRpb25TdGF0ZToge1xuICAgICAgICAgIC4uLnRoaXMuaHVtYW5Vc2VyLmNvbnZlcnNhdGlvblN0YXRlLFxuICAgICAgICAgIHByaW1lQ291bnQ6IE9iamVjdC5rZXlzKHRoaXMuaHVtYW5Vc2VyLmNvbnZlcnNhdGlvblN0YXRlLnByaW1lRmFjdG9ycykubGVuZ3RoXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjaGF0Ym90VXNlcjoge1xuICAgICAgICBpZGVudGl0eTogdGhpcy5jaGF0Ym90VXNlci5pZGVudGl0eSxcbiAgICAgICAgY29udmVyc2F0aW9uU3RhdGU6IHtcbiAgICAgICAgICAuLi50aGlzLmNoYXRib3RVc2VyLmNvbnZlcnNhdGlvblN0YXRlLFxuICAgICAgICAgIHByaW1lQ291bnQ6IE9iamVjdC5rZXlzKHRoaXMuY2hhdGJvdFVzZXIuY29udmVyc2F0aW9uU3RhdGUucHJpbWVGYWN0b3JzKS5sZW5ndGhcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNvaGVyZW5jZTogUHJpbWVNYXRoLmNhbGN1bGF0ZUNvaGVyZW5jZShcbiAgICAgICAgdGhpcy5odW1hblVzZXIuY29udmVyc2F0aW9uU3RhdGUucHJpbWVGYWN0b3JzLFxuICAgICAgICB0aGlzLmNoYXRib3RVc2VyLmNvbnZlcnNhdGlvblN0YXRlLnByaW1lRmFjdG9yc1xuICAgICAgKSxcbiAgICAgIGVwaXNvZGljTWVtb3J5OiB7XG4gICAgICAgIHRvdGFsRXBpc29kZXM6IHRoaXMuZXBpc29kaWNNZW1vcnlMYXllci5nZXRNZW1vcnlTdGF0cygpLnRvdGFsRXBpc29kZXMsXG4gICAgICAgIHBlcnNvbmFsaXR5VHJhaXRzOiB0aGlzLmVwaXNvZGljTWVtb3J5TGF5ZXIuZ2V0UGVyc29uYWxpdHlJbnNpZ2h0cygpLnRyYWl0c1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJwaXBlbGluZSIsIktub3dsZWRnZUJvb3RzdHJhcCIsIlByaW1lUmVzb25hbmNlRW5naW5lIiwiUHJpbWVNYXRoIiwiU2VtYW50aWNMYXllciIsIlByYWdtYXRpY0xheWVyIiwiU2NoZW1hVm9jYWJ1bGFyeSIsIkRpc2NvdXJzZUxheWVyIiwiR2VuZXJhdGl2ZUxheWVyIiwiRXBpc29kaWNNZW1vcnlMYXllciIsIkVtb3Rpb25hbEludGVsbGlnZW5jZUxheWVyIiwiUHJpbWVDb3JlIiwiY29uc3RydWN0b3IiLCJlbWJlZGRpbmdQaXBlbGluZSIsImlzSW5pdGlhbGl6ZWQiLCJrbm93bGVkZ2VCYXNlIiwiaHVtYW5Vc2VyIiwiaWRlbnRpdHkiLCJpZCIsIm5hbWUiLCJ0eXBlIiwiZW1iZWRkaW5ncyIsInByaW1lRmFjdG9ycyIsInBlcnNvbmFsaXR5IiwidHJhaXRzIiwiY29tbXVuaWNhdGlvblN0eWxlIiwiaW50ZXJlc3RzIiwiY29udmVyc2F0aW9uU3RhdGUiLCJjb250ZXh0IiwidHVybkNvdW50IiwicHJlZmVyZW5jZXMiLCJ0b3BpY3MiLCJyZXNwb25zZUxlbmd0aCIsImNoYXRib3RVc2VyIiwiZW1iZWRkaW5nc01vZGVsIiwidm9jYWJ1bGFyeSIsIk1hcCIsImNvbmNlcHRzIiwicmVsYXRpb25zaGlwcyIsInNlbWFudGljTGF5ZXIiLCJwcmFnbWF0aWNMYXllciIsInNjaGVtYVZvY2FidWxhcnkiLCJkaXNjb3Vyc2VMYXllciIsImdlbmVyYXRpdmVMYXllciIsImVwaXNvZGljTWVtb3J5TGF5ZXIiLCJlbW90aW9uYWxJbnRlbGxpZ2VuY2VMYXllciIsImluaXRpYWxpemUiLCJjb25zb2xlIiwibG9nIiwiYm9vdHN0cmFwQ2hhdGJvdEtub3dsZWRnZSIsImVycm9yIiwiRXJyb3IiLCJrbm93bGVkZ2VCb290c3RyYXAiLCJib290c3RyYXBGcm9tVG9rZW5pemVyIiwiY29uY2VwdEVtYmVkZGluZ3MiLCJzZW1hbnRpY0NsdXN0ZXJzIiwicG9wdWxhdGVDaGF0Ym90SWRlbnRpdHkiLCJtZXNzYWdlIiwiU3RyaW5nIiwiaWRlbnRpdHlQcmltZXMiLCJhbGxFbWJlZGRpbmdzIiwidm9jYWJ1bGFyeUVudHJ5IiwidmFsdWVzIiwiT2JqZWN0IiwiZW50cmllcyIsImZvckVhY2giLCJwcmltZSIsIndlaWdodCIsInByaW1lTnVtIiwicGFyc2VJbnQiLCJwdXNoIiwiZW1iZWRkaW5nIiwibGVuZ3RoIiwiY2VudHJvaWRFbWJlZGRpbmciLCJjYWxjdWxhdGVDZW50cm9pZEVtYmVkZGluZyIsIkFycmF5IiwiZmlsbCIsImNlbnRyb2lkIiwidmFsdWUiLCJpbmRleCIsIm1hcCIsInByb2Nlc3NDb252ZXJzYXRpb24iLCJpbnB1dCIsImlucHV0RW1iZWRkaW5ncyIsImdlbmVyYXRlRW1iZWRkaW5ncyIsImlucHV0UHJpbWVzIiwiZW1iZWRkaW5nc1RvUHJpbWVzIiwidXBkYXRlVXNlclN0YXRlIiwicmVzcG9uc2VQcmltZXMiLCJnZW5lcmF0ZVJlc3BvbnNlUHJpbWVzIiwicmVzcG9uc2VUZXh0IiwiZ2VuZXJhdGVSZXNwb25zZVRleHQiLCJyZXNwb25zZUVtYmVkZGluZ3MiLCJ0ZXh0IiwicmVzdWx0IiwiZnJvbSIsImRhdGEiLCJ1c2VyIiwicHJpbWVzIiwic2xpY2UiLCJ2YWwiLCJpZHgiLCJjb21iaW5lRmFjdG9ycyIsInVwZGF0ZUVtYmVkZGluZ3NNb2RlbCIsIndvcmRzIiwidG9Mb3dlckNhc2UiLCJzcGxpdCIsImZpbHRlciIsIndvcmQiLCJzZXQiLCJyZWxhdGVkV29yZHMiLCJfIiwiaSIsImNvaGVyZW5jZSIsImNhbGN1bGF0ZUNvaGVyZW5jZSIsInRvRml4ZWQiLCJhbXBsaWZ5UmVzb25hbmNlIiwiY3JlYXRlSGFybW9uaWMiLCJhZGRQZXJzb25hbGl0eUZhY3RvcnMiLCJhbXBsaWZpZWQiLCJwcmltZVN0ciIsIk1hdGgiLCJmbG9vciIsImdlbmVyYXRlUHJpbWVzIiwiaGFybW9uaWMiLCJ0b3BGYWN0b3JzIiwic29ydCIsImEiLCJiIiwiaGFybW9uaWNQcmltZSIsImVuaGFuY2VkIiwicGVyc29uYWxpdHlQcmltZXMiLCJsYXN0VXNlcklucHV0Iiwic2VtYW50aWNDb250ZXh0IiwiYW5hbHl6ZVNlbWFudGljQ29udGV4dCIsInByYWdtYXRpY1Jlc3BvbnNlQ29udGV4dCIsImdldENvbnRleHRGb3JSZXNwb25zZSIsInByYWdtYXRpY0NvbnRleHQiLCJjdXJyZW50VG9waWMiLCJhY3RpdmVJbnRlbnRzIiwiZW50aXR5TWVtb3J5IiwicmVsZXZhbnRFbnRpdGllcyIsImNvbnZlcnNhdGlvbkdvYWxzIiwidXNlclByZWZlcmVuY2VzIiwiY29udmVyc2F0aW9uSGlzdG9yeSIsInJlY2VudEhpc3RvcnkiLCJwcm9jZXNzVHVybiIsImludGVudCIsImVudGl0aWVzIiwicmVkdWNlIiwiYWNjIiwiZW50aXR5IiwidXBkYXRlZFByYWdtYXRpY0NvbnRleHQiLCJwcmFnbWF0aWNDb250ZXh0Rm9yR2VuZXJhdGlvbiIsImRpc2NvdXJzZUNvbnRleHQiLCJhbmFseXplRGlzY291cnNlQ29udGV4dCIsImVtb3Rpb25hbENvbnRleHQiLCJhbmFseXplRW1vdGlvbmFsQ29udGVudCIsImVwaXNvZGVJZCIsInN0b3JlRXBpc29kZSIsInN1bW1hcnkiLCJkZXRhaWxzIiwiZW1vdGlvbmFsU3RhdGUiLCJ1c2VyRW1vdGlvbiIsInBhcnRpY2lwYW50cyIsImNvbnZlcnNhdGlvblBoYXNlIiwidmFsZW5jZSIsImFyb3VzYWwiLCJkb21pbmFuY2UiLCJlbW90aW9ucyIsInByaW1hcnkiLCJzZWNvbmRhcnkiLCJlbXBhdGh5TGV2ZWwiLCJlbW90aW9uYWxSZXNwb25zZSIsImdlbmVyYXRlRW1vdGlvbmFsUmVzcG9uc2UiLCJnZW5lcmF0aW9uQ29udGV4dCIsInJlc3BvbnNlVHlwZSIsImV4cGVjdGVkUmVzcG9uc2VUeXBlIiwicHJpbWVSZXNvbmFuY2UiLCJnZW5lcmF0ZWRSZXNwb25zZSIsImdlbmVyYXRlUmVzcG9uc2UiLCJlbmhhbmNlUmVzcG9uc2VXaXRoRW1vdGlvbmFsSW50ZWxsaWdlbmNlIiwic2l6ZSIsInZvY2FidWxhcnlQcmltZXMiLCJyZXNvbmFuY2VFbmdpbmUiLCJyZXNvbmFudFdvcmRzIiwiZmluZE1vc3RSZXNvbmFudFdvcmRzIiwiY29udGV4dHVhbFdvcmRzIiwiYXBwbHlDb250ZXh0dWFsV2VpZ2h0aW5nIiwic2VtYW50aWNXb3JkcyIsImVuaGFuY2VSZXNvbmFuY2VXaXRoU2VtYW50aWNzIiwidyIsInJlc29uYW5jZSIsImVuaGFuY2VkUmVzb25hbnRXb3JkcyIsIm9yaWdpbmFsIiwiZmluZCIsInMiLCJyZXNwb25zZSIsImdlbmVyYXRlU2VtYW50aWNSZXNvbmFuY2VSZXNwb25zZSIsImdlbmVyYXRlQmFzaWNSZXNwb25zZSIsInByaW1lc1RvRW1iZWRkaW5ncyIsInByaW1lTGlzdCIsImluZGV4T2YiLCJmaW5kQ2xvc2VzdENvbmNlcHQiLCJjbG9zZXN0Q29uY2VwdCIsImhpZ2hlc3RTaW1pbGFyaXR5IiwiY29uY2VwdCIsInNpbWlsYXJpdHkiLCJjYWxjdWxhdGVDb3NpbmVTaW1pbGFyaXR5IiwiZG90UHJvZHVjdCIsInN1bSIsIm1hZ25pdHVkZUEiLCJzcXJ0IiwibWFnbml0dWRlQiIsImdlbmVyYXRlVGV4dEZyb21Db25jZXB0IiwibWFnbml0dWRlIiwiY2FsY3VsYXRlTWFnbml0dWRlIiwiY29uY2VwdFZhcmlhdGlvbnMiLCJnZXRDb25jZXB0VmFyaWF0aW9ucyIsInZhcmlhdGlvbkluZGV4IiwidmFyaWF0aW9ucyIsInZvY2FiIiwiZmluZE1vc3RTaW1pbGFyQ29uY2VwdHMiLCJjb3VudCIsInNpbWlsYXJpdGllcyIsInNvcnRlZCIsImZpbHRlcmVkIiwiaXRlbSIsInNlbWFudGljQm9vc3RzIiwicHJpbWFyeVdvcmQiLCJpbmNsdWRlcyIsImVudGl0eVR5cGUiLCJlbnRpdHlOYW1lIiwiam9pbiIsIm5hbWVNYXRjaCIsIm1hdGNoIiwiZ2VuZXJhdGVSZXNvbmFuY2VCYXNlZFJlc3BvbnNlIiwic2hhcmVkUHJpbWVzIiwiaGFybW9uaWNNYXRjaGVzIiwic29tZSIsInNoYXJlZFByaW1lQ291bnQiLCJoYXJtb25pY0NvdW50Iiwic2Vjb25kV29yZCIsImdlbmVyYXRlQ29uY2VwdEJhc2VkUmVzcG9uc2UiLCJwcmltYXJ5Q29uY2VwdCIsInJlbGF0ZWRDb25jZXB0cyIsImdldCIsInJlbGF0ZWRDb25jZXB0IiwicHJpbWVDb3VudCIsImtleXMiLCJkb21pbmFudFByaW1lIiwiY29udmVyc2F0aW9uTGVuZ3RoIiwicmVzcG9uc2VzIiwiZW1wYXRoeVN0cmF0ZWd5Iiwic3VwcG9ydExldmVsIiwidG9uYWxBZGp1c3RtZW50cyIsImVuaGFuY2VkUmVzcG9uc2UiLCJ3YXJtdGgiLCJmb3JtYWxpdHkiLCJlbnRodXNpYXNtIiwicGF0aWVuY2UiLCJyZXBsYWNlIiwic3VwcG9ydE5lZWRlZCIsIm9yaWdpbmFsUmVzcG9uc2UiLCJlbW90aW9uYWxFbmhhbmNlbWVudHMiLCJzdHJhdGVneSIsInJlc3BvbnNlRW1vdGlvbiIsImdldERlYnVnSW5mbyIsImVwaXNvZGljTWVtb3J5IiwidG90YWxFcGlzb2RlcyIsImdldE1lbW9yeVN0YXRzIiwicGVyc29uYWxpdHlUcmFpdHMiLCJnZXRQZXJzb25hbGl0eUluc2lnaHRzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/core/primelm-models.ts\n");

/***/ }),

/***/ "(ssr)/./src/lib/memory/emotional-intelligence.ts":
/*!**************************************************!*\
  !*** ./src/lib/memory/emotional-intelligence.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmotionalIntelligenceLayer: () => (/* binding */ EmotionalIntelligenceLayer)\n/* harmony export */ });\n// =============================================================================\n// EMOTIONAL INTELLIGENCE LAYER - Emotion Detection, Empathy, Social Awareness\n// =============================================================================\nclass EmotionalIntelligenceLayer {\n    constructor(){\n        this.emotionLexicon = new Map();\n        this.emotionalPatterns = new Map();\n        this.empathyStrategies = new Map();\n        this.socialCues = new Map();\n        this.conversationMoodHistory = [];\n        this.initializeEmotionLexicon();\n        this.initializeEmpathyStrategies();\n        this.initializeSocialCues();\n    }\n    /**\n   * Analyze emotional content of text input\n   */ analyzeEmotionalContent(text, context) {\n        console.log('❤️ Analyzing emotional content:', text);\n        const userEmotion = this.detectEmotion(text);\n        const socialCues = this.detectSocialCues(text);\n        const conversationMood = this.assessConversationMood(text, context);\n        const empathyLevel = this.calculateEmpathyLevel(userEmotion, context);\n        const supportNeeded = this.assessSupportNeeded(userEmotion, socialCues);\n        // Update emotional history\n        this.updateEmotionalHistory(userEmotion);\n        this.updateConversationMood(conversationMood);\n        const emotionalContext = {\n            userEmotion,\n            conversationMood,\n            emotionalHistory: this.getRecentEmotionalHistory(),\n            socialCues,\n            empathyLevel,\n            supportNeeded\n        };\n        console.log('❤️ Emotional analysis complete:', {\n            emotion: userEmotion.primary,\n            mood: conversationMood,\n            empathy: empathyLevel,\n            support: supportNeeded\n        });\n        return emotionalContext;\n    }\n    /**\n   * Generate emotionally intelligent response\n   */ generateEmotionalResponse(emotionalContext, responseContent) {\n        console.log('💝 Generating emotional response...');\n        const responseEmotion = this.determineResponseEmotion(emotionalContext);\n        const empathyStrategy = this.selectEmpathyStrategy(emotionalContext);\n        const supportLevel = this.determineSupportLevel(emotionalContext);\n        const tonalAdjustments = this.calculateTonalAdjustments(emotionalContext);\n        const suggestedPhrases = this.generateSuggestedPhrases(emotionalContext, empathyStrategy);\n        const emotionalResponse = {\n            responseEmotion,\n            empathyStrategy,\n            supportLevel,\n            tonalAdjustments,\n            suggestedPhrases\n        };\n        console.log('💝 Emotional response generated:', {\n            strategy: empathyStrategy,\n            support: supportLevel,\n            warmth: tonalAdjustments.warmth\n        });\n        return emotionalResponse;\n    }\n    /**\n   * Provide social awareness insights\n   */ provideSocialAwarenessInsights(emotionalContext, conversationHistory) {\n        const relationshipDynamics = this.analyzeRelationshipDynamics(conversationHistory);\n        const communicationStyle = this.identifyCommunicationStyle(emotionalContext, conversationHistory);\n        const culturalConsiderations = this.assessCulturalConsiderations(emotionalContext);\n        const appropriateResponses = this.suggestAppropriateResponses(emotionalContext);\n        const boundaryRespect = this.assessBoundaryRespect(emotionalContext, conversationHistory);\n        return {\n            relationshipDynamics,\n            communicationStyle,\n            culturalConsiderations,\n            appropriateResponses,\n            boundaryRespect\n        };\n    }\n    /**\n   * Detect emotion from text\n   */ detectEmotion(text) {\n        const lowerText = text.toLowerCase();\n        let detectedEmotions = [];\n        // Check emotion lexicon\n        for (const [emotionWord, emotionState] of this.emotionLexicon){\n            if (lowerText.includes(emotionWord)) {\n                detectedEmotions.push({\n                    emotion: emotionState.primary,\n                    confidence: 0.8\n                });\n            }\n        }\n        // Pattern-based emotion detection\n        const emotionPatterns = [\n            {\n                pattern: /(!+|excited|amazing|wonderful|fantastic)/i,\n                emotion: 'joy',\n                confidence: 0.7\n            },\n            {\n                pattern: /(sad|depressed|down|upset|disappointed)/i,\n                emotion: 'sadness',\n                confidence: 0.8\n            },\n            {\n                pattern: /(angry|mad|furious|annoyed|frustrated)/i,\n                emotion: 'anger',\n                confidence: 0.8\n            },\n            {\n                pattern: /(scared|afraid|worried|anxious|nervous)/i,\n                emotion: 'fear',\n                confidence: 0.7\n            },\n            {\n                pattern: /(surprised|shocked|amazed|wow)/i,\n                emotion: 'surprise',\n                confidence: 0.6\n            },\n            {\n                pattern: /(disgusted|gross|yuck|eww)/i,\n                emotion: 'disgust',\n                confidence: 0.7\n            },\n            {\n                pattern: /(love|adore|cherish|treasure)/i,\n                emotion: 'love',\n                confidence: 0.8\n            },\n            {\n                pattern: /(hate|despise|loathe|detest)/i,\n                emotion: 'hate',\n                confidence: 0.8\n            },\n            {\n                pattern: /(curious|interested|intrigued|wondering)/i,\n                emotion: 'curiosity',\n                confidence: 0.6\n            },\n            {\n                pattern: /(confused|puzzled|bewildered|lost)/i,\n                emotion: 'confusion',\n                confidence: 0.7\n            },\n            {\n                pattern: /(grateful|thankful|appreciative)/i,\n                emotion: 'gratitude',\n                confidence: 0.8\n            },\n            {\n                pattern: /(proud|accomplished|achieved)/i,\n                emotion: 'pride',\n                confidence: 0.7\n            },\n            {\n                pattern: /(embarrassed|ashamed|humiliated)/i,\n                emotion: 'shame',\n                confidence: 0.7\n            },\n            {\n                pattern: /(lonely|isolated|alone)/i,\n                emotion: 'loneliness',\n                confidence: 0.8\n            },\n            {\n                pattern: /(hopeful|optimistic|positive)/i,\n                emotion: 'hope',\n                confidence: 0.7\n            },\n            {\n                pattern: /(hopeless|pessimistic|despair)/i,\n                emotion: 'despair',\n                confidence: 0.8\n            },\n            {\n                pattern: /(devastated|destroyed|crushed)/i,\n                emotion: 'devastated',\n                confidence: 0.9\n            }\n        ];\n        emotionPatterns.forEach(({ pattern, emotion, confidence })=>{\n            if (pattern.test(text)) {\n                detectedEmotions.push({\n                    emotion,\n                    confidence\n                });\n            }\n        });\n        // Contextual emotion detection\n        const contextualEmotions = this.detectContextualEmotions(text);\n        detectedEmotions.push(...contextualEmotions);\n        // Default to neutral if no emotions detected\n        if (detectedEmotions.length === 0) {\n            return this.createEmotionalState('neutral', 0.0, 0.3, 0.5, 0.3, 0.5);\n        }\n        // Find strongest emotion\n        const strongestEmotion = detectedEmotions.reduce((prev, current)=>current.confidence > prev.confidence ? current : prev);\n        // Get base emotional state or create one with appropriate valence\n        let baseState = this.emotionLexicon.get(strongestEmotion.emotion);\n        if (!baseState) {\n            // Create emotional state with appropriate valence based on emotion type\n            const valence = this.getEmotionValence(strongestEmotion.emotion);\n            const arousal = this.getEmotionArousal(strongestEmotion.emotion);\n            const dominance = this.getEmotionDominance(strongestEmotion.emotion);\n            baseState = this.createEmotionalState(strongestEmotion.emotion, valence, arousal, dominance, 0.5, strongestEmotion.confidence);\n        }\n        // Adjust intensity based on text features\n        const intensity = this.calculateEmotionalIntensity(text, baseState);\n        return {\n            ...baseState,\n            intensity,\n            confidence: strongestEmotion.confidence\n        };\n    }\n    /**\n   * Detect contextual emotions based on sentence structure and context\n   */ detectContextualEmotions(text) {\n        const contextualEmotions = [];\n        // Question patterns often indicate curiosity or confusion\n        if (text.includes('?')) {\n            if (text.toLowerCase().includes('how') || text.toLowerCase().includes('why')) {\n                contextualEmotions.push({\n                    emotion: 'curiosity',\n                    confidence: 0.6\n                });\n            } else if (text.toLowerCase().includes('what') && text.toLowerCase().includes('wrong')) {\n                contextualEmotions.push({\n                    emotion: 'concern',\n                    confidence: 0.7\n                });\n            }\n        }\n        // Exclamation patterns often indicate excitement or strong emotion\n        const exclamationCount = (text.match(/!/g) || []).length;\n        if (exclamationCount > 0) {\n            contextualEmotions.push({\n                emotion: 'excitement',\n                confidence: Math.min(0.8, 0.3 + exclamationCount * 0.2)\n            });\n        }\n        // Capitalization patterns\n        const capsWords = text.match(/[A-Z]{2,}/g);\n        if (capsWords && capsWords.length > 0) {\n            contextualEmotions.push({\n                emotion: 'emphasis',\n                confidence: 0.6\n            });\n        }\n        // Repetition patterns (e.g., \"no no no\", \"yes yes yes\")\n        const repetitionPattern = /\\b(\\w+)\\s+\\1\\b/gi;\n        if (repetitionPattern.test(text)) {\n            contextualEmotions.push({\n                emotion: 'emphasis',\n                confidence: 0.5\n            });\n        }\n        return contextualEmotions;\n    }\n    /**\n   * Calculate emotional intensity based on text features\n   */ calculateEmotionalIntensity(text, baseState) {\n        let intensity = baseState.intensity;\n        // Intensifiers\n        const intensifiers = [\n            'very',\n            'extremely',\n            'incredibly',\n            'absolutely',\n            'totally',\n            'completely',\n            'utterly'\n        ];\n        const intensifierCount = intensifiers.filter((word)=>text.toLowerCase().includes(word)).length;\n        intensity += intensifierCount * 0.2;\n        // Diminishers\n        const diminishers = [\n            'slightly',\n            'somewhat',\n            'a bit',\n            'kind of',\n            'sort of',\n            'maybe',\n            'perhaps'\n        ];\n        const diminisherCount = diminishers.filter((word)=>text.toLowerCase().includes(word)).length;\n        intensity -= diminisherCount * 0.15;\n        // Punctuation intensity\n        const exclamationCount = (text.match(/!/g) || []).length;\n        intensity += exclamationCount * 0.1;\n        // Caps intensity\n        const capsRatio = (text.match(/[A-Z]/g) || []).length / text.length;\n        if (capsRatio > 0.3) {\n            intensity += 0.2;\n        }\n        return Math.max(0, Math.min(1, intensity));\n    }\n    /**\n   * Detect social cues in text\n   */ detectSocialCues(text) {\n        const detectedCues = [];\n        const lowerText = text.toLowerCase();\n        // Politeness cues\n        if (lowerText.includes('please') || lowerText.includes('thank you') || lowerText.includes('thanks')) {\n            detectedCues.push('polite');\n        }\n        // Urgency cues\n        if (lowerText.includes('urgent') || lowerText.includes('asap') || lowerText.includes('quickly')) {\n            detectedCues.push('urgent');\n        }\n        // Uncertainty cues\n        if (lowerText.includes('maybe') || lowerText.includes('perhaps') || lowerText.includes('not sure')) {\n            detectedCues.push('uncertain');\n        }\n        // Confidence cues\n        if (lowerText.includes('definitely') || lowerText.includes('absolutely') || lowerText.includes('certain')) {\n            detectedCues.push('confident');\n        }\n        // Support-seeking cues\n        if (lowerText.includes('help') || lowerText.includes('advice') || lowerText.includes('support')) {\n            detectedCues.push('support_seeking');\n        }\n        // Sharing cues\n        if (lowerText.includes('tell you') || lowerText.includes('share') || lowerText.includes('story')) {\n            detectedCues.push('sharing');\n        }\n        // Boundary cues\n        if (lowerText.includes('private') || lowerText.includes('personal') || lowerText.includes('don\\'t want to')) {\n            detectedCues.push('boundary_setting');\n        }\n        return detectedCues;\n    }\n    /**\n   * Assess conversation mood\n   */ assessConversationMood(text, context) {\n        const emotionalState = this.detectEmotion(text);\n        const socialCues = this.detectSocialCues(text);\n        // Determine mood based on emotion and social cues\n        if (emotionalState.valence > 0.3) {\n            if (socialCues.includes('sharing')) return 'open_sharing';\n            if (socialCues.includes('confident')) return 'positive_confident';\n            return 'positive';\n        } else if (emotionalState.valence < -0.3) {\n            if (socialCues.includes('support_seeking')) return 'seeking_support';\n            if (socialCues.includes('urgent')) return 'distressed';\n            return 'negative';\n        } else {\n            if (emotionalState.primary === 'curiosity') return 'exploratory';\n            if (socialCues.includes('uncertain')) return 'exploratory';\n            if (socialCues.includes('polite')) return 'formal';\n            return 'neutral';\n        }\n    }\n    /**\n   * Calculate empathy level needed\n   */ calculateEmpathyLevel(userEmotion, context) {\n        let empathyLevel = 0.5; // Base empathy level\n        // Increase empathy for negative emotions\n        if (userEmotion.valence < 0) {\n            empathyLevel += Math.abs(userEmotion.valence) * 0.4;\n        }\n        // Increase empathy for high arousal emotions\n        if (userEmotion.arousal > 0.7) {\n            empathyLevel += 0.2;\n        }\n        // Increase empathy for vulnerable emotions\n        const vulnerableEmotions = [\n            'sadness',\n            'fear',\n            'shame',\n            'loneliness',\n            'despair'\n        ];\n        if (vulnerableEmotions.includes(userEmotion.primary)) {\n            empathyLevel += 0.3;\n        }\n        // Adjust based on conversation history\n        if (context?.emotionalHistory) {\n            const recentNegativeEmotions = context.emotionalHistory.slice(-3).filter((emotion)=>emotion.valence < 0);\n            if (recentNegativeEmotions.length >= 2) {\n                empathyLevel += 0.2; // Sustained negative emotions need more empathy\n            }\n        }\n        return Math.max(0, Math.min(1, empathyLevel));\n    }\n    /**\n   * Assess support needed\n   */ assessSupportNeeded(userEmotion, socialCues) {\n        let supportScore = 0;\n        // Emotional factors\n        if (userEmotion.valence < -0.6) supportScore += 3;\n        else if (userEmotion.valence < -0.3) supportScore += 2;\n        else if (userEmotion.valence < 0) supportScore += 1;\n        if (userEmotion.intensity > 0.7) supportScore += 1;\n        // Social cue factors\n        if (socialCues.includes('support_seeking')) supportScore += 2;\n        if (socialCues.includes('urgent')) supportScore += 2;\n        if (socialCues.includes('uncertain')) supportScore += 1;\n        // Vulnerable emotion factors\n        const vulnerableEmotions = [\n            'sadness',\n            'fear',\n            'shame',\n            'loneliness',\n            'despair'\n        ];\n        if (vulnerableEmotions.includes(userEmotion.primary)) supportScore += 2;\n        // Specific high-intensity negative emotions\n        const devastatingEmotions = [\n            'devastated',\n            'despair',\n            'hopeless'\n        ];\n        if (devastatingEmotions.some((emotion)=>userEmotion.primary.includes(emotion))) {\n            supportScore += 3;\n        }\n        if (supportScore >= 5) return 'high';\n        if (supportScore >= 2) return 'medium';\n        return 'low';\n    }\n    /**\n   * Determine appropriate response emotion\n   */ determineResponseEmotion(emotionalContext) {\n        const userEmotion = emotionalContext.userEmotion;\n        // Mirror positive emotions with slightly lower intensity\n        if (userEmotion.valence > 0.3) {\n            return this.createEmotionalState('warmth', userEmotion.valence * 0.8, userEmotion.arousal * 0.7, 0.6, userEmotion.intensity * 0.8, 0.8);\n        }\n        // Respond to negative emotions with supportive emotions\n        if (userEmotion.valence < -0.3) {\n            const supportiveEmotions = {\n                'sadness': 'compassion',\n                'fear': 'reassurance',\n                'anger': 'understanding',\n                'shame': 'acceptance',\n                'loneliness': 'connection',\n                'despair': 'hope'\n            };\n            const responseEmotion = supportiveEmotions[userEmotion.primary] || 'empathy';\n            return this.createEmotionalState(responseEmotion, 0.3, 0.4, 0.5, 0.6, 0.8);\n        }\n        // Neutral response for neutral emotions\n        return this.createEmotionalState('calm', 0.1, 0.3, 0.5, 0.4, 0.7);\n    }\n    /**\n   * Select empathy strategy\n   */ selectEmpathyStrategy(emotionalContext) {\n        const userEmotion = emotionalContext.userEmotion;\n        const supportNeeded = emotionalContext.supportNeeded;\n        // High support situations\n        if (supportNeeded === 'high') {\n            if (userEmotion.primary === 'sadness') return 'emotional_validation';\n            if (userEmotion.primary === 'fear') return 'reassurance_and_safety';\n            if (userEmotion.primary === 'anger') return 'acknowledgment_and_understanding';\n            return 'active_listening';\n        }\n        // Medium support situations\n        if (supportNeeded === 'medium') {\n            if (userEmotion.valence < 0) return 'gentle_encouragement';\n            if (emotionalContext.socialCues.includes('uncertain')) return 'clarification_and_guidance';\n            return 'supportive_engagement';\n        }\n        // Low support situations\n        if (userEmotion.valence > 0.5) return 'positive_reinforcement';\n        if (emotionalContext.socialCues.includes('sharing')) return 'interested_listening';\n        return 'neutral_engagement';\n    }\n    /**\n   * Determine support level\n   */ determineSupportLevel(emotionalContext) {\n        const userEmotion = emotionalContext.userEmotion;\n        const socialCues = emotionalContext.socialCues;\n        // Validation for vulnerable emotions\n        if ([\n            'sadness',\n            'fear',\n            'shame',\n            'loneliness'\n        ].includes(userEmotion.primary)) {\n            return 'validation';\n        }\n        // Problem solving for frustration or confusion\n        if ([\n            'anger',\n            'frustration',\n            'confusion'\n        ].includes(userEmotion.primary) && socialCues.includes('support_seeking')) {\n            return 'problem_solving';\n        }\n        // Encouragement for low confidence or uncertainty\n        if (socialCues.includes('uncertain') || userEmotion.dominance < 0.3) {\n            return 'encouragement';\n        }\n        // Distraction for overwhelming emotions\n        if (userEmotion.intensity > 0.8 && userEmotion.arousal > 0.8) {\n            return 'distraction';\n        }\n        return 'validation'; // Default to validation\n    }\n    /**\n   * Calculate tonal adjustments\n   */ calculateTonalAdjustments(emotionalContext) {\n        const userEmotion = emotionalContext.userEmotion;\n        const empathyLevel = emotionalContext.empathyLevel;\n        return {\n            warmth: Math.max(0.3, empathyLevel),\n            formality: userEmotion.valence < -0.5 ? 0.3 : 0.5,\n            enthusiasm: Math.max(0.2, userEmotion.valence * 0.8),\n            patience: userEmotion.arousal > 0.7 ? 0.9 : 0.6 // More patience for high arousal\n        };\n    }\n    /**\n   * Generate suggested phrases for emotional response\n   */ generateSuggestedPhrases(emotionalContext, empathyStrategy) {\n        const phrases = [];\n        const userEmotion = emotionalContext.userEmotion;\n        // Get strategy-specific phrases\n        const strategyPhrases = this.empathyStrategies.get(empathyStrategy) || [];\n        phrases.push(...strategyPhrases);\n        // Add emotion-specific phrases\n        const emotionPhrases = this.getEmotionSpecificPhrases(userEmotion.primary);\n        phrases.push(...emotionPhrases);\n        // Add general supportive phrases if needed\n        if (phrases.length < 3) {\n            phrases.push(\"I understand how you're feeling.\", \"Thank you for sharing that with me.\", \"I'm here to help.\");\n        }\n        return phrases.slice(0, 5); // Return top 5 phrases\n    }\n    /**\n   * Get emotion-specific phrases\n   */ getEmotionSpecificPhrases(emotion) {\n        const emotionPhrases = {\n            'sadness': [\n                \"I can hear that you're going through a difficult time.\",\n                \"It's completely understandable to feel this way.\",\n                \"Your feelings are valid.\"\n            ],\n            'fear': [\n                \"It's natural to feel worried about this.\",\n                \"You're not alone in feeling this way.\",\n                \"Let's work through this together.\"\n            ],\n            'anger': [\n                \"I can understand why that would be frustrating.\",\n                \"Your feelings about this are completely valid.\",\n                \"It sounds like this situation is really challenging.\"\n            ],\n            'joy': [\n                \"That's wonderful to hear!\",\n                \"I'm so happy for you!\",\n                \"What an exciting development!\"\n            ],\n            'confusion': [\n                \"That does sound confusing.\",\n                \"Let me help clarify that for you.\",\n                \"It's okay to feel uncertain about this.\"\n            ]\n        };\n        return emotionPhrases[emotion] || [];\n    }\n    /**\n   * Analyze relationship dynamics\n   */ analyzeRelationshipDynamics(conversationHistory) {\n        if (conversationHistory.length < 3) {\n            return 'early_interaction';\n        }\n        // Analyze patterns in conversation\n        const userInitiatedCount = conversationHistory.filter((turn)=>turn.speaker === 'human').length;\n        const totalTurns = conversationHistory.length;\n        const userInitiationRatio = userInitiatedCount / totalTurns;\n        if (userInitiationRatio > 0.7) {\n            return 'user_driven';\n        } else if (userInitiationRatio < 0.3) {\n            return 'assistant_guided';\n        } else {\n            return 'collaborative';\n        }\n    }\n    /**\n   * Identify communication style\n   */ identifyCommunicationStyle(emotionalContext, conversationHistory) {\n        const socialCues = emotionalContext.socialCues;\n        if (socialCues.includes('polite') && socialCues.includes('formal')) {\n            return 'formal_polite';\n        } else if (socialCues.includes('sharing') && socialCues.includes('open')) {\n            return 'open_expressive';\n        } else if (socialCues.includes('uncertain') && socialCues.includes('support_seeking')) {\n            return 'hesitant_seeking';\n        } else if (socialCues.includes('confident') && socialCues.includes('direct')) {\n            return 'direct_confident';\n        } else {\n            return 'casual_friendly';\n        }\n    }\n    /**\n   * Assess cultural considerations\n   */ assessCulturalConsiderations(emotionalContext) {\n        const considerations = [];\n        // Based on communication patterns and emotional expression\n        if (emotionalContext.userEmotion.dominance < 0.3) {\n            considerations.push('respect_for_hierarchy');\n        }\n        if (emotionalContext.socialCues.includes('polite')) {\n            considerations.push('formal_courtesy');\n        }\n        if (emotionalContext.socialCues.includes('boundary_setting')) {\n            considerations.push('privacy_respect');\n        }\n        // Default considerations\n        considerations.push('inclusive_language', 'respectful_tone');\n        return considerations;\n    }\n    /**\n   * Suggest appropriate responses\n   */ suggestAppropriateResponses(emotionalContext) {\n        const responses = [];\n        const userEmotion = emotionalContext.userEmotion;\n        if (userEmotion.valence < -0.5) {\n            responses.push('offer_emotional_support', 'validate_feelings', 'provide_resources');\n        } else if (userEmotion.valence > 0.5) {\n            responses.push('share_enthusiasm', 'encourage_continuation', 'ask_follow_up');\n        } else {\n            responses.push('maintain_engagement', 'provide_information', 'ask_clarifying_questions');\n        }\n        return responses;\n    }\n    /**\n   * Assess boundary respect\n   */ assessBoundaryRespect(emotionalContext, conversationHistory) {\n        const boundaries = [];\n        if (emotionalContext.socialCues.includes('boundary_setting')) {\n            boundaries.push('respect_stated_boundaries');\n        }\n        if (emotionalContext.socialCues.includes('private')) {\n            boundaries.push('avoid_personal_probing');\n        }\n        // Always include basic boundaries\n        boundaries.push('maintain_professional_distance', 'respect_user_autonomy');\n        return boundaries;\n    }\n    /**\n   * Initialize emotion lexicon\n   */ initializeEmotionLexicon() {\n        const emotions = [\n            {\n                word: 'happy',\n                state: this.createEmotionalState('joy', 0.8, 0.6, 0.6, 0.7, 0.8)\n            },\n            {\n                word: 'sad',\n                state: this.createEmotionalState('sadness', -0.7, 0.4, 0.3, 0.6, 0.8)\n            },\n            {\n                word: 'angry',\n                state: this.createEmotionalState('anger', -0.6, 0.8, 0.8, 0.8, 0.8)\n            },\n            {\n                word: 'scared',\n                state: this.createEmotionalState('fear', -0.5, 0.7, 0.2, 0.7, 0.7)\n            },\n            {\n                word: 'excited',\n                state: this.createEmotionalState('excitement', 0.9, 0.9, 0.7, 0.8, 0.8)\n            },\n            {\n                word: 'calm',\n                state: this.createEmotionalState('calm', 0.3, 0.2, 0.5, 0.4, 0.8)\n            },\n            {\n                word: 'confused',\n                state: this.createEmotionalState('confusion', -0.2, 0.5, 0.3, 0.5, 0.7)\n            },\n            {\n                word: 'grateful',\n                state: this.createEmotionalState('gratitude', 0.7, 0.4, 0.4, 0.6, 0.8)\n            },\n            {\n                word: 'proud',\n                state: this.createEmotionalState('pride', 0.8, 0.6, 0.7, 0.7, 0.8)\n            },\n            {\n                word: 'lonely',\n                state: this.createEmotionalState('loneliness', -0.6, 0.3, 0.2, 0.6, 0.8)\n            },\n            {\n                word: 'hopeful',\n                state: this.createEmotionalState('hope', 0.6, 0.5, 0.5, 0.6, 0.7)\n            },\n            {\n                word: 'worried',\n                state: this.createEmotionalState('worry', -0.4, 0.6, 0.3, 0.6, 0.7)\n            }\n        ];\n        emotions.forEach(({ word, state })=>{\n            this.emotionLexicon.set(word, state);\n        });\n    }\n    /**\n   * Initialize empathy strategies\n   */ initializeEmpathyStrategies() {\n        const strategies = [\n            {\n                strategy: 'emotional_validation',\n                phrases: [\n                    \"Your feelings are completely valid.\",\n                    \"It makes perfect sense that you'd feel this way.\",\n                    \"Anyone would feel upset in this situation.\"\n                ]\n            },\n            {\n                strategy: 'reassurance_and_safety',\n                phrases: [\n                    \"You're safe here to share whatever you're feeling.\",\n                    \"It's okay to feel uncertain about this.\",\n                    \"We can work through this step by step.\"\n                ]\n            },\n            {\n                strategy: 'acknowledgment_and_understanding',\n                phrases: [\n                    \"I can understand why that would be frustrating.\",\n                    \"Your feelings about this are completely valid.\",\n                    \"It sounds like this situation is really challenging.\"\n                ]\n            },\n            {\n                strategy: 'active_listening',\n                phrases: [\n                    \"I'm here to listen.\",\n                    \"Tell me more about how you're feeling.\",\n                    \"I want to understand what you're going through.\"\n                ]\n            },\n            {\n                strategy: 'gentle_encouragement',\n                phrases: [\n                    \"You're doing great by talking about this.\",\n                    \"It takes courage to share these feelings.\",\n                    \"You're not alone in this.\"\n                ]\n            },\n            {\n                strategy: 'positive_reinforcement',\n                phrases: [\n                    \"That's wonderful to hear!\",\n                    \"I'm so happy for you!\",\n                    \"What an exciting development!\"\n                ]\n            }\n        ];\n        strategies.forEach(({ strategy, phrases })=>{\n            this.empathyStrategies.set(strategy, phrases);\n        });\n    }\n    /**\n   * Initialize social cues\n   */ initializeSocialCues() {\n        const cues = [\n            {\n                cue: 'polite',\n                indicators: [\n                    'please',\n                    'thank you',\n                    'thanks',\n                    'excuse me'\n                ]\n            },\n            {\n                cue: 'urgent',\n                indicators: [\n                    'urgent',\n                    'asap',\n                    'quickly',\n                    'immediately'\n                ]\n            },\n            {\n                cue: 'uncertain',\n                indicators: [\n                    'maybe',\n                    'perhaps',\n                    'not sure',\n                    'think'\n                ]\n            },\n            {\n                cue: 'confident',\n                indicators: [\n                    'definitely',\n                    'absolutely',\n                    'certain',\n                    'sure'\n                ]\n            },\n            {\n                cue: 'support_seeking',\n                indicators: [\n                    'help',\n                    'advice',\n                    'support',\n                    'guidance'\n                ]\n            },\n            {\n                cue: 'sharing',\n                indicators: [\n                    'tell you',\n                    'share',\n                    'story',\n                    'experience'\n                ]\n            }\n        ];\n        cues.forEach(({ cue, indicators })=>{\n            this.socialCues.set(cue, indicators);\n        });\n    }\n    /**\n   * Create emotional state\n   */ createEmotionalState(primary, valence, arousal, dominance, intensity, confidence) {\n        return {\n            primary,\n            secondary: [],\n            valence,\n            arousal,\n            dominance,\n            intensity,\n            confidence\n        };\n    }\n    /**\n   * Update emotional history\n   */ updateEmotionalHistory(emotion) {\n        // Keep last 10 emotions\n        if (this.conversationMoodHistory.length >= 10) {\n            this.conversationMoodHistory.shift();\n        }\n        this.conversationMoodHistory.push(emotion.primary);\n    }\n    /**\n   * Update conversation mood\n   */ updateConversationMood(mood) {\n        // Store mood for trend analysis\n        this.conversationMoodHistory.push(mood);\n        if (this.conversationMoodHistory.length > 20) {\n            this.conversationMoodHistory.shift();\n        }\n    }\n    /**\n   * Get recent emotional history\n   */ getRecentEmotionalHistory() {\n        // Return recent emotions (simplified for now)\n        return this.conversationMoodHistory.slice(-5).map((emotion)=>this.createEmotionalState(emotion, 0, 0.5, 0.5, 0.5, 0.7));\n    }\n    /**\n   * Get valence for emotion type\n   */ getEmotionValence(emotion) {\n        const positiveEmotions = [\n            'joy',\n            'happiness',\n            'excitement',\n            'gratitude',\n            'love',\n            'pride',\n            'hope'\n        ];\n        const negativeEmotions = [\n            'sadness',\n            'anger',\n            'fear',\n            'shame',\n            'loneliness',\n            'despair',\n            'devastated',\n            'hate'\n        ];\n        if (positiveEmotions.includes(emotion)) return 0.7;\n        if (negativeEmotions.includes(emotion)) return -0.6;\n        return 0.0; // neutral\n    }\n    /**\n   * Get arousal for emotion type\n   */ getEmotionArousal(emotion) {\n        const highArousalEmotions = [\n            'excitement',\n            'anger',\n            'fear',\n            'surprise'\n        ];\n        const lowArousalEmotions = [\n            'sadness',\n            'calm',\n            'loneliness'\n        ];\n        if (highArousalEmotions.includes(emotion)) return 0.8;\n        if (lowArousalEmotions.includes(emotion)) return 0.3;\n        return 0.5; // moderate\n    }\n    /**\n   * Get dominance for emotion type\n   */ getEmotionDominance(emotion) {\n        const highDominanceEmotions = [\n            'anger',\n            'pride',\n            'excitement'\n        ];\n        const lowDominanceEmotions = [\n            'fear',\n            'shame',\n            'sadness',\n            'loneliness'\n        ];\n        if (highDominanceEmotions.includes(emotion)) return 0.7;\n        if (lowDominanceEmotions.includes(emotion)) return 0.3;\n        return 0.5; // moderate\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/memory/emotional-intelligence.ts\n");

/***/ }),

/***/ "(ssr)/./src/lib/memory/episodic-memory.ts":
/*!*******************************************!*\
  !*** ./src/lib/memory/episodic-memory.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EpisodicMemoryLayer: () => (/* binding */ EpisodicMemoryLayer)\n/* harmony export */ });\n/* harmony import */ var _system_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../system/config */ \"(ssr)/./src/lib/system/config.ts\");\n// =============================================================================\n// EPISODIC MEMORY LAYER - Long-term Memory, Personalization, Learning\n// =============================================================================\n\nclass EpisodicMemoryLayer {\n    constructor(){\n        this.episodes = new Map();\n        this.clusters = new Map();\n        this.memoryIndex = new Map() // keyword -> episode IDs\n        ;\n        this.temporalIndex = new Map() // date -> episode IDs\n        ;\n        this.emotionalIndex = new Map() // emotion -> episode IDs\n        ;\n        this.personalityProfile = this.initializePersonalityProfile();\n        this.startMemoryConsolidation();\n    }\n    /**\n   * Initialize default personality profile\n   */ initializePersonalityProfile() {\n        return {\n            traits: {\n                openness: 0.7,\n                conscientiousness: 0.8,\n                extraversion: 0.6,\n                agreeableness: 0.8,\n                neuroticism: 0.3\n            },\n            preferences: {\n                communicationStyle: 'friendly',\n                topicInterests: [],\n                responseLength: 'moderate',\n                emotionalSupport: 'medium'\n            },\n            learningPatterns: {\n                preferredExamples: [],\n                commonMistakes: [],\n                successfulInteractions: []\n            }\n        };\n    }\n    /**\n   * Store a new episodic memory\n   */ storeEpisode(type, content, emotional, importance = 0.5) {\n        const episodeId = this.generateEpisodeId();\n        const timestamp = Date.now();\n        const episode = {\n            id: episodeId,\n            timestamp,\n            type,\n            content,\n            emotional,\n            importance,\n            connections: [],\n            tags: this.generateTags(content, emotional),\n            lastAccessed: timestamp,\n            accessCount: 1\n        };\n        // Store episode\n        this.episodes.set(episodeId, episode);\n        // Update indices\n        this.updateIndices(episode);\n        // Find and create connections\n        this.createConnections(episode);\n        // Update personality profile based on episode\n        this.updatePersonalityProfile(episode);\n        // Trigger memory consolidation if needed\n        this.considerConsolidation();\n        console.log(`🧠 Stored episodic memory: ${type} - ${content.summary}`);\n        return episodeId;\n    }\n    /**\n   * Retrieve episodes based on query\n   */ retrieveEpisodes(query) {\n        let candidateIds = new Set();\n        // Keyword search\n        if (query.keywords) {\n            for (const keyword of query.keywords){\n                const keywordIds = this.memoryIndex.get(keyword.toLowerCase()) || new Set();\n                if (candidateIds.size === 0) {\n                    candidateIds = new Set(keywordIds);\n                } else {\n                    candidateIds = new Set([\n                        ...candidateIds\n                    ].filter((id)=>keywordIds.has(id)));\n                }\n            }\n        } else {\n            candidateIds = new Set(this.episodes.keys());\n        }\n        // Filter episodes\n        let episodes = Array.from(candidateIds).map((id)=>this.episodes.get(id)).filter((episode)=>{\n            if (query.type && episode.type !== query.type) return false;\n            if (query.timeRange && (episode.timestamp < query.timeRange.start || episode.timestamp > query.timeRange.end)) return false;\n            if (query.emotions && !query.emotions.some((emotion)=>episode.emotional.emotions.includes(emotion))) return false;\n            if (query.participants && !query.participants.some((participant)=>episode.content.participants.includes(participant))) return false;\n            if (query.minImportance && episode.importance < query.minImportance) return false;\n            return true;\n        });\n        // Sort by relevance (importance + recency + access frequency)\n        episodes.sort((a, b)=>{\n            const scoreA = this.calculateRelevanceScore(a, query);\n            const scoreB = this.calculateRelevanceScore(b, query);\n            return scoreB - scoreA;\n        });\n        // Update access information\n        episodes.forEach((episode)=>{\n            episode.lastAccessed = Date.now();\n            episode.accessCount++;\n        });\n        // Apply limit\n        if (query.limit) {\n            episodes = episodes.slice(0, query.limit);\n        }\n        console.log(`🔍 Retrieved ${episodes.length} episodic memories`);\n        return episodes;\n    }\n    /**\n   * Get personality insights for response adaptation\n   */ getPersonalityInsights() {\n        return JSON.parse(JSON.stringify(this.personalityProfile));\n    }\n    /**\n   * Update personality profile based on interaction patterns\n   */ updatePersonalityFromInteraction(interactionType, success, emotionalResponse, context) {\n        // Update learning patterns\n        if (success) {\n            this.personalityProfile.learningPatterns.successfulInteractions.push(interactionType);\n            // Limit array size\n            if (this.personalityProfile.learningPatterns.successfulInteractions.length > 50) {\n                this.personalityProfile.learningPatterns.successfulInteractions.shift();\n            }\n        } else {\n            this.personalityProfile.learningPatterns.commonMistakes.push(interactionType);\n            if (this.personalityProfile.learningPatterns.commonMistakes.length > 30) {\n                this.personalityProfile.learningPatterns.commonMistakes.shift();\n            }\n        }\n        // Update preferences based on emotional response\n        if (emotionalResponse.includes('happy') || emotionalResponse.includes('satisfied')) {\n        // Reinforce current communication style\n        // No change needed\n        } else if (emotionalResponse.includes('confused') || emotionalResponse.includes('frustrated')) {\n            // Adjust communication style\n            if (this.personalityProfile.preferences.responseLength === 'brief') {\n                this.personalityProfile.preferences.responseLength = 'moderate';\n            } else if (this.personalityProfile.preferences.responseLength === 'detailed') {\n                this.personalityProfile.preferences.responseLength = 'moderate';\n            }\n        }\n        // Update topic interests\n        if (context.topic && success) {\n            if (!this.personalityProfile.preferences.topicInterests.includes(context.topic)) {\n                this.personalityProfile.preferences.topicInterests.push(context.topic);\n                // Limit interests\n                if (this.personalityProfile.preferences.topicInterests.length > 20) {\n                    this.personalityProfile.preferences.topicInterests.shift();\n                }\n            }\n        }\n        console.log('🧠 Updated personality profile from interaction');\n    }\n    /**\n   * Get memory clusters for thematic understanding\n   */ getMemoryClusters() {\n        // Update clusters if they're empty or stale\n        if (this.clusters.size === 0 || this.episodes.size > 0) {\n            this.updateClusters();\n        }\n        return Array.from(this.clusters.values()).sort((a, b)=>b.strength - a.strength);\n    }\n    /**\n   * Get memory statistics\n   */ getMemoryStats() {\n        const episodes = Array.from(this.episodes.values());\n        const episodesByType = {};\n        const emotionalDistribution = {};\n        let totalImportance = 0;\n        let oldest = Date.now();\n        let newest = 0;\n        episodes.forEach((episode)=>{\n            episodesByType[episode.type] = (episodesByType[episode.type] || 0) + 1;\n            totalImportance += episode.importance;\n            oldest = Math.min(oldest, episode.timestamp);\n            newest = Math.max(newest, episode.timestamp);\n            if (episode.emotional.emotions && Array.isArray(episode.emotional.emotions)) {\n                episode.emotional.emotions.forEach((emotion)=>{\n                    emotionalDistribution[emotion] = (emotionalDistribution[emotion] || 0) + 1;\n                });\n            }\n        });\n        return {\n            totalEpisodes: episodes.length,\n            episodesByType,\n            averageImportance: episodes.length > 0 ? totalImportance / episodes.length : 0,\n            memorySpan: {\n                oldest,\n                newest\n            },\n            emotionalDistribution,\n            personalityTraits: this.personalityProfile.traits\n        };\n    }\n    /**\n   * Generate episode ID\n   */ generateEpisodeId() {\n        return `episode_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    /**\n   * Generate tags for episode\n   */ generateTags(content, emotional) {\n        const tags = [];\n        // Content-based tags\n        if (content.summary) {\n            const words = content.summary.toLowerCase().split(/\\W+/).filter((word)=>word.length > 2);\n            tags.push(...words.slice(0, 5)); // Top 5 words\n        }\n        // Participant tags\n        if (content.participants && Array.isArray(content.participants)) {\n            tags.push(...content.participants.map((p)=>`participant:${p}`));\n        }\n        // Emotional tags\n        if (emotional.emotions && Array.isArray(emotional.emotions)) {\n            tags.push(...emotional.emotions.map((e)=>`emotion:${e}`));\n        }\n        // Context tags\n        if (content.context) {\n            tags.push(`context:${content.context}`);\n        }\n        return [\n            ...new Set(tags)\n        ]; // Remove duplicates\n    }\n    /**\n   * Update memory indices\n   */ updateIndices(episode) {\n        // Keyword index\n        if (episode.tags && Array.isArray(episode.tags)) {\n            episode.tags.forEach((tag)=>{\n                if (!this.memoryIndex.has(tag)) {\n                    this.memoryIndex.set(tag, new Set());\n                }\n                this.memoryIndex.get(tag).add(episode.id);\n            });\n        }\n        // Temporal index\n        const dateKey = new Date(episode.timestamp).toISOString().split('T')[0];\n        if (!this.temporalIndex.has(dateKey)) {\n            this.temporalIndex.set(dateKey, []);\n        }\n        this.temporalIndex.get(dateKey).push(episode.id);\n        // Emotional index\n        if (episode.emotional.emotions && Array.isArray(episode.emotional.emotions)) {\n            episode.emotional.emotions.forEach((emotion)=>{\n                if (!this.emotionalIndex.has(emotion)) {\n                    this.emotionalIndex.set(emotion, []);\n                }\n                this.emotionalIndex.get(emotion).push(episode.id);\n            });\n        }\n    }\n    /**\n   * Create connections between related episodes\n   */ createConnections(newEpisode) {\n        const config = _system_config__WEBPACK_IMPORTED_MODULE_0__.globalConfig.getSection('episodicMemory');\n        const maxConnections = 5;\n        const connectionThreshold = 0.3;\n        // Find similar episodes\n        const candidates = this.retrieveEpisodes({\n            keywords: newEpisode.tags.slice(0, 3),\n            limit: 20\n        });\n        const connections = [];\n        candidates.forEach((candidate)=>{\n            if (candidate.id === newEpisode.id) return;\n            const similarity = this.calculateEpisodeSimilarity(newEpisode, candidate);\n            if (similarity > connectionThreshold) {\n                connections.push({\n                    id: candidate.id,\n                    similarity\n                });\n            }\n        });\n        // Sort by similarity and take top connections\n        connections.sort((a, b)=>b.similarity - a.similarity);\n        const topConnections = connections.slice(0, maxConnections);\n        // Create bidirectional connections\n        topConnections.forEach(({ id })=>{\n            newEpisode.connections.push(id);\n            const connectedEpisode = this.episodes.get(id);\n            if (connectedEpisode && !connectedEpisode.connections.includes(newEpisode.id)) {\n                connectedEpisode.connections.push(newEpisode.id);\n            }\n        });\n        console.log(`🔗 Created ${topConnections.length} connections for episode ${newEpisode.id}`);\n    }\n    /**\n   * Calculate similarity between episodes\n   */ calculateEpisodeSimilarity(episode1, episode2) {\n        let similarity = 0;\n        let factors = 0;\n        // Tag similarity\n        if (episode1.tags && episode2.tags && Array.isArray(episode1.tags) && Array.isArray(episode2.tags)) {\n            const commonTags = episode1.tags.filter((tag)=>episode2.tags.includes(tag));\n            const tagSimilarity = commonTags.length / Math.max(episode1.tags.length, episode2.tags.length);\n            similarity += tagSimilarity * 0.4;\n            factors += 0.4;\n        }\n        // Participant similarity\n        if (episode1.content.participants && episode2.content.participants && Array.isArray(episode1.content.participants) && Array.isArray(episode2.content.participants)) {\n            const commonParticipants = episode1.content.participants.filter((p)=>episode2.content.participants.includes(p));\n            const participantSimilarity = commonParticipants.length / Math.max(episode1.content.participants.length, episode2.content.participants.length);\n            similarity += participantSimilarity * 0.3;\n            factors += 0.3;\n        }\n        // Emotional similarity\n        if (episode1.emotional.emotions && episode2.emotional.emotions && Array.isArray(episode1.emotional.emotions) && Array.isArray(episode2.emotional.emotions)) {\n            const commonEmotions = episode1.emotional.emotions.filter((e)=>episode2.emotional.emotions.includes(e));\n            const emotionalSimilarity = commonEmotions.length / Math.max(episode1.emotional.emotions.length, episode2.emotional.emotions.length);\n            similarity += emotionalSimilarity * 0.2;\n            factors += 0.2;\n        }\n        // Temporal proximity (episodes closer in time are more similar)\n        const timeDiff = Math.abs(episode1.timestamp - episode2.timestamp);\n        const maxTimeDiff = 7 * 24 * 60 * 60 * 1000; // 7 days\n        const temporalSimilarity = Math.max(0, 1 - timeDiff / maxTimeDiff);\n        similarity += temporalSimilarity * 0.1;\n        factors += 0.1;\n        return factors > 0 ? similarity / factors : 0;\n    }\n    /**\n   * Calculate relevance score for episode retrieval\n   */ calculateRelevanceScore(episode, query) {\n        let score = 0;\n        // Base importance\n        score += episode.importance * 0.4;\n        // Recency (more recent = higher score)\n        const ageInDays = (Date.now() - episode.timestamp) / (24 * 60 * 60 * 1000);\n        const recencyScore = Math.max(0, 1 - ageInDays / 30); // Decay over 30 days\n        score += recencyScore * 0.3;\n        // Access frequency\n        const accessScore = Math.min(1, episode.accessCount / 10); // Cap at 10 accesses\n        score += accessScore * 0.2;\n        // Query relevance\n        if (query.keywords) {\n            const matchingTags = episode.tags.filter((tag)=>query.keywords.some((keyword)=>tag.includes(keyword.toLowerCase())));\n            const queryRelevance = matchingTags.length / Math.max(query.keywords.length, episode.tags.length);\n            score += queryRelevance * 0.1;\n        }\n        return score;\n    }\n    /**\n   * Update personality profile based on episode\n   */ updatePersonalityProfile(episode) {\n        // Update traits based on emotional patterns\n        const emotions = episode.emotional.emotions;\n        // Check if emotions array exists and is valid\n        if (!emotions || !Array.isArray(emotions)) {\n            return;\n        }\n        if (emotions.includes('curious') || emotions.includes('interested')) {\n            this.personalityProfile.traits.openness = Math.min(1, this.personalityProfile.traits.openness + 0.01);\n        }\n        if (emotions.includes('organized') || emotions.includes('systematic')) {\n            this.personalityProfile.traits.conscientiousness = Math.min(1, this.personalityProfile.traits.conscientiousness + 0.01);\n        }\n        if (emotions.includes('social') || emotions.includes('outgoing')) {\n            this.personalityProfile.traits.extraversion = Math.min(1, this.personalityProfile.traits.extraversion + 0.01);\n        }\n        if (emotions.includes('helpful') || emotions.includes('cooperative')) {\n            this.personalityProfile.traits.agreeableness = Math.min(1, this.personalityProfile.traits.agreeableness + 0.01);\n        }\n        if (emotions.includes('anxious') || emotions.includes('stressed')) {\n            this.personalityProfile.traits.neuroticism = Math.min(1, this.personalityProfile.traits.neuroticism + 0.01);\n        } else if (emotions.includes('calm') || emotions.includes('relaxed')) {\n            this.personalityProfile.traits.neuroticism = Math.max(0, this.personalityProfile.traits.neuroticism - 0.01);\n        }\n    }\n    /**\n   * Consider memory consolidation\n   */ considerConsolidation() {\n        const config = _system_config__WEBPACK_IMPORTED_MODULE_0__.globalConfig.getSection('episodicMemory');\n        const maxEpisodes = config?.maxEpisodes || 1000;\n        if (this.episodes.size > maxEpisodes) {\n            this.consolidateMemories();\n        }\n    }\n    /**\n   * Consolidate memories by clustering and removing low-importance episodes\n   */ consolidateMemories() {\n        console.log('🧠 Starting memory consolidation...');\n        const episodes = Array.from(this.episodes.values());\n        const config = _system_config__WEBPACK_IMPORTED_MODULE_0__.globalConfig.getSection('episodicMemory');\n        const targetSize = Math.floor((config?.maxEpisodes || 1000) * 0.8);\n        // Sort by importance and recency\n        episodes.sort((a, b)=>{\n            const scoreA = a.importance * 0.7 + a.accessCount / 10 * 0.3;\n            const scoreB = b.importance * 0.7 + b.accessCount / 10 * 0.3;\n            return scoreB - scoreA;\n        });\n        // Keep top episodes\n        const episodesToKeep = episodes.slice(0, targetSize);\n        const episodesToRemove = episodes.slice(targetSize);\n        // Remove low-importance episodes\n        episodesToRemove.forEach((episode)=>{\n            this.removeEpisode(episode.id);\n        });\n        // Update clusters\n        this.updateClusters();\n        console.log(`🧠 Memory consolidation complete: ${episodesToRemove.length} episodes removed`);\n    }\n    /**\n   * Remove episode and clean up indices\n   */ removeEpisode(episodeId) {\n        const episode = this.episodes.get(episodeId);\n        if (!episode) return;\n        // Remove from main storage\n        this.episodes.delete(episodeId);\n        // Clean up indices\n        episode.tags.forEach((tag)=>{\n            const tagSet = this.memoryIndex.get(tag);\n            if (tagSet) {\n                tagSet.delete(episodeId);\n                if (tagSet.size === 0) {\n                    this.memoryIndex.delete(tag);\n                }\n            }\n        });\n        // Remove connections\n        episode.connections.forEach((connectedId)=>{\n            const connectedEpisode = this.episodes.get(connectedId);\n            if (connectedEpisode) {\n                connectedEpisode.connections = connectedEpisode.connections.filter((id)=>id !== episodeId);\n            }\n        });\n    }\n    /**\n   * Update memory clusters\n   */ updateClusters() {\n        // Clear existing clusters\n        this.clusters.clear();\n        const episodes = Array.from(this.episodes.values());\n        const clusterThreshold = 0.4;\n        // Group episodes by similarity\n        const processed = new Set();\n        episodes.forEach((episode)=>{\n            if (processed.has(episode.id)) return;\n            const cluster = {\n                id: `cluster_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\n                theme: this.generateClusterTheme(episode),\n                episodes: [\n                    episode.id\n                ],\n                strength: episode.importance,\n                lastReinforced: episode.timestamp,\n                associatedEmotions: [\n                    ...episode.emotional.emotions\n                ]\n            };\n            // Find similar episodes\n            episodes.forEach((otherEpisode)=>{\n                if (processed.has(otherEpisode.id) || otherEpisode.id === episode.id) return;\n                const similarity = this.calculateEpisodeSimilarity(episode, otherEpisode);\n                if (similarity > clusterThreshold) {\n                    cluster.episodes.push(otherEpisode.id);\n                    cluster.strength += otherEpisode.importance;\n                    cluster.lastReinforced = Math.max(cluster.lastReinforced, otherEpisode.timestamp);\n                    // Merge emotions\n                    otherEpisode.emotional.emotions.forEach((emotion)=>{\n                        if (!cluster.associatedEmotions.includes(emotion)) {\n                            cluster.associatedEmotions.push(emotion);\n                        }\n                    });\n                    processed.add(otherEpisode.id);\n                }\n            });\n            processed.add(episode.id);\n            this.clusters.set(cluster.id, cluster);\n        });\n        console.log(`🧠 Updated memory clusters: ${this.clusters.size} clusters created`);\n    }\n    /**\n   * Generate theme for memory cluster\n   */ generateClusterTheme(episode) {\n        // Use most common tags and content summary\n        const commonWords = episode.tags.filter((tag)=>!tag.includes(':')).slice(0, 3).join(' ');\n        return commonWords || episode.content.summary.split(' ').slice(0, 3).join(' ');\n    }\n    /**\n   * Start memory consolidation timer\n   */ startMemoryConsolidation() {\n        // Skip timer setup during tests to prevent Jest timeout issues\n        if (typeof process !== 'undefined' && \"development\" === 'test') {}\n        const config = _system_config__WEBPACK_IMPORTED_MODULE_0__.globalConfig.getSection('conversation');\n        const consolidationInterval = config?.cleanupInterval || 30 * 60 * 1000; // 30 minutes\n        setInterval(()=>{\n            this.considerConsolidation();\n        }, consolidationInterval);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/memory/episodic-memory.ts\n");

/***/ }),

/***/ "(ssr)/./src/lib/semantic/knowledge-bootstrap.ts":
/*!*************************************************!*\
  !*** ./src/lib/semantic/knowledge-bootstrap.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KnowledgeBootstrap: () => (/* binding */ KnowledgeBootstrap)\n/* harmony export */ });\n// =============================================================================\n// KNOWLEDGE BOOTSTRAP MODULE\n// =============================================================================\nclass KnowledgeBootstrap {\n    constructor(embeddingPipeline){\n        this.embeddingPipeline = embeddingPipeline;\n    }\n    async bootstrapFromTokenizer() {\n        console.log('🔧 Bootstrapping chatbot knowledge from tokenizer...');\n        try {\n            // Step 1: Extract vocabulary from tokenizer\n            const vocabulary = await this.extractTokenizerVocabulary();\n            console.log(`📚 Extracted ${vocabulary.length} vocabulary words`);\n            // Step 2: Generate embeddings for vocabulary\n            const vocabularyEmbeddings = await this.generateVocabularyEmbeddings(vocabulary);\n            console.log(`🧠 Generated embeddings for ${vocabularyEmbeddings.size} words`);\n            // Step 3: Build semantic clusters\n            const semanticClusters = this.buildSemanticClusters(vocabularyEmbeddings);\n            console.log(`🔗 Built semantic clusters for ${semanticClusters.size} concepts`);\n            // Step 4: Create knowledge base\n            const knowledgeBase = this.createKnowledgeBase(vocabularyEmbeddings, semanticClusters);\n            console.log('✅ Knowledge base bootstrap complete');\n            return knowledgeBase;\n        } catch (error) {\n            console.error('❌ Knowledge bootstrap failed:', error);\n            throw new Error(`Knowledge bootstrap failed: ${error instanceof Error ? error.message : String(error)}`);\n        }\n    }\n    async extractTokenizerVocabulary() {\n        console.log('🔍 Attempting to extract tokenizer vocabulary...');\n        // Try multiple ways to access tokenizer vocabulary\n        const tokenizer = this.embeddingPipeline.tokenizer;\n        console.log('Tokenizer available:', !!tokenizer);\n        if (!tokenizer) {\n            throw new Error('Tokenizer not available in embedding pipeline');\n        }\n        console.log('Tokenizer properties:', Object.keys(tokenizer));\n        // For BERT-style tokenizers, we need to access the vocabulary differently\n        let vocab = null;\n        // Try accessing the actual vocabulary words (not token IDs)\n        if (tokenizer.model && tokenizer.model.vocab) {\n            const vocabObj = tokenizer.model.vocab;\n            console.log('Vocab object type:', typeof vocabObj);\n            console.log('Vocab object keys sample:', Object.keys(vocabObj).slice(0, 20));\n            // Check if this is a token ID -> word mapping or word -> token ID mapping\n            const firstKey = Object.keys(vocabObj)[0];\n            const firstValue = vocabObj[firstKey];\n            console.log('First vocab entry:', firstKey, '->', firstValue);\n            if (typeof firstValue === 'number') {\n                // This is word -> token ID mapping, use the keys (words)\n                vocab = Object.keys(vocabObj);\n                console.log('Found word->ID mapping, using keys as vocabulary');\n            } else if (typeof firstKey === 'string' && /^\\d+$/.test(firstKey)) {\n                // This is token ID -> word mapping, use the values (words)\n                vocab = Object.values(vocabObj);\n                console.log('Found ID->word mapping, using values as vocabulary');\n            } else {\n                vocab = Object.keys(vocabObj);\n                console.log('Using keys as vocabulary (default)');\n            }\n            console.log('Extracted vocab length:', vocab.length);\n            console.log('Sample vocab words:', vocab.slice(0, 20));\n        } else if (tokenizer.vocab) {\n            vocab = Object.keys(tokenizer.vocab);\n            console.log('Found vocab via tokenizer.vocab:', vocab.length);\n        } else if (tokenizer.getVocab) {\n            vocab = Object.keys(tokenizer.getVocab());\n            console.log('Found vocab via tokenizer.getVocab():', vocab.length);\n        } else {\n            throw new Error('Unable to access tokenizer vocabulary - no known vocabulary access method found');\n        }\n        if (!vocab || vocab.length === 0) {\n            throw new Error('Tokenizer vocabulary is empty or null');\n        }\n        const filtered = this.filterMeaningfulWords(vocab);\n        console.log('Filtered vocabulary:', filtered.length);\n        if (filtered.length === 0) {\n            throw new Error('No meaningful words found in tokenizer vocabulary after filtering');\n        }\n        return filtered;\n    }\n    filterMeaningfulWords(vocab) {\n        console.log('🔍 Filtering vocabulary from', vocab.length, 'words');\n        console.log('Sample vocab words:', vocab.slice(0, 20));\n        // Check if this is a numeric tokenizer (like BERT's WordPiece)\n        const isNumericTokenizer = vocab.slice(0, 100).every((token)=>/^\\d+$/.test(token));\n        if (isNumericTokenizer) {\n            throw new Error('Detected numeric tokenizer with token IDs instead of vocabulary words - cannot extract meaningful vocabulary');\n        }\n        const filtered = vocab.filter((word)=>{\n            // Filter out special tokens, fragments, and non-words\n            if (word.startsWith('[') || word.startsWith('<') || word.startsWith('##')) return false;\n            if (word.length < 2 || word.length > 15) return false;\n            if (/^\\d+$/.test(word)) return false; // Pure numbers\n            if (!/^[a-zA-Z]+$/.test(word)) return false; // Only letters\n            return true;\n        }).slice(0, 800); // Limit to manageable size\n        console.log('Filtered to', filtered.length, 'meaningful words');\n        console.log('Sample filtered words:', filtered.slice(0, 20));\n        return filtered;\n    }\n    async generateVocabularyEmbeddings(vocabulary) {\n        const vocabularyEmbeddings = new Map();\n        // Process in batches to avoid overwhelming the system\n        const batchSize = 50;\n        for(let i = 0; i < vocabulary.length; i += batchSize){\n            const batch = vocabulary.slice(i, i + batchSize);\n            for (const word of batch){\n                try {\n                    const result = await this.embeddingPipeline(word);\n                    const embedding = Array.from(result.data);\n                    vocabularyEmbeddings.set(word, embedding);\n                } catch (error) {\n                    console.warn(`⚠️ Failed to generate embedding for word: ${word}`);\n                }\n            }\n            // Small delay between batches\n            if (i + batchSize < vocabulary.length) {\n                await new Promise((resolve)=>setTimeout(resolve, 10));\n            }\n        }\n        return vocabularyEmbeddings;\n    }\n    buildSemanticClusters(vocabularyEmbeddings) {\n        const semanticClusters = new Map();\n        for (const [word, embedding] of vocabularyEmbeddings){\n            const similarWords = this.findSimilarWords(word, embedding, vocabularyEmbeddings);\n            semanticClusters.set(word, similarWords);\n        }\n        return semanticClusters;\n    }\n    findSimilarWords(targetWord, targetEmbedding, allEmbeddings) {\n        const similarities = [];\n        for (const [word, embedding] of allEmbeddings){\n            if (word !== targetWord) {\n                const similarity = this.calculateCosineSimilarity(targetEmbedding, embedding);\n                similarities.push({\n                    word,\n                    similarity\n                });\n            }\n        }\n        // Return top 5 most similar words\n        return similarities.sort((a, b)=>b.similarity - a.similarity).slice(0, 5).map((item)=>item.word);\n    }\n    calculateCosineSimilarity(a, b) {\n        const dotProduct = a.reduce((sum, val, i)=>sum + val * b[i], 0);\n        const magnitudeA = Math.sqrt(a.reduce((sum, val)=>sum + val * val, 0));\n        const magnitudeB = Math.sqrt(b.reduce((sum, val)=>sum + val * val, 0));\n        return magnitudeA && magnitudeB ? dotProduct / (magnitudeA * magnitudeB) : 0;\n    }\n    createKnowledgeBase(vocabularyEmbeddings, semanticClusters) {\n        const vocabulary = new Map();\n        const vocabularyPrimes = new Map();\n        for (const [word, embedding] of vocabularyEmbeddings){\n            const primeFactors = this.embeddingsToPrimes(embedding);\n            const similarWords = semanticClusters.get(word) || [];\n            vocabulary.set(word, {\n                word,\n                embedding,\n                primeFactors,\n                similarWords\n            });\n            // Store prime factorizations for resonance engine\n            vocabularyPrimes.set(word, primeFactors);\n        }\n        return {\n            vocabulary,\n            semanticClusters,\n            conceptEmbeddings: vocabularyEmbeddings,\n            vocabularyPrimes\n        };\n    }\n    embeddingsToPrimes(embeddings, threshold = 0.02) {\n        // Simple prime factorization (reusing logic from PrimeMath)\n        const primes = this.generatePrimes(embeddings.length);\n        const primeFactors = {};\n        embeddings.forEach((value, index)=>{\n            if (Math.abs(value) > threshold) {\n                const prime = primes[index % primes.length];\n                const weight = Math.floor(Math.abs(value) * 1000) + 1;\n                primeFactors[prime] = (primeFactors[prime] || 0) + weight;\n            }\n        });\n        return primeFactors;\n    }\n    generatePrimes(n) {\n        const primes = [\n            2\n        ];\n        let num = 3;\n        while(primes.length < n){\n            let isPrime = true;\n            for(let i = 0; i < primes.length && primes[i] * primes[i] <= num; i++){\n                if (num % primes[i] === 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) primes.push(num);\n            num += 2;\n        }\n        return primes;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/semantic/knowledge-bootstrap.ts\n");

/***/ }),

/***/ "(ssr)/./src/lib/semantic/schema-vocabulary.ts":
/*!***********************************************!*\
  !*** ./src/lib/semantic/schema-vocabulary.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SchemaVocabulary: () => (/* binding */ SchemaVocabulary)\n/* harmony export */ });\n// =============================================================================\n// SCHEMA.ORG VOCABULARY - Semantic Entity and Relationship Definitions\n// =============================================================================\nclass SchemaVocabulary {\n    constructor(){\n        this.entities = new Map();\n        this.relationships = new Map();\n        this.initializeBasicSchema();\n    }\n    /**\n   * Initialize basic Schema.org vocabulary for conversational AI\n   */ initializeBasicSchema() {\n        // Core entity types\n        this.addEntity('Thing', {\n            type: 'Thing',\n            properties: [\n                'name',\n                'description',\n                'identifier'\n            ],\n            relationships: [],\n            parentTypes: [],\n            description: 'The most generic type of item'\n        });\n        this.addEntity('Person', {\n            type: 'Person',\n            properties: [\n                'name',\n                'givenName',\n                'familyName',\n                'email',\n                'telephone'\n            ],\n            relationships: [\n                'knows',\n                'owns',\n                'memberOf',\n                'worksFor'\n            ],\n            parentTypes: [\n                'Thing'\n            ],\n            description: 'A person (alive, dead, undead, or fictional)'\n        });\n        this.addEntity('Animal', {\n            type: 'Animal',\n            properties: [\n                'name',\n                'species',\n                'breed',\n                'age',\n                'color'\n            ],\n            relationships: [\n                'ownedBy',\n                'livesAt',\n                'relatedTo'\n            ],\n            parentTypes: [\n                'Thing'\n            ],\n            description: 'Animals including pets, wildlife, etc.'\n        });\n        this.addEntity('Place', {\n            type: 'Place',\n            properties: [\n                'name',\n                'address',\n                'geo',\n                'telephone'\n            ],\n            relationships: [\n                'containedInPlace',\n                'contains',\n                'near'\n            ],\n            parentTypes: [\n                'Thing'\n            ],\n            description: 'Entities that have a somewhat fixed, physical extension'\n        });\n        this.addEntity('Organization', {\n            type: 'Organization',\n            properties: [\n                'name',\n                'description',\n                'email',\n                'telephone',\n                'address'\n            ],\n            relationships: [\n                'member',\n                'parentOrganization',\n                'subOrganization'\n            ],\n            parentTypes: [\n                'Thing'\n            ],\n            description: 'An organization such as a school, NGO, corporation, club, etc.'\n        });\n        this.addEntity('Vehicle', {\n            type: 'Vehicle',\n            properties: [\n                'name',\n                'model',\n                'manufacturer',\n                'color',\n                'year'\n            ],\n            relationships: [\n                'ownedBy',\n                'locatedAt'\n            ],\n            parentTypes: [\n                'Thing'\n            ],\n            description: 'A vehicle is a device that is designed or used to transport people or cargo'\n        });\n        this.addEntity('Product', {\n            type: 'Product',\n            properties: [\n                'name',\n                'description',\n                'brand',\n                'model',\n                'color'\n            ],\n            relationships: [\n                'ownedBy',\n                'manufacturedBy'\n            ],\n            parentTypes: [\n                'Thing'\n            ],\n            description: 'Any offered product or service'\n        });\n        // Core relationships\n        this.addRelationship('hasName', {\n            property: 'hasName',\n            domain: [\n                'Thing'\n            ],\n            range: [\n                'Text'\n            ],\n            description: 'The name of the item'\n        });\n        this.addRelationship('owns', {\n            property: 'owns',\n            domain: [\n                'Person'\n            ],\n            range: [\n                'Thing'\n            ],\n            description: 'Products owned by the person'\n        });\n        this.addRelationship('ownedBy', {\n            property: 'ownedBy',\n            domain: [\n                'Thing'\n            ],\n            range: [\n                'Person'\n            ],\n            description: 'The person who owns this item'\n        });\n        this.addRelationship('knows', {\n            property: 'knows',\n            domain: [\n                'Person'\n            ],\n            range: [\n                'Person'\n            ],\n            description: 'The most generic bi-directional social/work relation'\n        });\n        this.addRelationship('livesAt', {\n            property: 'livesAt',\n            domain: [\n                'Person',\n                'Animal'\n            ],\n            range: [\n                'Place'\n            ],\n            description: 'The place where the person or animal lives'\n        });\n        this.addRelationship('worksFor', {\n            property: 'worksFor',\n            domain: [\n                'Person'\n            ],\n            range: [\n                'Organization'\n            ],\n            description: 'Organizations that the person works for'\n        });\n        console.log('📚 Schema.org vocabulary initialized with', this.entities.size, 'entities and', this.relationships.size, 'relationships');\n    }\n    /**\n   * Add a new entity type to the vocabulary\n   */ addEntity(type, entity) {\n        this.entities.set(type, entity);\n    }\n    /**\n   * Add a new relationship to the vocabulary\n   */ addRelationship(property, relationship) {\n        this.relationships.set(property, relationship);\n    }\n    /**\n   * Infer entity type from text and context\n   */ inferEntityType(entityText, context) {\n        const lowerText = entityText.toLowerCase();\n        // Direct type mapping\n        const typeMapping = {\n            'dog': 'Animal',\n            'cat': 'Animal',\n            'pet': 'Animal',\n            'bird': 'Animal',\n            'fish': 'Animal',\n            'horse': 'Animal',\n            'car': 'Vehicle',\n            'truck': 'Vehicle',\n            'bike': 'Vehicle',\n            'motorcycle': 'Vehicle',\n            'house': 'Place',\n            'home': 'Place',\n            'office': 'Place',\n            'school': 'Place',\n            'company': 'Organization',\n            'business': 'Organization',\n            'team': 'Organization',\n            'friend': 'Person',\n            'family': 'Person',\n            'brother': 'Person',\n            'sister': 'Person',\n            'mother': 'Person',\n            'father': 'Person',\n            'phone': 'Product',\n            'computer': 'Product',\n            'book': 'Product'\n        };\n        const inferredType = typeMapping[lowerText];\n        if (inferredType) {\n            console.log(`🔍 Inferred entity type: ${entityText} → ${inferredType}`);\n            return inferredType;\n        }\n        // Context-based inference\n        if (context) {\n            if (context.includes('name') && !typeMapping[lowerText]) {\n                // If we're talking about names and don't recognize the entity, assume it's a person\n                return 'Person';\n            }\n        }\n        return null;\n    }\n    /**\n   * Get valid relationships for an entity type\n   */ getValidRelationships(entityType) {\n        const entity = this.entities.get(entityType);\n        if (!entity) return [];\n        const relationships = [\n            ...entity.relationships\n        ];\n        // Add inherited relationships from parent types\n        entity.parentTypes.forEach((parentType)=>{\n            const parentEntity = this.entities.get(parentType);\n            if (parentEntity) {\n                relationships.push(...parentEntity.relationships);\n            }\n        });\n        return [\n            ...new Set(relationships)\n        ];\n    }\n    /**\n   * Get valid properties for an entity type\n   */ getValidProperties(entityType) {\n        const entity = this.entities.get(entityType);\n        if (!entity) return [];\n        const properties = [\n            ...entity.properties\n        ];\n        // Add inherited properties from parent types\n        entity.parentTypes.forEach((parentType)=>{\n            const parentEntity = this.entities.get(parentType);\n            if (parentEntity) {\n                properties.push(...parentEntity.properties);\n            }\n        });\n        return [\n            ...new Set(properties)\n        ];\n    }\n    /**\n   * Parse conversational input for semantic relationships\n   */ parseSemanticRelationships(text) {\n        console.log('🔍 Parsing semantic relationships in:', text);\n        // Pattern: \"My X's name is Y\"\n        const namePattern = /my\\s+(\\w+)'?s?\\s+name\\s+is\\s+(\\w+)/i;\n        const nameMatch = text.match(namePattern);\n        if (nameMatch) {\n            const entityText = nameMatch[1];\n            const nameText = nameMatch[2];\n            const entityType = this.inferEntityType(entityText);\n            return {\n                subject: {\n                    text: entityText,\n                    type: entityType\n                },\n                predicate: 'hasName',\n                object: {\n                    text: nameText,\n                    type: 'Text'\n                },\n                confidence: 0.9\n            };\n        }\n        // Pattern: \"I have a X\"\n        const ownershipPattern = /i\\s+have\\s+a\\s+(\\w+)/i;\n        const ownershipMatch = text.match(ownershipPattern);\n        if (ownershipMatch) {\n            const entityText = ownershipMatch[1];\n            const entityType = this.inferEntityType(entityText);\n            return {\n                subject: {\n                    text: 'I',\n                    type: 'Person'\n                },\n                predicate: 'owns',\n                object: {\n                    text: entityText,\n                    type: entityType\n                },\n                confidence: 0.8\n            };\n        }\n        // Pattern: \"My name is X\"\n        const identityPattern = /my\\s+name\\s+is\\s+(\\w+)/i;\n        const identityMatch = text.match(identityPattern);\n        if (identityMatch) {\n            const nameText = identityMatch[1];\n            return {\n                subject: {\n                    text: 'I',\n                    type: 'Person'\n                },\n                predicate: 'hasName',\n                object: {\n                    text: nameText,\n                    type: 'Text'\n                },\n                confidence: 0.95\n            };\n        }\n        return null;\n    }\n    /**\n   * Generate semantic query from conversational input\n   */ generateSemanticQuery(text) {\n        console.log('🔍 Generating semantic query for:', text);\n        // Query patterns: \"What is my X's name?\"\n        const queryPattern = /what\\s+is\\s+my\\s+(\\w+)'?s?\\s+(\\w+)/i;\n        const queryMatch = text.match(queryPattern);\n        if (queryMatch) {\n            const entityText = queryMatch[1];\n            const propertyText = queryMatch[2];\n            const entityType = this.inferEntityType(entityText);\n            if (propertyText === 'name') {\n                return {\n                    queryType: 'retrieve',\n                    subject: entityText,\n                    predicate: 'hasName',\n                    entityType: entityType || undefined\n                };\n            }\n        }\n        // Identity query: \"What is my name?\"\n        if (/what\\s+is\\s+my\\s+name/i.test(text)) {\n            return {\n                queryType: 'retrieve',\n                subject: 'user',\n                predicate: 'hasName'\n            };\n        }\n        return null;\n    }\n    /**\n   * Get entity information\n   */ getEntityInfo(entityType) {\n        return this.entities.get(entityType) || null;\n    }\n    /**\n   * Get relationship information\n   */ getRelationshipInfo(property) {\n        return this.relationships.get(property) || null;\n    }\n    /**\n   * Check if a relationship is valid between two entity types\n   */ isValidRelationship(subjectType, predicate, objectType) {\n        const relationship = this.relationships.get(predicate);\n        if (!relationship) return false;\n        const validDomain = relationship.domain.includes(subjectType) || relationship.domain.includes('Thing');\n        const validRange = relationship.range.includes(objectType) || relationship.range.includes('Thing') || relationship.range.includes('Text');\n        return validDomain && validRange;\n    }\n    /**\n   * Get all entity types\n   */ getAllEntityTypes() {\n        return Array.from(this.entities.keys());\n    }\n    /**\n   * Get all relationship types\n   */ getAllRelationshipTypes() {\n        return Array.from(this.relationships.keys());\n    }\n    /**\n   * Get debug information\n   */ getDebugInfo() {\n        return {\n            entityCount: this.entities.size,\n            relationshipCount: this.relationships.size,\n            entities: Object.fromEntries(this.entities),\n            relationships: Object.fromEntries(this.relationships)\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/semantic/schema-vocabulary.ts\n");

/***/ }),

/***/ "(ssr)/./src/lib/semantic/semantic-layer.ts":
/*!********************************************!*\
  !*** ./src/lib/semantic/semantic-layer.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SemanticLayer: () => (/* binding */ SemanticLayer)\n/* harmony export */ });\n/* harmony import */ var _schema_vocabulary__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schema-vocabulary */ \"(ssr)/./src/lib/semantic/schema-vocabulary.ts\");\n// =============================================================================\n// SEMANTIC LAYER - Natural Language to Prime Resonance Bridge\n// =============================================================================\n\nclass SemanticLayer {\n    constructor(){\n        this.patterns = [];\n        this.conceptNetCache = new Map();\n        this.schemaVocabulary = new _schema_vocabulary__WEBPACK_IMPORTED_MODULE_0__.SchemaVocabulary();\n        this.initializePatterns();\n    }\n    /**\n   * Initialize common conversational patterns for natural language understanding\n   */ initializePatterns() {\n        this.patterns = [\n            // Identity/Name patterns\n            {\n                pattern: /my name is (\\w+)/i,\n                intent: 'IDENTITY_INTRODUCTION',\n                semanticBoosts: [\n                    'name',\n                    'identity',\n                    'person',\n                    'individual',\n                    'called',\n                    'known'\n                ],\n                responseTemplate: 'Nice to meet you, {name}! I\\'m PrimeBot.'\n            },\n            {\n                pattern: /i am (\\w+)/i,\n                intent: 'IDENTITY_INTRODUCTION',\n                semanticBoosts: [\n                    'name',\n                    'identity',\n                    'person',\n                    'individual'\n                ],\n                responseTemplate: 'Nice to meet you, {name}! I\\'m PrimeBot.'\n            },\n            {\n                pattern: /my (\\w+)'?s? name is (\\w+)/i,\n                intent: 'ENTITY_INTRODUCTION',\n                semanticBoosts: [\n                    'name',\n                    'identity',\n                    'called',\n                    'known',\n                    'entity'\n                ],\n                responseTemplate: 'Nice to know that your {entity} is named {name}!'\n            },\n            {\n                pattern: /her name is (\\w+)/i,\n                intent: 'ENTITY_INTRODUCTION',\n                semanticBoosts: [\n                    'name',\n                    'identity',\n                    'called',\n                    'known',\n                    'entity'\n                ],\n                responseTemplate: 'Nice to know that her name is {name}!'\n            },\n            {\n                pattern: /his name is (\\w+)/i,\n                intent: 'ENTITY_INTRODUCTION',\n                semanticBoosts: [\n                    'name',\n                    'identity',\n                    'called',\n                    'known',\n                    'entity'\n                ],\n                responseTemplate: 'Nice to know that his name is {name}!'\n            },\n            {\n                pattern: /what is my name/i,\n                intent: 'IDENTITY_QUERY',\n                semanticBoosts: [\n                    'name',\n                    'identity',\n                    'remember',\n                    'recall',\n                    'called',\n                    'known'\n                ],\n                responseTemplate: 'Based on our conversation, your name is {name}.'\n            },\n            {\n                pattern: /what is my (\\w+)'?s? name/i,\n                intent: 'ENTITY_QUERY',\n                semanticBoosts: [\n                    'name',\n                    'identity',\n                    'remember',\n                    'recall',\n                    'called',\n                    'known'\n                ],\n                responseTemplate: 'Based on our conversation, your {entity} is named {name}.'\n            },\n            {\n                pattern: /what is my (\\w+)'s name/i,\n                intent: 'ENTITY_QUERY',\n                semanticBoosts: [\n                    'name',\n                    'identity',\n                    'remember',\n                    'recall',\n                    'called',\n                    'known'\n                ],\n                responseTemplate: 'Based on our conversation, your {entity} is named {name}.'\n            },\n            {\n                pattern: /who am i/i,\n                intent: 'IDENTITY_QUERY',\n                semanticBoosts: [\n                    'identity',\n                    'person',\n                    'individual',\n                    'self',\n                    'me'\n                ]\n            },\n            // Bot identity patterns\n            {\n                pattern: /who are you/i,\n                intent: 'BOT_IDENTITY_QUERY',\n                semanticBoosts: [\n                    'identity',\n                    'bot',\n                    'assistant',\n                    'who',\n                    'you'\n                ],\n                responseTemplate: 'I\\'m PrimeBot, an AI assistant powered by mathematical prime factorization.'\n            },\n            {\n                pattern: /what is your name/i,\n                intent: 'BOT_IDENTITY_QUERY',\n                semanticBoosts: [\n                    'name',\n                    'identity',\n                    'bot',\n                    'assistant'\n                ],\n                responseTemplate: 'My name is PrimeBot.'\n            },\n            // Greeting patterns\n            {\n                pattern: /^(hello|hi|hey|greetings)/i,\n                intent: 'GREETING',\n                semanticBoosts: [\n                    'hello',\n                    'greeting',\n                    'welcome',\n                    'salutation',\n                    'social',\n                    'friendly'\n                ],\n                responseTemplate: 'Hello! I\\'m PrimeBot. How can I help you today?'\n            },\n            {\n                pattern: /good (morning|afternoon|evening)/i,\n                intent: 'GREETING',\n                semanticBoosts: [\n                    'greeting',\n                    'time',\n                    'polite',\n                    'social',\n                    'welcome'\n                ]\n            },\n            // Question patterns - specific patterns first\n            {\n                pattern: /^what\\s+is\\s+my\\s+name/i,\n                intent: 'IDENTITY_QUERY',\n                semanticBoosts: [\n                    'name',\n                    'identity',\n                    'remember',\n                    'recall',\n                    'called',\n                    'known'\n                ],\n                responseTemplate: 'Based on our conversation, your name is {name}.'\n            },\n            {\n                pattern: /^what (is|are|was|were)/i,\n                intent: 'INFORMATION_REQUEST',\n                semanticBoosts: [\n                    'question',\n                    'information',\n                    'explain',\n                    'definition',\n                    'knowledge'\n                ]\n            },\n            {\n                pattern: /^(how|why|when|where)/i,\n                intent: 'INFORMATION_REQUEST',\n                semanticBoosts: [\n                    'question',\n                    'inquiry',\n                    'explanation',\n                    'information',\n                    'help'\n                ]\n            },\n            {\n                pattern: /\\?$/,\n                intent: 'QUESTION',\n                semanticBoosts: [\n                    'question',\n                    'inquiry',\n                    'ask',\n                    'information',\n                    'help'\n                ]\n            },\n            // Help patterns\n            {\n                pattern: /(help|assist|support)/i,\n                intent: 'HELP_REQUEST',\n                semanticBoosts: [\n                    'help',\n                    'assist',\n                    'support',\n                    'aid',\n                    'guidance',\n                    'service'\n                ],\n                responseTemplate: 'I\\'m here to help! What would you like to know or discuss?'\n            },\n            // Gratitude patterns\n            {\n                pattern: /(thank|thanks|grateful)/i,\n                intent: 'GRATITUDE',\n                semanticBoosts: [\n                    'thanks',\n                    'gratitude',\n                    'appreciation',\n                    'polite',\n                    'positive'\n                ],\n                responseTemplate: 'You\\'re welcome! I\\'m glad I could help.'\n            },\n            // Positive feedback\n            {\n                pattern: /(good|great|excellent|awesome|wonderful)/i,\n                intent: 'POSITIVE_FEEDBACK',\n                semanticBoosts: [\n                    'good',\n                    'positive',\n                    'approval',\n                    'satisfaction',\n                    'pleased'\n                ],\n                responseTemplate: 'That\\'s wonderful! Is there anything else I can help you with?'\n            },\n            // Understanding/Knowledge\n            {\n                pattern: /(understand|know|learn|explain)/i,\n                intent: 'KNOWLEDGE_REQUEST',\n                semanticBoosts: [\n                    'understand',\n                    'knowledge',\n                    'learn',\n                    'explain',\n                    'information',\n                    'teach'\n                ]\n            }\n        ];\n    }\n    /**\n   * Analyze input text for semantic patterns and intent\n   */ analyzeSemanticContext(input) {\n        console.log('🧠 Analyzing semantic context for:', input);\n        let bestMatch = null;\n        let confidence = 0;\n        let entities = [];\n        // Find best matching pattern\n        for (const pattern of this.patterns){\n            const match = input.match(pattern.pattern);\n            if (match) {\n                bestMatch = pattern;\n                confidence = 0.8; // High confidence for pattern matches\n                // Extract entities (like names)\n                if (match.length > 1) {\n                    entities = match.slice(1);\n                }\n                break;\n            }\n        }\n        // If no pattern match, try to extract semantic meaning from keywords\n        if (!bestMatch) {\n            const keywords = this.extractKeywords(input);\n            const semanticBoosts = this.getSemanticBoostsFromKeywords(keywords);\n            return {\n                intent: 'GENERAL_CONVERSATION',\n                entities: keywords,\n                semanticBoosts,\n                confidence: 0.3\n            };\n        }\n        console.log('🎯 Detected intent:', bestMatch.intent);\n        console.log('🔗 Semantic boosts:', bestMatch.semanticBoosts);\n        console.log('📝 Entities:', entities);\n        return {\n            intent: bestMatch.intent,\n            entities,\n            semanticBoosts: bestMatch.semanticBoosts,\n            confidence\n        };\n    }\n    /**\n   * Extract keywords from input text\n   */ extractKeywords(input) {\n        return input.toLowerCase().split(/\\W+/).filter((word)=>word.length > 2).filter((word)=>!this.isStopWord(word));\n    }\n    /**\n   * Check if word is a stop word\n   */ isStopWord(word) {\n        const stopWords = [\n            'the',\n            'and',\n            'or',\n            'but',\n            'in',\n            'on',\n            'at',\n            'to',\n            'for',\n            'of',\n            'with',\n            'by',\n            'is',\n            'are',\n            'was',\n            'were',\n            'be',\n            'been',\n            'have',\n            'has',\n            'had',\n            'do',\n            'does',\n            'did',\n            'will',\n            'would',\n            'could',\n            'should',\n            'may',\n            'might',\n            'can'\n        ];\n        return stopWords.includes(word);\n    }\n    /**\n   * Get semantic boosts from keywords using simple semantic associations\n   */ getSemanticBoostsFromKeywords(keywords) {\n        const semanticMap = {\n            'name': [\n                'identity',\n                'person',\n                'individual',\n                'called',\n                'known'\n            ],\n            'hello': [\n                'greeting',\n                'welcome',\n                'social',\n                'friendly'\n            ],\n            'help': [\n                'assist',\n                'support',\n                'aid',\n                'guidance'\n            ],\n            'what': [\n                'question',\n                'information',\n                'inquiry'\n            ],\n            'how': [\n                'method',\n                'process',\n                'way',\n                'explanation'\n            ],\n            'why': [\n                'reason',\n                'cause',\n                'explanation',\n                'purpose'\n            ],\n            'when': [\n                'time',\n                'schedule',\n                'timing'\n            ],\n            'where': [\n                'location',\n                'place',\n                'position'\n            ],\n            'who': [\n                'person',\n                'identity',\n                'individual'\n            ],\n            'good': [\n                'positive',\n                'quality',\n                'approval'\n            ],\n            'bad': [\n                'negative',\n                'problem',\n                'issue'\n            ],\n            'like': [\n                'preference',\n                'enjoy',\n                'positive'\n            ],\n            'love': [\n                'strong_positive',\n                'emotion',\n                'preference'\n            ],\n            'hate': [\n                'strong_negative',\n                'dislike',\n                'emotion'\n            ],\n            'want': [\n                'desire',\n                'need',\n                'request'\n            ],\n            'need': [\n                'requirement',\n                'necessity',\n                'important'\n            ],\n            'think': [\n                'opinion',\n                'belief',\n                'cognitive'\n            ],\n            'feel': [\n                'emotion',\n                'sensation',\n                'experience'\n            ],\n            'know': [\n                'knowledge',\n                'information',\n                'understanding'\n            ],\n            'understand': [\n                'comprehension',\n                'knowledge',\n                'clarity'\n            ],\n            'learn': [\n                'education',\n                'knowledge',\n                'growth'\n            ],\n            'teach': [\n                'education',\n                'instruction',\n                'knowledge'\n            ],\n            'work': [\n                'job',\n                'employment',\n                'activity',\n                'function'\n            ],\n            'play': [\n                'recreation',\n                'fun',\n                'game',\n                'entertainment'\n            ],\n            'time': [\n                'temporal',\n                'schedule',\n                'duration'\n            ],\n            'place': [\n                'location',\n                'position',\n                'area'\n            ],\n            'thing': [\n                'object',\n                'item',\n                'entity'\n            ],\n            'person': [\n                'individual',\n                'human',\n                'people'\n            ],\n            'people': [\n                'group',\n                'humans',\n                'social'\n            ],\n            'family': [\n                'relatives',\n                'relationship',\n                'personal'\n            ],\n            'friend': [\n                'social',\n                'relationship',\n                'personal'\n            ],\n            'home': [\n                'residence',\n                'place',\n                'personal'\n            ],\n            'school': [\n                'education',\n                'learning',\n                'institution'\n            ],\n            'book': [\n                'reading',\n                'knowledge',\n                'information'\n            ],\n            'computer': [\n                'technology',\n                'digital',\n                'tool'\n            ],\n            'phone': [\n                'communication',\n                'technology',\n                'contact'\n            ],\n            'car': [\n                'transportation',\n                'vehicle',\n                'travel'\n            ],\n            'food': [\n                'nutrition',\n                'eating',\n                'sustenance'\n            ],\n            'water': [\n                'drink',\n                'liquid',\n                'essential'\n            ],\n            'money': [\n                'finance',\n                'currency',\n                'value'\n            ],\n            'job': [\n                'work',\n                'employment',\n                'career'\n            ]\n        };\n        const boosts = [];\n        for (const keyword of keywords){\n            if (semanticMap[keyword]) {\n                boosts.push(...semanticMap[keyword]);\n            }\n            boosts.push(keyword); // Include the keyword itself\n        }\n        return [\n            ...new Set(boosts)\n        ]; // Remove duplicates\n    }\n    /**\n   * Generate contextual response based on semantic analysis using Schema.org vocabulary\n   */ generateContextualResponse(semanticContext, conversationHistory, resonantWords) {\n        console.log('🎭 Generating knowledge-driven response for intent:', semanticContext.intent);\n        // Use Schema.org vocabulary to understand semantic relationships\n        const lastInput = conversationHistory[conversationHistory.length - 1] || '';\n        const semanticRelationship = this.schemaVocabulary.parseSemanticRelationships(lastInput);\n        const semanticQuery = this.schemaVocabulary.generateSemanticQuery(lastInput);\n        console.log('🔍 Semantic relationship:', semanticRelationship);\n        console.log('🔍 Semantic query:', semanticQuery);\n        // Handle semantic queries (retrieve information)\n        if (semanticQuery?.queryType === 'retrieve') {\n            return this.handleSemanticRetrieval(semanticQuery, conversationHistory, semanticContext);\n        }\n        // Handle semantic relationships (store information)\n        if (semanticRelationship && semanticRelationship.confidence > 0.8) {\n            return this.handleSemanticRelationship(semanticRelationship, semanticContext);\n        }\n        // Handle intent-based responses using semantic understanding\n        return this.generateIntentBasedResponse(semanticContext, conversationHistory, resonantWords);\n    }\n    /**\n   * Handle semantic information retrieval\n   */ handleSemanticRetrieval(query, conversationHistory, semanticContext) {\n        const context = conversationHistory.join(' ').toLowerCase();\n        if (query.predicate === 'hasName') {\n            if (query.subject === 'user') {\n                // Query for user's name\n                const nameMatch = context.match(/my name is (\\w+)/i);\n                if (nameMatch) {\n                    return `Your name is ${nameMatch[1]}.`;\n                }\n                return \"I don't recall you mentioning your name. What is your name?\";\n            } else {\n                // Query for entity's name\n                const entityType = query.subject;\n                const entityPattern = new RegExp(`my ${entityType}'?s? name is (\\\\w+)`, 'i');\n                const entityMatch = context.match(entityPattern);\n                if (entityMatch) {\n                    const entityName = entityMatch[1];\n                    const schemaType = this.schemaVocabulary.inferEntityType(entityType);\n                    return `Your ${entityType} is named ${entityName}.` + (schemaType ? ` That's a lovely name for ${schemaType === 'Animal' ? 'an animal' : 'a ' + schemaType.toLowerCase()}.` : '');\n                }\n                return `I don't recall you mentioning your ${entityType}'s name. What is your ${entityType}'s name?`;\n            }\n        }\n        return \"I'm processing that semantic query. Could you provide more details?\";\n    }\n    /**\n   * Handle semantic relationship storage\n   */ handleSemanticRelationship(relationship, semanticContext) {\n        const { subject, predicate, object } = relationship;\n        if (predicate === 'hasName') {\n            if (subject.text === 'I') {\n                // User introducing themselves\n                return `Nice to meet you, ${object.text}! I'm PrimeBot. How can I assist you today?`;\n            } else {\n                // User introducing an entity\n                const entityType = this.schemaVocabulary.inferEntityType(subject.text);\n                const entityInfo = entityType ? this.schemaVocabulary.getEntityInfo(entityType) : null;\n                let response = `Nice to know that your ${subject.text} is named ${object.text}!`;\n                if (entityInfo && entityType) {\n                    // Add Schema.org-informed context\n                    const validProperties = this.schemaVocabulary.getValidProperties(entityType);\n                    const validRelationships = this.schemaVocabulary.getValidRelationships(entityType);\n                    if (entityType === 'Animal') {\n                        response += ` Tell me more about ${object.text} - what kind of ${subject.text} is ${object.text}?`;\n                    } else if (entityType === 'Vehicle') {\n                        response += ` What kind of ${subject.text} is ${object.text}?`;\n                    } else {\n                        response += ` Tell me more about ${object.text}.`;\n                    }\n                }\n                return response;\n            }\n        }\n        if (predicate === 'owns') {\n            const entityType = this.schemaVocabulary.inferEntityType(object.text);\n            if (entityType) {\n                return `That's wonderful that you have ${object.text === 'a' ? 'a' : ''} ${object.text}! What's special about your ${object.text}?`;\n            }\n            return `Interesting that you have ${object.text}. Tell me more about it!`;\n        }\n        return \"That's interesting! I'm learning about the relationships you're describing.\";\n    }\n    /**\n   * Generate intent-based responses using semantic understanding\n   */ generateIntentBasedResponse(semanticContext, conversationHistory, resonantWords) {\n        switch(semanticContext.intent){\n            case 'GREETING':\n                return \"Hello! I'm PrimeBot, powered by mathematical prime factorization and semantic understanding. How can I help you today?\";\n            case 'HELP_REQUEST':\n                return \"I'm here to help! I can understand relationships between people, animals, places, and things. What would you like to know or discuss?\";\n            case 'GRATITUDE':\n                return \"You're welcome! I'm glad I could help with my semantic understanding.\";\n            case 'POSITIVE_FEEDBACK':\n                return \"That's wonderful! Is there anything else I can help you understand or explore?\";\n            case 'INFORMATION_REQUEST':\n            case 'QUESTION':\n                if (resonantWords.length > 0) {\n                    const entityType = this.schemaVocabulary.inferEntityType(resonantWords[0]);\n                    if (entityType) {\n                        const entityInfo = this.schemaVocabulary.getEntityInfo(entityType);\n                        return `I'm analyzing \"${resonantWords[0]}\" as ${entityType === 'Animal' ? 'an' : 'a'} ${entityType}. ` + `What specifically would you like to know about ${resonantWords[0]}?`;\n                    }\n                    return `I'm processing information about \"${resonantWords[0]}\" through my semantic understanding. What specifically would you like to know?`;\n                }\n                return \"That's a great question! I'm analyzing the semantic relationships to provide you with an answer.\";\n            case 'KNOWLEDGE_REQUEST':\n                return \"I process information through mathematical analysis and semantic understanding using Schema.org vocabulary. What would you like me to understand?\";\n            case 'GENERAL_CONVERSATION':\n                if (resonantWords.length > 0) {\n                    const entityType = this.schemaVocabulary.inferEntityType(resonantWords[0]);\n                    if (entityType) {\n                        return `I notice you mentioned \"${resonantWords[0]}\" - I understand that as ${entityType === 'Animal' ? 'an' : 'a'} ${entityType}. Tell me more about it!`;\n                    }\n                    return `I notice you mentioned \"${resonantWords[0]}\". That's interesting! Tell me more about it.`;\n                }\n                return \"I'm listening and ready to understand the semantic relationships in what you're telling me. What would you like to discuss?\";\n            default:\n                return null; // Let the prime resonance system handle it\n        }\n    }\n    /**\n   * Enhance prime resonance with semantic awareness\n   */ enhanceResonanceWithSemantics(resonantWords, semanticContext) {\n        console.log('🔮 Enhancing resonance with semantic awareness...');\n        return resonantWords.map((item)=>{\n            let enhancedResonance = item.resonance;\n            // Boost resonance for semantically relevant words\n            if (semanticContext.semanticBoosts.includes(item.word)) {\n                enhancedResonance *= 2.0; // Strong semantic boost\n                console.log(`🎯 Semantic boost for \"${item.word}\": ${item.resonance.toFixed(1)} → ${enhancedResonance.toFixed(1)}`);\n            }\n            // Additional boost for high-confidence intent matches\n            if (semanticContext.confidence > 0.7) {\n                enhancedResonance *= 1.3;\n            }\n            return {\n                word: item.word,\n                resonance: enhancedResonance\n            };\n        });\n    }\n    /**\n   * Extract semantic entities from conversation context\n   */ extractEntitiesFromContext(conversationHistory) {\n        const entities = new Map();\n        const fullContext = conversationHistory.join(' ');\n        // Extract names\n        const nameMatch = fullContext.match(/my name is (\\w+)/i);\n        if (nameMatch) {\n            entities.set('user_name', nameMatch[1]);\n        }\n        // Extract other entities as needed\n        // Could be extended with more sophisticated NER\n        return entities;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/semantic/semantic-layer.ts\n");

/***/ }),

/***/ "(ssr)/./src/lib/system/config.ts":
/*!**********************************!*\
  !*** ./src/lib/system/config.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConfigManager: () => (/* binding */ ConfigManager),\n/* harmony export */   globalConfig: () => (/* binding */ globalConfig)\n/* harmony export */ });\n// =============================================================================\n// PRIMELM CONFIGURATION SYSTEM\n// =============================================================================\nclass ConfigManager {\n    constructor(initialConfig){\n        this.listeners = new Map();\n        this.config = this.createDefaultConfig();\n        if (initialConfig) {\n            this.updateConfig(initialConfig);\n        }\n    }\n    /**\n   * Create default configuration\n   */ createDefaultConfig() {\n        return {\n            core: {\n                embeddingModel: 'Xenova/all-MiniLM-L6-v2',\n                embeddingDimension: 384,\n                maxPrimes: 1000,\n                primeThreshold: 0.02\n            },\n            conversation: {\n                maxHistoryLength: 50,\n                maxContextWindow: 10,\n                coherenceThreshold: 0.1,\n                similarityThreshold: 0.3,\n                cleanupInterval: 30 * 60 * 1000,\n                memoryRetentionHours: 24\n            },\n            entityMemory: {\n                maxEntities: 1000,\n                cleanupThreshold: 0.1,\n                confidenceDecay: 0.05,\n                mentionBoost: 0.1\n            },\n            episodicMemory: {\n                maxEpisodes: 1000,\n                consolidationThreshold: 0.8,\n                connectionThreshold: 0.3,\n                importanceDecay: 0.01,\n                clusterThreshold: 0.4\n            },\n            generation: {\n                resonanceThreshold: 100,\n                harmonicWeight: 0.7,\n                personalityWeight: 0.3,\n                semanticBoostMultiplier: 2.0,\n                maxResonantWords: 5\n            },\n            errorHandling: {\n                maxErrorHistory: 100,\n                criticalErrorThreshold: 5,\n                recoveryTimeoutMs: 5000,\n                fallbackEnabled: true\n            },\n            performance: {\n                batchSize: 10,\n                processingTimeout: 30000,\n                cacheSize: 500,\n                indexingEnabled: true\n            },\n            debug: {\n                enabled: true,\n                logLevel: 'info',\n                showPrimeFactors: true,\n                showResonance: true,\n                showTiming: true\n            }\n        };\n    }\n    /**\n   * Get current configuration\n   */ getConfig() {\n        return JSON.parse(JSON.stringify(this.config)); // Deep copy\n    }\n    /**\n   * Get specific configuration section\n   */ getSection(section) {\n        return JSON.parse(JSON.stringify(this.config[section])); // Deep copy\n    }\n    /**\n   * Update configuration\n   */ updateConfig(updates) {\n        this.config = this.deepMerge(this.config, updates);\n        this.notifyListeners('config-updated');\n        console.log('⚙️ Configuration updated');\n    }\n    /**\n   * Update specific configuration section\n   */ updateSection(section, updates) {\n        this.config[section] = this.deepMerge(this.config[section], updates);\n        this.notifyListeners(`${section}-updated`);\n        console.log(`⚙️ Configuration section '${section}' updated`);\n    }\n    /**\n   * Reset configuration to defaults\n   */ resetToDefaults() {\n        this.config = this.createDefaultConfig();\n        this.notifyListeners('config-reset');\n        console.log('🔄 Configuration reset to defaults');\n    }\n    /**\n   * Load configuration from environment variables\n   */ loadFromEnvironment() {\n        const envConfig = {};\n        // Core configuration\n        if (process.env.PRIMELM_EMBEDDING_MODEL) {\n            envConfig.core = {\n                ...this.config.core,\n                embeddingModel: process.env.PRIMELM_EMBEDDING_MODEL\n            };\n        }\n        if (process.env.PRIMELM_COHERENCE_THRESHOLD) {\n            envConfig.conversation = {\n                ...this.config.conversation,\n                coherenceThreshold: parseFloat(process.env.PRIMELM_COHERENCE_THRESHOLD)\n            };\n        }\n        if (process.env.PRIMELM_MAX_ENTITIES) {\n            envConfig.entityMemory = {\n                ...this.config.entityMemory,\n                maxEntities: parseInt(process.env.PRIMELM_MAX_ENTITIES)\n            };\n        }\n        if (process.env.PRIMELM_DEBUG_ENABLED) {\n            envConfig.debug = {\n                ...this.config.debug,\n                enabled: process.env.PRIMELM_DEBUG_ENABLED === 'true'\n            };\n        }\n        if (process.env.PRIMELM_LOG_LEVEL) {\n            envConfig.debug = {\n                ...this.config.debug,\n                logLevel: process.env.PRIMELM_LOG_LEVEL\n            };\n        }\n        if (Object.keys(envConfig).length > 0) {\n            this.updateConfig(envConfig);\n            console.log('🌍 Configuration loaded from environment variables');\n        }\n    }\n    /**\n   * Validate configuration\n   */ validateConfig() {\n        const errors = [];\n        // Validate core configuration\n        if (this.config.core.embeddingDimension <= 0) {\n            errors.push('Core embedding dimension must be positive');\n        }\n        if (this.config.core.primeThreshold < 0 || this.config.core.primeThreshold > 1) {\n            errors.push('Core prime threshold must be between 0 and 1');\n        }\n        // Validate conversation configuration\n        if (this.config.conversation.maxHistoryLength <= 0) {\n            errors.push('Conversation max history length must be positive');\n        }\n        if (this.config.conversation.coherenceThreshold < 0 || this.config.conversation.coherenceThreshold > 1) {\n            errors.push('Conversation coherence threshold must be between 0 and 1');\n        }\n        // Validate entity memory configuration\n        if (this.config.entityMemory.maxEntities <= 0) {\n            errors.push('Entity memory max entities must be positive');\n        }\n        if (this.config.entityMemory.cleanupThreshold < 0 || this.config.entityMemory.cleanupThreshold > 1) {\n            errors.push('Entity memory cleanup threshold must be between 0 and 1');\n        }\n        // Validate generation configuration\n        if (this.config.generation.resonanceThreshold < 0) {\n            errors.push('Generation resonance threshold must be non-negative');\n        }\n        if (this.config.generation.semanticBoostMultiplier <= 0) {\n            errors.push('Generation semantic boost multiplier must be positive');\n        }\n        // Validate performance configuration\n        if (this.config.performance.batchSize <= 0) {\n            errors.push('Performance batch size must be positive');\n        }\n        if (this.config.performance.processingTimeout <= 0) {\n            errors.push('Performance processing timeout must be positive');\n        }\n        return {\n            valid: errors.length === 0,\n            errors\n        };\n    }\n    /**\n   * Get adaptive thresholds based on system performance\n   */ getAdaptiveThresholds(metrics) {\n        const adaptiveConfig = {};\n        // Adjust coherence threshold based on performance\n        if (metrics.errorRate > 0.1) {\n            // High error rate: lower thresholds for more lenient matching\n            adaptiveConfig.conversation = {\n                ...this.config.conversation,\n                coherenceThreshold: Math.max(this.config.conversation.coherenceThreshold * 0.8, 0.05),\n                similarityThreshold: Math.max(this.config.conversation.similarityThreshold * 0.8, 0.1)\n            };\n        } else if (metrics.errorRate < 0.01) {\n            // Low error rate: raise thresholds for better quality\n            adaptiveConfig.conversation = {\n                ...this.config.conversation,\n                coherenceThreshold: Math.min(this.config.conversation.coherenceThreshold * 1.1, 0.5),\n                similarityThreshold: Math.min(this.config.conversation.similarityThreshold * 1.1, 0.8)\n            };\n        }\n        // Adjust memory settings based on usage\n        if (metrics.memoryUsage > 0.8) {\n            // High memory usage: more aggressive cleanup\n            adaptiveConfig.entityMemory = {\n                ...this.config.entityMemory,\n                cleanupThreshold: Math.min(this.config.entityMemory.cleanupThreshold * 1.5, 0.5),\n                maxEntities: Math.max(Math.floor(this.config.entityMemory.maxEntities * 0.8), 100)\n            };\n        }\n        // Adjust processing based on response time\n        if (metrics.responseTime > 2000) {\n            // Slow responses: reduce processing complexity\n            adaptiveConfig.generation = {\n                ...this.config.generation,\n                maxResonantWords: Math.max(this.config.generation.maxResonantWords - 1, 2)\n            };\n            adaptiveConfig.performance = {\n                ...this.config.performance,\n                batchSize: Math.max(Math.floor(this.config.performance.batchSize * 0.8), 1),\n                cacheSize: Math.min(this.config.performance.cacheSize * 2, 2000)\n            };\n        }\n        return adaptiveConfig;\n    }\n    /**\n   * Subscribe to configuration changes\n   */ subscribe(event, callback) {\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, []);\n        }\n        this.listeners.get(event).push(callback);\n    }\n    /**\n   * Unsubscribe from configuration changes\n   */ unsubscribe(event, callback) {\n        const eventListeners = this.listeners.get(event);\n        if (eventListeners) {\n            const index = eventListeners.indexOf(callback);\n            if (index > -1) {\n                eventListeners.splice(index, 1);\n            }\n        }\n    }\n    /**\n   * Notify listeners of configuration changes\n   */ notifyListeners(event) {\n        const eventListeners = this.listeners.get(event);\n        if (eventListeners) {\n            eventListeners.forEach((callback)=>{\n                try {\n                    callback(this.config);\n                } catch (error) {\n                    console.error(`Error in config listener for event '${event}':`, error);\n                }\n            });\n        }\n    }\n    /**\n   * Deep merge objects\n   */ deepMerge(target, source) {\n        const result = {\n            ...target\n        };\n        for(const key in source){\n            if (source[key] !== undefined) {\n                if (typeof source[key] === 'object' && source[key] !== null && !Array.isArray(source[key])) {\n                    result[key] = this.deepMerge(result[key], source[key]);\n                } else {\n                    result[key] = source[key];\n                }\n            }\n        }\n        return result;\n    }\n    /**\n   * Export configuration to JSON\n   */ exportConfig() {\n        return JSON.stringify(this.config, null, 2);\n    }\n    /**\n   * Import configuration from JSON\n   */ importConfig(configJson) {\n        try {\n            const importedConfig = JSON.parse(configJson);\n            const validation = this.validateImportedConfig(importedConfig);\n            if (validation.valid) {\n                this.updateConfig(importedConfig);\n                console.log('📥 Configuration imported successfully');\n            } else {\n                console.error('❌ Invalid configuration:', validation.errors);\n                throw new Error(`Invalid configuration: ${validation.errors.join(', ')}`);\n            }\n        } catch (error) {\n            console.error('❌ Failed to import configuration:', error);\n            throw error;\n        }\n    }\n    /**\n   * Validate imported configuration\n   */ validateImportedConfig(config) {\n        const errors = [];\n        if (typeof config !== 'object' || config === null) {\n            errors.push('Configuration must be an object');\n            return {\n                valid: false,\n                errors\n            };\n        }\n        // Basic structure validation\n        const requiredSections = [\n            'core',\n            'conversation',\n            'entityMemory',\n            'generation',\n            'errorHandling',\n            'performance',\n            'debug'\n        ];\n        for (const section of requiredSections){\n            if (config[section] && typeof config[section] !== 'object') {\n                errors.push(`Section '${section}' must be an object`);\n            }\n        }\n        return {\n            valid: errors.length === 0,\n            errors\n        };\n    }\n    /**\n   * Get configuration summary\n   */ getSummary() {\n        const sections = Object.keys(this.config);\n        let totalSettings = 0;\n        for (const section of sections){\n            totalSettings += Object.keys(this.config[section]).length;\n        }\n        return {\n            sections,\n            totalSettings,\n            lastUpdated: new Date().toISOString(),\n            validation: this.validateConfig()\n        };\n    }\n}\n// Global configuration instance\nconst globalConfig = new ConfigManager();\n// Load environment variables on startup\nif (typeof process !== 'undefined' && process.env) {\n    globalConfig.loadFromEnvironment();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/system/config.ts\n");

/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@xenova/transformers":
/*!***************************************!*\
  !*** external "@xenova/transformers" ***!
  \***************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@xenova/transformers");;

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@swc"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.tsx&appDir=%2Fworkspaces%2FPrimeLM-Demo%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fworkspaces%2FPrimeLM-Demo&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();