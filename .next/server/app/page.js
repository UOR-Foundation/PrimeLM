(()=>{var e={};e.id=974,e.ids=[974],e.modules={377:(e,t,n)=>{"use strict";n.r(t),n.d(t,{GlobalError:()=>a.a,__next_app__:()=>u,pages:()=>h,routeModule:()=>d,tree:()=>c});var i=n(5239),o=n(8088),s=n(8170),a=n.n(s),r=n(893),l={};for(let e in r)0>["default","tree","pages","GlobalError","__next_app__","routeModule"].indexOf(e)&&(l[e]=()=>r[e]);n.d(t,l);let c=["",{children:["__PAGE__",{},{page:[()=>Promise.resolve().then(n.bind(n,1204)),"/workspaces/PrimeLM-Demo/src/app/page.tsx"]}]},{layout:[()=>Promise.resolve().then(n.bind(n,4431)),"/workspaces/PrimeLM-Demo/src/app/layout.tsx"],"not-found":[()=>Promise.resolve().then(n.t.bind(n,7398,23)),"next/dist/client/components/not-found-error"],forbidden:[()=>Promise.resolve().then(n.t.bind(n,9999,23)),"next/dist/client/components/forbidden-error"],unauthorized:[()=>Promise.resolve().then(n.t.bind(n,5284,23)),"next/dist/client/components/unauthorized-error"]}],h=["/workspaces/PrimeLM-Demo/src/app/page.tsx"],u={require:n,loadChunk:()=>Promise.resolve()},d=new i.AppPageRouteModule({definition:{kind:o.RouteKind.APP_PAGE,page:"/page",pathname:"/",bundlePath:"",filename:"",appPaths:[]},userland:{loaderTree:c}})},846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},1135:()=>{},1204:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});let i=(0,n(2907).registerClientReference)(function(){throw Error("Attempted to call the default export of \"/workspaces/PrimeLM-Demo/src/app/page.tsx\" from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.")},"/workspaces/PrimeLM-Demo/src/app/page.tsx","default")},1596:(e,t,n)=>{Promise.resolve().then(n.t.bind(n,6444,23)),Promise.resolve().then(n.t.bind(n,6042,23)),Promise.resolve().then(n.t.bind(n,8170,23)),Promise.resolve().then(n.t.bind(n,9477,23)),Promise.resolve().then(n.t.bind(n,9345,23)),Promise.resolve().then(n.t.bind(n,2089,23)),Promise.resolve().then(n.t.bind(n,6577,23)),Promise.resolve().then(n.t.bind(n,1307,23))},2092:(e,t,n)=>{Promise.resolve().then(n.t.bind(n,6346,23)),Promise.resolve().then(n.t.bind(n,7924,23)),Promise.resolve().then(n.t.bind(n,5656,23)),Promise.resolve().then(n.t.bind(n,99,23)),Promise.resolve().then(n.t.bind(n,8243,23)),Promise.resolve().then(n.t.bind(n,8827,23)),Promise.resolve().then(n.t.bind(n,2763,23)),Promise.resolve().then(n.t.bind(n,7173,23))},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},3119:(e,t,n)=>{"use strict";n.d(t,{s:()=>i});class i{constructor(){this.entities=new Map,this.relationships=new Map,this.initializeBasicSchema()}initializeBasicSchema(){this.addEntity("Thing",{type:"Thing",properties:["name","description","identifier"],relationships:[],parentTypes:[],description:"The most generic type of item"}),this.addEntity("Person",{type:"Person",properties:["name","givenName","familyName","email","telephone"],relationships:["knows","owns","memberOf","worksFor"],parentTypes:["Thing"],description:"A person (alive, dead, undead, or fictional)"}),this.addEntity("Animal",{type:"Animal",properties:["name","species","breed","age","color"],relationships:["ownedBy","livesAt","relatedTo"],parentTypes:["Thing"],description:"Animals including pets, wildlife, etc."}),this.addEntity("Place",{type:"Place",properties:["name","address","geo","telephone"],relationships:["containedInPlace","contains","near"],parentTypes:["Thing"],description:"Entities that have a somewhat fixed, physical extension"}),this.addEntity("Organization",{type:"Organization",properties:["name","description","email","telephone","address"],relationships:["member","parentOrganization","subOrganization"],parentTypes:["Thing"],description:"An organization such as a school, NGO, corporation, club, etc."}),this.addEntity("Vehicle",{type:"Vehicle",properties:["name","model","manufacturer","color","year"],relationships:["ownedBy","locatedAt"],parentTypes:["Thing"],description:"A vehicle is a device that is designed or used to transport people or cargo"}),this.addEntity("Product",{type:"Product",properties:["name","description","brand","model","color"],relationships:["ownedBy","manufacturedBy"],parentTypes:["Thing"],description:"Any offered product or service"}),this.addRelationship("hasName",{property:"hasName",domain:["Thing"],range:["Text"],description:"The name of the item"}),this.addRelationship("owns",{property:"owns",domain:["Person"],range:["Thing"],description:"Products owned by the person"}),this.addRelationship("ownedBy",{property:"ownedBy",domain:["Thing"],range:["Person"],description:"The person who owns this item"}),this.addRelationship("knows",{property:"knows",domain:["Person"],range:["Person"],description:"The most generic bi-directional social/work relation"}),this.addRelationship("livesAt",{property:"livesAt",domain:["Person","Animal"],range:["Place"],description:"The place where the person or animal lives"}),this.addRelationship("worksFor",{property:"worksFor",domain:["Person"],range:["Organization"],description:"Organizations that the person works for"}),console.log("\uD83D\uDCDA Schema.org vocabulary initialized with",this.entities.size,"entities and",this.relationships.size,"relationships")}addEntity(e,t){this.entities.set(e,t)}addRelationship(e,t){this.relationships.set(e,t)}inferEntityType(e,t){let n=e.toLowerCase(),i={dog:"Animal",cat:"Animal",pet:"Animal",bird:"Animal",fish:"Animal",horse:"Animal",car:"Vehicle",truck:"Vehicle",bike:"Vehicle",motorcycle:"Vehicle",house:"Place",home:"Place",office:"Place",school:"Place",company:"Organization",business:"Organization",team:"Organization",friend:"Person",family:"Person",brother:"Person",sister:"Person",mother:"Person",father:"Person",phone:"Product",computer:"Product",book:"Product"},o=i[n];return o?(console.log(`🔍 Inferred entity type: ${e} → ${o}`),o):t&&t.includes("name")&&!i[n]?"Person":null}getValidRelationships(e){let t=this.entities.get(e);if(!t)return[];let n=[...t.relationships];return t.parentTypes.forEach(e=>{let t=this.entities.get(e);t&&n.push(...t.relationships)}),[...new Set(n)]}getValidProperties(e){let t=this.entities.get(e);if(!t)return[];let n=[...t.properties];return t.parentTypes.forEach(e=>{let t=this.entities.get(e);t&&n.push(...t.properties)}),[...new Set(n)]}parseSemanticRelationships(e){console.log("\uD83D\uDD0D Parsing semantic relationships in:",e);let t=e.match(/my\s+(\w+)'?s?\s+name\s+is\s+(\w+)/i);if(t){let e=t[1],n=t[2],i=this.inferEntityType(e);return{subject:{text:e,type:i},predicate:"hasName",object:{text:n,type:"Text"},confidence:.9}}let n=e.match(/i\s+have\s+a\s+(\w+)/i);if(n){let e=n[1],t=this.inferEntityType(e);return{subject:{text:"I",type:"Person"},predicate:"owns",object:{text:e,type:t},confidence:.8}}let i=e.match(/my\s+name\s+is\s+(\w+)/i);return i?{subject:{text:"I",type:"Person"},predicate:"hasName",object:{text:i[1],type:"Text"},confidence:.95}:null}generateSemanticQuery(e){console.log("\uD83D\uDD0D Generating semantic query for:",e);let t=e.match(/what\s+is\s+my\s+(\w+)'?s?\s+(\w+)/i);if(t){let e=t[1],n=t[2],i=this.inferEntityType(e);if("name"===n)return{queryType:"retrieve",subject:e,predicate:"hasName",entityType:i||void 0}}return/what\s+is\s+my\s+name/i.test(e)?{queryType:"retrieve",subject:"user",predicate:"hasName"}:null}getEntityInfo(e){return this.entities.get(e)||null}getRelationshipInfo(e){return this.relationships.get(e)||null}isValidRelationship(e,t,n){let i=this.relationships.get(t);if(!i)return!1;let o=i.domain.includes(e)||i.domain.includes("Thing"),s=i.range.includes(n)||i.range.includes("Thing")||i.range.includes("Text");return o&&s}getAllEntityTypes(){return Array.from(this.entities.keys())}getAllRelationshipTypes(){return Array.from(this.relationships.keys())}getDebugInfo(){return{entityCount:this.entities.size,relationshipCount:this.relationships.size,entities:Object.fromEntries(this.entities),relationships:Object.fromEntries(this.relationships)}}}},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},3873:e=>{"use strict";e.exports=require("path")},4216:e=>{"use strict";e.exports=import("@xenova/transformers")},4431:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s,metadata:()=>o});var i=n(7413);n(1135);let o={title:"PrimeLM Demo",description:"A basic proof of concept implementation demonstrating PrimeLM's Prime Core in a conversational chatbot."};function s({children:e}){return(0,i.jsx)("html",{lang:"en",children:(0,i.jsx)("body",{children:e})})}},4736:(e,t,n)=>{"use strict";n.a(e,async(e,i)=>{try{n.d(t,{N:()=>p});var o=n(4216),s=n(9634),a=n(8071),r=n(8173),l=n(7253),c=n(7141),h=n(3119),u=n(7848),d=n(7879),m=e([o]);o=(m.then?(await m)():m)[0];class p{constructor(){this.embeddingPipeline=null,this.isInitialized=!1,this.knowledgeBase=null,this.humanUser={identity:{id:"human-001",name:"Human",type:"human",embeddings:[],primeFactors:{},personality:{traits:["curious","conversational"],communicationStyle:"direct",interests:[]}},conversationState:{embeddings:[],primeFactors:{},context:[],turnCount:0},preferences:{topics:[],responseLength:"medium"}},this.chatbotUser={identity:{id:"chatbot-001",name:"PrimeBot",type:"chatbot",embeddings:[],primeFactors:{},personality:{traits:["helpful","analytical","mathematical"],communicationStyle:"thoughtful",interests:["mathematics","conversation","learning"]}},conversationState:{embeddings:[],primeFactors:{},context:[],turnCount:0},preferences:{topics:["mathematics","prime numbers","conversation"],responseLength:"medium"}},this.embeddingsModel={vocabulary:new Map,concepts:new Map,relationships:new Map},this.semanticLayer=new l.i,this.pragmaticLayer=new c.m,this.schemaVocabulary=new h.s,this.discourseLayer=new u.$(this.schemaVocabulary),this.generativeLayer=new d.S(this.schemaVocabulary)}async initialize(){try{console.log("\uD83D\uDE80 Initializing PrimeLM Core..."),this.embeddingPipeline=await (0,o.pipeline)("feature-extraction","Xenova/all-MiniLM-L6-v2"),await this.bootstrapChatbotKnowledge(),this.isInitialized=!0,console.log("✅ PrimeLM Core initialized successfully")}catch(e){throw console.error("❌ Failed to initialize PrimeLM Core:",e),e}}async bootstrapChatbotKnowledge(){if(!this.embeddingPipeline)throw Error("Embedding pipeline not initialized");try{let e=new s.d(this.embeddingPipeline);this.knowledgeBase=await e.bootstrapFromTokenizer(),this.embeddingsModel.vocabulary=this.knowledgeBase.conceptEmbeddings,this.embeddingsModel.concepts=this.knowledgeBase.conceptEmbeddings,this.embeddingsModel.relationships=this.knowledgeBase.semanticClusters,this.populateChatbotIdentity()}catch(e){throw console.error("❌ Knowledge bootstrap failed:",e),Error(`Knowledge bootstrap failed: ${e instanceof Error?e.message:String(e)}`)}}populateChatbotIdentity(){if(!this.knowledgeBase)return;let e={},t=[];for(let n of this.knowledgeBase.vocabulary.values())Object.entries(n.primeFactors).forEach(([t,n])=>{let i=parseInt(t);e[i]=(e[i]||0)+n}),t.push(n.embedding);if(t.length>0){let n=this.calculateCentroidEmbedding(t);this.chatbotUser.identity.embeddings=n,this.chatbotUser.identity.primeFactors=e}}calculateCentroidEmbedding(e){if(0===e.length)return Array(384).fill(0);let t=Array(e[0].length).fill(0);return e.forEach(e=>{e.forEach((e,n)=>{t[n]+=e})}),t.map(t=>t/e.length)}async processConversation(e){if(!this.isInitialized||!this.embeddingPipeline)throw Error("PrimeCore not initialized");console.log(`🔬 Processing input: "${e}"`);let t=await this.generateEmbeddings(e),n=r.s.embeddingsToPrimes(t);this.updateUserState(this.humanUser,e,t,n);let i=this.generateResponsePrimes(n),o=await this.generateResponseText(i),s=await this.generateEmbeddings(o);return this.updateUserState(this.chatbotUser,o,s,i),console.log(`✅ Generated response: "${o}"`),o}async generateEmbeddings(e){if(!this.embeddingPipeline)throw Error("Embedding pipeline not initialized");let t=await this.embeddingPipeline(e);return Array.from(t.data)}updateUserState(e,t,n,i){e.conversationState.embeddings=n,e.conversationState.primeFactors=i,e.conversationState.context.push(t),e.conversationState.turnCount++,e.conversationState.context.length>10&&(e.conversationState.context=e.conversationState.context.slice(-10)),0===e.identity.embeddings.length?(e.identity.embeddings=[...n],e.identity.primeFactors={...i}):(e.identity.embeddings=e.identity.embeddings.map((e,t)=>.9*e+.1*n[t]),e.identity.primeFactors=r.s.combineFactors(e.identity.primeFactors,i,.9)),this.updateEmbeddingsModel(t,n)}updateEmbeddingsModel(e,t){let n=e.toLowerCase().split(/\W+/).filter(e=>e.length>2);n.forEach(e=>{this.embeddingsModel.vocabulary.set(e,[...t]),e.length>4&&this.embeddingsModel.concepts.set(e,[...t])}),n.length>1&&n.forEach((e,t)=>{let i=n.filter((e,n)=>n!==t);this.embeddingsModel.relationships.set(e,i)})}generateResponsePrimes(e){let t,n=r.s.calculateCoherence(e,this.chatbotUser.conversationState.primeFactors);return console.log(`🧮 Coherence score: ${(100*n).toFixed(1)}%`),t=n>.1?this.amplifyResonance(e):this.createHarmonic(e),t=this.addPersonalityFactors(t)}amplifyResonance(e){let t={};Object.entries(e).forEach(([e,n])=>{t[parseInt(e)]=Math.floor(1.3*n)});let n=r.s.generatePrimes(100);return t[n[10]]=8,t[n[15]]=6,t}createHarmonic(e){let t={};Object.entries(e).sort(([,e],[,t])=>t-e).slice(0,5).forEach(([e,n])=>{t[parseInt(e)+2]=Math.floor(.7*n)});let n=r.s.generatePrimes(50);return t[n[5]]=10,t[n[8]]=8,t}addPersonalityFactors(e){let t={...e},n=r.s.generatePrimes(30);return t[n[12]]=5,t[n[18]]=4,t[n[22]]=3,t}async generateResponseText(e){if(console.log("\uD83D\uDD0D Generating response text using Phase 2: Discourse + Generative layers..."),console.log("Knowledge base available:",!!this.knowledgeBase),!this.knowledgeBase)throw console.log("⚠️ No knowledge base available"),Error("No knowledge base available - bootstrap failed");let t=this.humanUser.conversationState.context[this.humanUser.conversationState.context.length-1],n=this.semanticLayer.analyzeSemanticContext(t),i=this.pragmaticLayer.getContextForResponse();i.currentTopic,i.activeIntents,Object.entries(i.relevantEntities),i.conversationGoals,i.recentHistory,this.pragmaticLayer.processTurn("human",t,n.intent,n.entities.reduce((e,t,n)=>(e[`entity_${n}`]=t,e),{}),n);let o=this.pragmaticLayer.getContextForResponse(),s={currentTopic:o.currentTopic,activeIntents:o.activeIntents,entityMemory:new Map(Object.entries(o.relevantEntities)),conversationGoals:o.conversationGoals,userPreferences:{},conversationHistory:o.recentHistory},r=this.discourseLayer.analyzeDiscourseContext(t,n,s),l={responseType:r.expectedResponseType,semanticContext:n,discourseContext:r,pragmaticContext:s,primeResonance:e},c=this.generativeLayer.generateResponse(l);if(c)return console.log("\uD83C\uDFA8 Generated dynamic response:",c),c;console.log("Vocabulary size:",this.knowledgeBase.vocabulary.size),console.log("Vocabulary primes available:",this.knowledgeBase.vocabularyPrimes.size);let h=new a.E,u=h.findMostResonantWords(e,this.knowledgeBase.vocabularyPrimes,5),d=h.applyContextualWeighting(u,this.humanUser.conversationState.context,1.5),m=this.semanticLayer.enhanceResonanceWithSemantics(d.map(e=>({word:e.word,resonance:e.resonance})),n);if(console.log("Resonant words found:",m.map(e=>`${e.word}: ${e.resonance.toFixed(1)}`)),m.length>0){let t=d.map(e=>{let t=m.find(t=>t.word===e.word);return{...e,resonance:t?t.resonance:e.resonance}}).sort((e,t)=>t.resonance-e.resonance),i=this.generateSemanticResonanceResponse(t,n,e);return console.log("Generated semantic-resonance response:",i),i}return console.log("No resonant words found, using basic response"),this.generateBasicResponse(e)}primesToEmbeddings(e){let t=Array(384).fill(0),n=r.s.generatePrimes(384);return Object.entries(e).forEach(([e,i])=>{let o=parseInt(e),s=n.indexOf(o);-1!==s&&(t[s]=i/1e3)}),t}findClosestConcept(e){let t=null,n=-1;for(let[i,o]of this.embeddingsModel.concepts){let s=this.calculateCosineSimilarity(e,o);s>n&&(n=s,t=i)}return n>.3?t:null}calculateCosineSimilarity(e,t){let n=e.reduce((e,n,i)=>e+n*t[i],0),i=Math.sqrt(e.reduce((e,t)=>e+t*t,0)),o=Math.sqrt(t.reduce((e,t)=>e+t*t,0));return i&&o?n/(i*o):0}async generateTextFromConcept(e,t){let n=r.s.calculateMagnitude(t),i=this.getConceptVariations(e),o=Math.floor(n/10)%i.length;return i[o]}getConceptVariations(e){let t={};for(let[n]of this.embeddingsModel.vocabulary)t[e]||(t[e]=[]),t[e].push(`I understand you're interested in ${n}. Let me help with that.`);return t[e]||[`I'm processing information related to ${e}.`]}findMostSimilarConcepts(e,t){let n=[];for(let[t,i]of this.embeddingsModel.concepts){let o=this.calculateCosineSimilarity(e,i);n.push({concept:t,similarity:o})}let i=n.sort((e,t)=>t.similarity-e.similarity);console.log("Top similarities:",i.slice(0,5).map(e=>`${e.concept}: ${e.similarity.toFixed(3)}`));let o=i.slice(0,t).filter(e=>e.similarity>.01);return console.log("Filtered similar concepts:",o.map(e=>`${e.concept}: ${e.similarity.toFixed(3)}`)),o.map(e=>e.concept)}generateSemanticResonanceResponse(e,t,n){console.log("\uD83C\uDFAD Generating semantic-enhanced resonance response..."),console.log("Intent:",t.intent),console.log("Semantic boosts:",t.semanticBoosts);let i=e[0];switch(t.intent){case"GREETING":if("hello"===i.word||t.semanticBoosts.includes("hello"))return"Hello! I'm PrimeBot. How can I help you today?";return"Hello! Nice to meet you. I'm PrimeBot, powered by mathematical prime factorization.";case"IDENTITY_INTRODUCTION":if(t.entities.length>0){let e=t.entities[0];return`Nice to meet you, ${e}! I'm PrimeBot. How can I assist you today?`}return"Nice to meet you! I'm PrimeBot. What's your name?";case"ENTITY_INTRODUCTION":if(t.entities.length>=2){let e=t.entities[0],n=t.entities[1];return`Nice to know that your ${e} is named ${n}! Tell me more about ${n}.`}return"That's interesting! Tell me more about that.";case"IDENTITY_QUERY":let o=this.humanUser.conversationState.context.join(" ").toLowerCase().match(/my name is (\w+)/i);if(o)return`Based on our conversation, your name is ${o[1]}. Is that correct?`;return"I don't recall you mentioning your name. What is your name?";case"HELP_REQUEST":return"I'm here to help! What would you like to know or discuss?";case"GRATITUDE":return"You're welcome! I'm glad I could help.";case"POSITIVE_FEEDBACK":return"That's wonderful! Is there anything else I can help you with?";case"INFORMATION_REQUEST":case"QUESTION":if(i&&i.resonance>1e3)return`I'm analyzing the concept of "${i.word}" to answer your question. What specifically would you like to know?`;return"That's a great question! I'm processing the mathematical patterns to provide you with an answer.";case"KNOWLEDGE_REQUEST":return"I process information through mathematical analysis. What would you like me to understand?";default:if(i){if(t.semanticBoosts.includes(i.word))return`I notice you're particularly interested in "${i.word}". The mathematical resonance is strong here. Tell me more about what you'd like to explore!`;if(i.resonance>2e3)return`The concept of "${i.word}" resonates powerfully with my understanding. How can I help you explore this further?`;return`I'm processing the mathematical patterns related to "${i.word}". What would you like to know about this?`}return"I'm analyzing the semantic and mathematical patterns in your message. Could you tell me more?"}}generateResonanceBasedResponse(e,t){let n=e[0];if(r.s.calculateMagnitude(t),console.log("\uD83C\uDFAF Generating response for primary resonant word:",n.word),console.log("\uD83D\uDD22 Resonance score:",n.resonance.toFixed(1)),console.log("\uD83D\uDD17 Shared primes:",n.sharedPrimes),console.log("\uD83C\uDFB5 Harmonic matches:",n.harmonicMatches),"hello"===n.word||"hi"===n.word)return"Hello! I'm PrimeBot. How can I help you today?";if("help"===n.word||"assist"===n.word)return"I'm here to help! What would you like to know or discuss?";if("thanks"===n.word||"thank"===n.word)return"You're welcome! I'm glad I could help.";if("good"===n.word||"great"===n.word)return"That's wonderful! Is there anything else I can help you with?";if("name"===n.word||e.some(e=>"name"===e.word)){let e=this.humanUser.conversationState.context.join(" ").toLowerCase();return e.includes("alex")||e.includes("my name is")?"Nice to meet you, Alex! I'm PrimeBot. How can I assist you today?":"I'm PrimeBot, an AI assistant powered by mathematical prime factorization. What's your name?"}if("understand"===n.word||"know"===n.word)return"I process information through mathematical analysis. What would you like me to understand?";if("what"===n.word||e.some(e=>"what"===e.word)){let e=this.humanUser.conversationState.context.join(" ").toLowerCase();return e.includes("what is my name")||e.includes("my name")?"Based on our conversation, your name is Alex. Is that correct?":"That's a great question! I'm processing the mathematical patterns to provide you with an answer."}if(n.sharedPrimes.length>0){let e=n.sharedPrimes.length,t=n.harmonicMatches.length;if(e>=3)return`I sense strong mathematical resonance with "${n.word}". Our prime factors align beautifully. What would you like to explore about this?`;if(t>0)return`I detect harmonic relationships with "${n.word}". There's an interesting mathematical connection here. Tell me more!`}if(n.resonance>100)return`The concept of "${n.word}" resonates strongly with my mathematical understanding. How can I help you with this?`;if(e.length>1){let t=e[1];return`I'm processing the mathematical relationship between "${n.word}" and "${t.word}". What specifically interests you about these concepts?`}return`I'm analyzing the prime factorization patterns related to "${n.word}". Could you tell me more about what you'd like to know?`}generateConceptBasedResponse(e,t){let n=r.s.calculateMagnitude(t),i=e[0],o=this.embeddingsModel.relationships.get(i)||[];if(console.log("\uD83C\uDFAF Generating response for primary concept:",i),console.log("\uD83D\uDD17 Related concepts:",o),"hello"===i||"hi"===i)return"Hello! I'm PrimeBot. How can I help you today?";if("help"===i||"assist"===i)return"I'm here to help! What would you like to know or discuss?";if("thanks"===i||"thank"===i)return"You're welcome! I'm glad I could help.";if("good"===i||"great"===i)return"That's wonderful! Is there anything else I can help you with?";if("name"===i||e.includes("name")){let e=this.humanUser.conversationState.context.join(" ").toLowerCase();return e.includes("alex")||e.includes("my name is")?"Nice to meet you, Alex! I'm PrimeBot. How can I assist you today?":"I'm PrimeBot, an AI assistant powered by mathematical prime factorization. What's your name?"}if("understand"===i||"know"===i)return"I process information through mathematical analysis. What would you like me to understand?";if("what"===i||e.includes("what")){let e=this.humanUser.conversationState.context.join(" ").toLowerCase();return e.includes("what is my name")||e.includes("my name")?"Based on our conversation, your name is Alex. Is that correct?":"That's a great question! I'm processing the mathematical patterns to provide you with an answer."}if(o.length>0){let e=o[Math.floor(n)%o.length];return"count"===i&&o.includes("number")?"I see you're working with numbers and counting. How can I help you with mathematical calculations?":"play"===i&&o.includes("work")?"I understand the balance between work and play. What would you like to explore or discuss?":`I notice you're interested in ${i}. In my understanding, this connects to ${e}. What specifically would you like to know?`}return`I'm processing the concept of "${i}" through my mathematical framework. Could you tell me more about what you'd like to explore?`}generateBasicResponse(e){let t=r.s.calculateMagnitude(e),n=["I understand. Can you tell me more?","That's interesting. What else would you like to discuss?","I'm processing that information. How can I help you?","I see. What would you like to know?","That makes sense. Is there anything specific I can help with?"];return n[Math.floor(t)%n.length]}getDebugInfo(){return{humanUser:{identity:this.humanUser.identity,conversationState:{...this.humanUser.conversationState,primeCount:Object.keys(this.humanUser.conversationState.primeFactors).length}},chatbotUser:{identity:this.chatbotUser.identity,conversationState:{...this.chatbotUser.conversationState,primeCount:Object.keys(this.chatbotUser.conversationState.primeFactors).length}},coherence:r.s.calculateCoherence(this.humanUser.conversationState.primeFactors,this.chatbotUser.conversationState.primeFactors)}}}i()}catch(e){i(e)}})},5365:()=>{},5694:(e,t,n)=>{"use strict";n.a(e,async(e,i)=>{try{n.r(t),n.d(t,{default:()=>h});var o=n(687),s=n(3210),a=n(4736),r=e([a]);function l({primeCore:e,showDebug:t}){if(!t||!e)return null;let n=e.getDebugInfo();return(0,o.jsxs)("div",{className:"mt-4 p-4 bg-gray-50 rounded-lg text-sm",children:[(0,o.jsx)("h3",{className:"font-semibold text-gray-700 mb-3",children:"Prime Core Debug Info"}),(0,o.jsxs)("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-4",children:[(0,o.jsxs)("div",{children:[(0,o.jsx)("h4",{className:"font-medium text-blue-600 mb-2",children:"Human User"}),(0,o.jsxs)("div",{className:"space-y-1",children:[(0,o.jsxs)("div",{className:"bg-blue-100 px-2 py-1 rounded",children:["ID: ",n.humanUser.identity.id]}),(0,o.jsxs)("div",{className:"bg-blue-100 px-2 py-1 rounded",children:["Turns: ",n.humanUser.conversationState.turnCount]}),(0,o.jsxs)("div",{className:"bg-blue-100 px-2 py-1 rounded",children:["Prime Factors: ",n.humanUser.conversationState.primeCount]}),(0,o.jsxs)("div",{className:"bg-blue-100 px-2 py-1 rounded text-xs",children:["Traits: ",n.humanUser.identity.personality.traits.join(", ")]})]})]}),(0,o.jsxs)("div",{children:[(0,o.jsx)("h4",{className:"font-medium text-purple-600 mb-2",children:"Chatbot User"}),(0,o.jsxs)("div",{className:"space-y-1",children:[(0,o.jsxs)("div",{className:"bg-purple-100 px-2 py-1 rounded",children:["ID: ",n.chatbotUser.identity.id]}),(0,o.jsxs)("div",{className:"bg-purple-100 px-2 py-1 rounded",children:["Turns: ",n.chatbotUser.conversationState.turnCount]}),(0,o.jsxs)("div",{className:"bg-purple-100 px-2 py-1 rounded",children:["Prime Factors: ",n.chatbotUser.conversationState.primeCount]}),(0,o.jsxs)("div",{className:"bg-purple-100 px-2 py-1 rounded text-xs",children:["Traits: ",n.chatbotUser.identity.personality.traits.join(", ")]})]})]})]}),(0,o.jsx)("div",{className:"mt-3 pt-3 border-t border-gray-200",children:(0,o.jsxs)("div",{className:"flex items-center justify-between",children:[(0,o.jsx)("span",{className:"font-medium text-gray-700",children:"Conversation Coherence:"}),(0,o.jsxs)("span",{className:"bg-green-100 px-3 py-1 rounded font-mono",children:[(100*n.coherence).toFixed(1),"%"]})]})})]})}function c({message:e,showPrimes:t}){let n="human"===e.sender;return(0,o.jsx)("div",{className:`flex ${n?"justify-end":"justify-start"} mb-4`,children:(0,o.jsxs)("div",{className:`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${n?"bg-blue-500 text-white":"bg-gray-200 text-gray-800"}`,children:[(0,o.jsx)("div",{className:"text-sm font-medium mb-1",children:n?"You":"PrimeBot"}),(0,o.jsx)("div",{children:e.text}),t&&e.primeFactors&&(0,o.jsxs)("div",{className:"mt-2 pt-2 border-t border-opacity-20 border-white",children:[(0,o.jsxs)("div",{className:"text-xs opacity-75",children:["Prime Factors: ",Object.keys(e.primeFactors).length]}),void 0!==e.coherence&&(0,o.jsxs)("div",{className:"text-xs opacity-75",children:["Coherence: ",(100*e.coherence).toFixed(1),"%"]})]})]})})}function h(){let[e,t]=(0,s.useState)(null),[n,i]=(0,s.useState)(!0),[a,r]=(0,s.useState)(null),[h,u]=(0,s.useState)([]),[d,m]=(0,s.useState)(""),[p,y]=(0,s.useState)(!1),[g,f]=(0,s.useState)(!0),[w,b]=(0,s.useState)(!1),v=(0,s.useRef)(null),x=async()=>{if(!d.trim()||!e||p)return;let t={id:Date.now().toString(),text:d.trim(),sender:"human",timestamp:new Date};u(e=>[...e,t]),m(""),y(!0);try{let t=await e.processConversation(d.trim()),n=e.getDebugInfo(),i={id:(Date.now()+1).toString(),text:t,sender:"chatbot",timestamp:new Date,primeFactors:n.chatbotUser.conversationState.primeFactors,coherence:n.coherence};u(e=>[...e,i])}catch(t){console.error("❌ Error processing message:",t);let e={id:(Date.now()+1).toString(),text:"Sorry, I encountered an error processing your message. Please try again.",sender:"chatbot",timestamp:new Date};u(t=>[...t,e])}finally{y(!1)}};return n?(0,o.jsx)("div",{className:"min-h-screen bg-gray-100 flex items-center justify-center",children:(0,o.jsxs)("div",{className:"text-center",children:[(0,o.jsx)("div",{className:"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"}),(0,o.jsx)("h2",{className:"text-xl font-semibold text-gray-700 mb-2",children:"Initializing PrimeLM Core"}),(0,o.jsx)("p",{className:"text-gray-500",children:"Loading neural network models and prime mathematics..."})]})}):a?(0,o.jsx)("div",{className:"min-h-screen bg-gray-100 flex items-center justify-center",children:(0,o.jsxs)("div",{className:"text-center max-w-md",children:[(0,o.jsx)("div",{className:"text-red-500 text-6xl mb-4",children:"⚠️"}),(0,o.jsx)("h2",{className:"text-xl font-semibold text-red-600 mb-2",children:"Initialization Failed"}),(0,o.jsx)("p",{className:"text-gray-600 mb-4",children:a}),(0,o.jsxs)("p",{className:"text-sm text-gray-500",children:["Make sure you have installed the required dependencies:",(0,o.jsx)("br",{}),(0,o.jsx)("code",{className:"bg-gray-200 px-2 py-1 rounded mt-2 inline-block",children:"npm install @xenova/transformers"})]}),(0,o.jsx)("button",{onClick:()=>window.location.reload(),className:"mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600",children:"Retry"})]})}):(0,o.jsx)("div",{className:"min-h-screen bg-gray-100",children:(0,o.jsxs)("div",{className:"max-w-4xl mx-auto p-4",children:[(0,o.jsx)("div",{className:"bg-white rounded-lg shadow-sm p-6 mb-4",children:(0,o.jsxs)("div",{className:"flex items-center justify-between",children:[(0,o.jsxs)("div",{children:[(0,o.jsx)("h1",{className:"text-2xl font-bold text-gray-800",children:"PrimeLM Demo"}),(0,o.jsx)("p",{className:"text-gray-600",children:"Conversational AI through Prime Core mathematics"})]}),(0,o.jsxs)("div",{className:"flex gap-2",children:[(0,o.jsx)("button",{onClick:()=>f(!g),className:`px-3 py-1 rounded text-sm ${g?"bg-blue-500 text-white":"bg-gray-200 text-gray-700"}`,children:"Debug"}),(0,o.jsx)("button",{onClick:()=>b(!w),className:`px-3 py-1 rounded text-sm ${w?"bg-purple-500 text-white":"bg-gray-200 text-gray-700"}`,children:"Primes"})]})]})}),(0,o.jsxs)("div",{className:"bg-white rounded-lg shadow-sm mb-4",children:[(0,o.jsxs)("div",{className:"h-96 overflow-y-auto p-4",children:[h.map(e=>(0,o.jsx)(c,{message:e,showPrimes:w},e.id)),p&&(0,o.jsx)("div",{className:"flex justify-start mb-4",children:(0,o.jsx)("div",{className:"bg-gray-200 text-gray-800 max-w-xs lg:max-w-md px-4 py-2 rounded-lg",children:(0,o.jsx)("div",{className:"flex items-center",children:(0,o.jsx)("div",{className:"animate-pulse",children:"Processing through Prime Core..."})})})}),(0,o.jsx)("div",{ref:v})]}),(0,o.jsx)("div",{className:"border-t border-gray-200 p-4",children:(0,o.jsxs)("div",{className:"flex gap-2",children:[(0,o.jsx)("input",{type:"text",value:d,onChange:e=>m(e.target.value),onKeyPress:e=>{"Enter"!==e.key||e.shiftKey||(e.preventDefault(),x())},placeholder:"Type your message...",className:"flex-1 border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500",disabled:p}),(0,o.jsx)("button",{onClick:x,disabled:!d.trim()||p,className:"bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed",children:"Send"})]})})]}),(0,o.jsx)(l,{primeCore:e,showDebug:g}),(0,o.jsxs)("div",{className:"text-center text-sm text-gray-500 mt-4",children:[(0,o.jsxs)("p",{children:[(0,o.jsx)("strong",{children:"PrimeLM Demo:"})," Real neural networks → Prime factorization → Mathematical coherence"]}),(0,o.jsx)("p",{className:"mt-1",children:"No mocking or hard-coding - functional proof of concept implementation"})]})]})})}a=(r.then?(await r)():r)[0],i()}catch(e){i(e)}})},6250:(e,t,n)=>{Promise.resolve().then(n.bind(n,1204))},7141:(e,t,n)=>{"use strict";n.d(t,{m:()=>i});class i{constructor(){this.activeIntents=new Map,this.maxHistoryLength=20,this.context={currentTopic:null,activeIntents:[],entityMemory:new Map,conversationGoals:[],userPreferences:{},conversationHistory:[]}}processTurn(e,t,n,i,o){console.log("\uD83C\uDFAF Pragmatic Layer processing turn..."),console.log("Speaker:",e,"Intent:",n),console.log("Entities:",i);let s={id:`turn-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,timestamp:Date.now(),speaker:e,text:t,intent:n,entities:i,context:o};return this.context.conversationHistory.push(s),this.maintainHistoryLength(),this.updateEntityMemory(i),this.updateIntentTracking(n,i),this.updateCurrentTopic(n,i,t),this.updateConversationGoals(n,i),console.log("\uD83C\uDFAF Updated context - Topic:",this.context.currentTopic),console.log("\uD83C\uDFAF Active intents:",this.context.activeIntents),console.log("\uD83C\uDFAF Entity memory size:",this.context.entityMemory.size),{...this.context}}updateEntityMemory(e){Object.entries(e).forEach(([e,t])=>{if(t&&"string"==typeof t&&t.length>0){let n={value:t,lastMentioned:Date.now(),mentionCount:(this.context.entityMemory.get(e)?.mentionCount||0)+1,context:this.context.currentTopic};this.context.entityMemory.set(e,n),console.log(`💾 Stored entity: ${e} = ${t}`)}}),this.handleSpecialEntityPatterns(e)}handleSpecialEntityPatterns(e){if(e.entityType&&e.entityName){let t=`${e.entityType}_name`,n={value:e.entityName,entityType:e.entityType,relationship:"hasName",lastMentioned:Date.now(),mentionCount:1};this.context.entityMemory.set(t,n),console.log(`🔗 Stored relationship: ${e.entityType} hasName ${e.entityName}`)}e.userName&&this.context.entityMemory.set("user_name",{value:e.userName,relationship:"identity",lastMentioned:Date.now(),mentionCount:(this.context.entityMemory.get("user_name")?.mentionCount||0)+1});let t=Object.values(e);if(1===t.length&&"string"==typeof t[0]){let e=t[0];e.length>1&&e[0].toUpperCase()===e[0]&&(this.context.entityMemory.set("user_name",{value:e,relationship:"identity",lastMentioned:Date.now(),mentionCount:(this.context.entityMemory.get("user_name")?.mentionCount||0)+1}),console.log(`👤 Stored user name: ${e}`))}if(2===t.length){let[e,n]=t;if(e&&n&&n[0].toUpperCase()===n[0]){let t=`${e}_name`,i={value:n,entityType:e,relationship:"hasName",lastMentioned:Date.now(),mentionCount:1};this.context.entityMemory.set(t,i),console.log(`🔗 Stored relationship: ${e} hasName ${n}`)}}if(3===t.length){let[e,n,i]=t;if(("her"===e||"his"===e)&&"name"===n&&i[0].toUpperCase()===i[0]){let t=this.findRecentEntityForPronoun(e);if(t){let n=`${t}_name`,o={value:i,entityType:t,relationship:"hasName",lastMentioned:Date.now(),mentionCount:1};this.context.entityMemory.set(n,o),console.log(`🔗 Stored pronoun relationship: ${t} hasName ${i} (via ${e})`)}}}}updateIntentTracking(e,t){if(this.activeIntents.has(e)){let n=this.activeIntents.get(e);n.confidence=Math.min(n.confidence+.1,1),n.turnsSinceActivation=0,n.parameters={...n.parameters,...t}}else this.activeIntents.set(e,{intent:e,confidence:.8,parameters:t,isActive:!0,turnsSinceActivation:0});for(let[t,n]of this.activeIntents)t!==e&&(n.turnsSinceActivation++,n.confidence=Math.max(n.confidence-.05,0),(n.turnsSinceActivation>5||n.confidence<.2)&&(n.isActive=!1));this.context.activeIntents=Array.from(this.activeIntents.values()).filter(e=>e.isActive).map(e=>e.intent)}updateCurrentTopic(e,t,n){let i=null;if("ENTITY_INTRODUCTION"===e||"ENTITY_QUERY"===e)t.entityType&&(i=`${t.entityType}_discussion`);else if("IDENTITY_INTRODUCTION"===e||"IDENTITY_QUERY"===e)i="identity_discussion";else if("GREETING"===e)i="greeting_exchange";else if("HELP_REQUEST"===e)i="assistance_request";else if("INFORMATION_REQUEST"===e){let e=this.extractKeywords(n);e.length>0&&(i=`${e[0]}_information`)}i&&i!==this.context.currentTopic&&(this.context.currentTopic=i)}updateConversationGoals(e,t){let n=this.context.conversationGoals;switch(e){case"HELP_REQUEST":n.includes("provide_assistance")||n.push("provide_assistance");break;case"INFORMATION_REQUEST":n.includes("provide_information")||n.push("provide_information");break;case"IDENTITY_INTRODUCTION":n.includes("build_rapport")||n.push("build_rapport");break;case"ENTITY_INTRODUCTION":n.includes("learn_about_user")||n.push("learn_about_user")}n.length>5&&(this.context.conversationGoals=n.slice(-5))}extractKeywords(e){return e.toLowerCase().split(/\W+/).filter(e=>e.length>3).filter(e=>!this.isStopWord(e)).slice(0,3)}isStopWord(e){return["what","when","where","how","why","who","this","that","with","from","they","them","their","there","then","than","these","those"].includes(e)}maintainHistoryLength(){this.context.conversationHistory.length>this.maxHistoryLength&&(this.context.conversationHistory=this.context.conversationHistory.slice(-this.maxHistoryLength))}queryEntityMemory(e){let t=this.context.entityMemory.get(e);return t?(console.log(`🔍 Retrieved entity: ${e} = ${t.value}`),t):null}queryEntityRelationship(e,t){let n=`${e}_${t}`;return this.queryEntityMemory(n)}getContextForResponse(){let e=this.context.conversationHistory.slice(-5),t={},n=Date.now()-3e5;for(let[e,i]of this.context.entityMemory)(i.lastMentioned>n||this.context.currentTopic&&i.context===this.context.currentTopic)&&(t[e]=i);return{recentHistory:e,currentTopic:this.context.currentTopic,activeIntents:this.context.activeIntents,relevantEntities:t,conversationGoals:this.context.conversationGoals}}shouldContinueThread(e){let t=Array.from(this.activeIntents.values()).filter(e=>e.isActive),n=this.getRelatedIntents(e);return t.some(e=>n.includes(e.intent)&&e.confidence>.5)}getRelatedIntents(e){return({IDENTITY_QUERY:["IDENTITY_INTRODUCTION","ENTITY_QUERY"],ENTITY_QUERY:["ENTITY_INTRODUCTION","IDENTITY_QUERY"],INFORMATION_REQUEST:["HELP_REQUEST","KNOWLEDGE_REQUEST"],HELP_REQUEST:["INFORMATION_REQUEST","KNOWLEDGE_REQUEST"]})[e]||[]}resetContext(){this.context={currentTopic:null,activeIntents:[],entityMemory:new Map,conversationGoals:[],userPreferences:{},conversationHistory:[]},this.activeIntents.clear(),console.log("\uD83D\uDD04 Pragmatic context reset")}findRecentEntityForPronoun(e){let t=this.context.conversationHistory.slice(-3);for(let n=t.length-1;n>=0;n--){let i=t[n];if("ENTITY_QUERY"===i.intent)for(let t of Object.keys(i.entities)){let n=i.entities[t];if("string"==typeof n&&n.length>2){if("her"===e&&this.isFemalePronounEntity(n))return n;else if("his"===e&&this.isMalePronounEntity(n))return n;else if("is"!==n&&"name"!==n)return n}}}return null}isFemalePronounEntity(e){return["wife","mother","sister","daughter","girlfriend","aunt","grandmother"].includes(e.toLowerCase())}isMalePronounEntity(e){return["husband","father","brother","son","boyfriend","uncle","grandfather"].includes(e.toLowerCase())}getDebugInfo(){return{currentTopic:this.context.currentTopic,activeIntents:this.context.activeIntents,entityMemorySize:this.context.entityMemory.size,entityMemory:Object.fromEntries(this.context.entityMemory),conversationGoals:this.context.conversationGoals,historyLength:this.context.conversationHistory.length,activeIntentStates:Object.fromEntries(this.activeIntents)}}}},7221:()=>{},7253:(e,t,n)=>{"use strict";n.d(t,{i:()=>o});var i=n(3119);class o{constructor(){this.patterns=[],this.conceptNetCache=new Map,this.schemaVocabulary=new i.s,this.initializePatterns()}initializePatterns(){this.patterns=[{pattern:/my name is (\w+)/i,intent:"IDENTITY_INTRODUCTION",semanticBoosts:["name","identity","person","individual","called","known"],responseTemplate:"Nice to meet you, {name}! I'm PrimeBot."},{pattern:/i am (\w+)/i,intent:"IDENTITY_INTRODUCTION",semanticBoosts:["name","identity","person","individual"],responseTemplate:"Nice to meet you, {name}! I'm PrimeBot."},{pattern:/my (\w+)'?s? name is (\w+)/i,intent:"ENTITY_INTRODUCTION",semanticBoosts:["name","identity","called","known","entity"],responseTemplate:"Nice to know that your {entity} is named {name}!"},{pattern:/her name is (\w+)/i,intent:"ENTITY_INTRODUCTION",semanticBoosts:["name","identity","called","known","entity"],responseTemplate:"Nice to know that her name is {name}!"},{pattern:/his name is (\w+)/i,intent:"ENTITY_INTRODUCTION",semanticBoosts:["name","identity","called","known","entity"],responseTemplate:"Nice to know that his name is {name}!"},{pattern:/what is my name/i,intent:"IDENTITY_QUERY",semanticBoosts:["name","identity","remember","recall","called","known"],responseTemplate:"Based on our conversation, your name is {name}."},{pattern:/what is my (\w+)'?s? name/i,intent:"ENTITY_QUERY",semanticBoosts:["name","identity","remember","recall","called","known"],responseTemplate:"Based on our conversation, your {entity} is named {name}."},{pattern:/what is my (\w+)'s name/i,intent:"ENTITY_QUERY",semanticBoosts:["name","identity","remember","recall","called","known"],responseTemplate:"Based on our conversation, your {entity} is named {name}."},{pattern:/who am i/i,intent:"IDENTITY_QUERY",semanticBoosts:["identity","person","individual","self","me"]},{pattern:/who are you/i,intent:"BOT_IDENTITY_QUERY",semanticBoosts:["identity","bot","assistant","who","you"],responseTemplate:"I'm PrimeBot, an AI assistant powered by mathematical prime factorization."},{pattern:/what is your name/i,intent:"BOT_IDENTITY_QUERY",semanticBoosts:["name","identity","bot","assistant"],responseTemplate:"My name is PrimeBot."},{pattern:/^(hello|hi|hey|greetings)/i,intent:"GREETING",semanticBoosts:["hello","greeting","welcome","salutation","social","friendly"],responseTemplate:"Hello! I'm PrimeBot. How can I help you today?"},{pattern:/good (morning|afternoon|evening)/i,intent:"GREETING",semanticBoosts:["greeting","time","polite","social","welcome"]},{pattern:/^what (is|are|was|were)/i,intent:"INFORMATION_REQUEST",semanticBoosts:["question","information","explain","definition","knowledge"]},{pattern:/^(how|why|when|where)/i,intent:"INFORMATION_REQUEST",semanticBoosts:["question","inquiry","explanation","information","help"]},{pattern:/\?$/,intent:"QUESTION",semanticBoosts:["question","inquiry","ask","information","help"]},{pattern:/(help|assist|support)/i,intent:"HELP_REQUEST",semanticBoosts:["help","assist","support","aid","guidance","service"],responseTemplate:"I'm here to help! What would you like to know or discuss?"},{pattern:/(thank|thanks|grateful)/i,intent:"GRATITUDE",semanticBoosts:["thanks","gratitude","appreciation","polite","positive"],responseTemplate:"You're welcome! I'm glad I could help."},{pattern:/(good|great|excellent|awesome|wonderful)/i,intent:"POSITIVE_FEEDBACK",semanticBoosts:["good","positive","approval","satisfaction","pleased"],responseTemplate:"That's wonderful! Is there anything else I can help you with?"},{pattern:/(understand|know|learn|explain)/i,intent:"KNOWLEDGE_REQUEST",semanticBoosts:["understand","knowledge","learn","explain","information","teach"]}]}analyzeSemanticContext(e){console.log("\uD83E\uDDE0 Analyzing semantic context for:",e);let t=null,n=0,i=[];for(let o of this.patterns){let s=e.match(o.pattern);if(s){t=o,n=.8,s.length>1&&(i=s.slice(1));break}}if(!t){let t=this.extractKeywords(e),n=this.getSemanticBoostsFromKeywords(t);return{intent:"GENERAL_CONVERSATION",entities:t,semanticBoosts:n,confidence:.3}}return console.log("\uD83C\uDFAF Detected intent:",t.intent),console.log("\uD83D\uDD17 Semantic boosts:",t.semanticBoosts),console.log("\uD83D\uDCDD Entities:",i),{intent:t.intent,entities:i,semanticBoosts:t.semanticBoosts,confidence:n}}extractKeywords(e){return e.toLowerCase().split(/\W+/).filter(e=>e.length>2).filter(e=>!this.isStopWord(e))}isStopWord(e){return["the","and","or","but","in","on","at","to","for","of","with","by","is","are","was","were","be","been","have","has","had","do","does","did","will","would","could","should","may","might","can"].includes(e)}getSemanticBoostsFromKeywords(e){let t={name:["identity","person","individual","called","known"],hello:["greeting","welcome","social","friendly"],help:["assist","support","aid","guidance"],what:["question","information","inquiry"],how:["method","process","way","explanation"],why:["reason","cause","explanation","purpose"],when:["time","schedule","timing"],where:["location","place","position"],who:["person","identity","individual"],good:["positive","quality","approval"],bad:["negative","problem","issue"],like:["preference","enjoy","positive"],love:["strong_positive","emotion","preference"],hate:["strong_negative","dislike","emotion"],want:["desire","need","request"],need:["requirement","necessity","important"],think:["opinion","belief","cognitive"],feel:["emotion","sensation","experience"],know:["knowledge","information","understanding"],understand:["comprehension","knowledge","clarity"],learn:["education","knowledge","growth"],teach:["education","instruction","knowledge"],work:["job","employment","activity","function"],play:["recreation","fun","game","entertainment"],time:["temporal","schedule","duration"],place:["location","position","area"],thing:["object","item","entity"],person:["individual","human","people"],people:["group","humans","social"],family:["relatives","relationship","personal"],friend:["social","relationship","personal"],home:["residence","place","personal"],school:["education","learning","institution"],book:["reading","knowledge","information"],computer:["technology","digital","tool"],phone:["communication","technology","contact"],car:["transportation","vehicle","travel"],food:["nutrition","eating","sustenance"],water:["drink","liquid","essential"],money:["finance","currency","value"],job:["work","employment","career"]},n=[];for(let i of e)t[i]&&n.push(...t[i]),n.push(i);return[...new Set(n)]}generateContextualResponse(e,t,n){console.log("\uD83C\uDFAD Generating knowledge-driven response for intent:",e.intent);let i=t[t.length-1]||"",o=this.schemaVocabulary.parseSemanticRelationships(i),s=this.schemaVocabulary.generateSemanticQuery(i);return(console.log("\uD83D\uDD0D Semantic relationship:",o),console.log("\uD83D\uDD0D Semantic query:",s),s?.queryType==="retrieve")?this.handleSemanticRetrieval(s,t,e):o&&o.confidence>.8?this.handleSemanticRelationship(o,e):this.generateIntentBasedResponse(e,t,n)}handleSemanticRetrieval(e,t,n){let i=t.join(" ").toLowerCase();if("hasName"===e.predicate)if("user"===e.subject){let e=i.match(/my name is (\w+)/i);return e?`Your name is ${e[1]}.`:"I don't recall you mentioning your name. What is your name?"}else{let t=e.subject,n=RegExp(`my ${t}'?s? name is (\\w+)`,"i"),o=i.match(n);if(o){let e=o[1],n=this.schemaVocabulary.inferEntityType(t);return`Your ${t} is named ${e}.`+(n?` That's a lovely name for ${"Animal"===n?"an animal":"a "+n.toLowerCase()}.`:"")}return`I don't recall you mentioning your ${t}'s name. What is your ${t}'s name?`}return"I'm processing that semantic query. Could you provide more details?"}handleSemanticRelationship(e,t){let{subject:n,predicate:i,object:o}=e;if("hasName"===i)if("I"===n.text)return`Nice to meet you, ${o.text}! I'm PrimeBot. How can I assist you today?`;else{let e=this.schemaVocabulary.inferEntityType(n.text),t=e?this.schemaVocabulary.getEntityInfo(e):null,i=`Nice to know that your ${n.text} is named ${o.text}!`;return t&&e&&(this.schemaVocabulary.getValidProperties(e),this.schemaVocabulary.getValidRelationships(e),"Animal"===e?i+=` Tell me more about ${o.text} - what kind of ${n.text} is ${o.text}?`:"Vehicle"===e?i+=` What kind of ${n.text} is ${o.text}?`:i+=` Tell me more about ${o.text}.`),i}return"owns"===i?this.schemaVocabulary.inferEntityType(o.text)?`That's wonderful that you have ${"a"===o.text?"a":""} ${o.text}! What's special about your ${o.text}?`:`Interesting that you have ${o.text}. Tell me more about it!`:"That's interesting! I'm learning about the relationships you're describing."}generateIntentBasedResponse(e,t,n){switch(e.intent){case"GREETING":return"Hello! I'm PrimeBot, powered by mathematical prime factorization and semantic understanding. How can I help you today?";case"HELP_REQUEST":return"I'm here to help! I can understand relationships between people, animals, places, and things. What would you like to know or discuss?";case"GRATITUDE":return"You're welcome! I'm glad I could help with my semantic understanding.";case"POSITIVE_FEEDBACK":return"That's wonderful! Is there anything else I can help you understand or explore?";case"INFORMATION_REQUEST":case"QUESTION":if(n.length>0){let e=this.schemaVocabulary.inferEntityType(n[0]);if(e)return this.schemaVocabulary.getEntityInfo(e),`I'm analyzing "${n[0]}" as ${"Animal"===e?"an":"a"} ${e}. What specifically would you like to know about ${n[0]}?`;return`I'm processing information about "${n[0]}" through my semantic understanding. What specifically would you like to know?`}return"That's a great question! I'm analyzing the semantic relationships to provide you with an answer.";case"KNOWLEDGE_REQUEST":return"I process information through mathematical analysis and semantic understanding using Schema.org vocabulary. What would you like me to understand?";case"GENERAL_CONVERSATION":if(n.length>0){let e=this.schemaVocabulary.inferEntityType(n[0]);if(e)return`I notice you mentioned "${n[0]}" - I understand that as ${"Animal"===e?"an":"a"} ${e}. Tell me more about it!`;return`I notice you mentioned "${n[0]}". That's interesting! Tell me more about it.`}return"I'm listening and ready to understand the semantic relationships in what you're telling me. What would you like to discuss?";default:return null}}enhanceResonanceWithSemantics(e,t){return console.log("\uD83D\uDD2E Enhancing resonance with semantic awareness..."),e.map(e=>{let n=e.resonance;return t.semanticBoosts.includes(e.word)&&(n*=2,console.log(`🎯 Semantic boost for "${e.word}": ${e.resonance.toFixed(1)} → ${n.toFixed(1)}`)),t.confidence>.7&&(n*=1.3),{word:e.word,resonance:n}})}extractEntitiesFromContext(e){let t=new Map,n=e.join(" ").match(/my name is (\w+)/i);return n&&t.set("user_name",n[1]),t}}},7848:(e,t,n)=>{"use strict";n.d(t,{$:()=>i});class i{constructor(e){this.schemaVocabulary=e,this.topicState={currentTopic:"",topicHistory:[],topicTransitions:new Map,topicDepth:0,topicCoherence:0},this.conversationFlow={currentPhase:"opening",turnsSincePhaseChange:0,expectedNextMoves:["greeting","introduction","question"],conversationMomentum:0},this.referenceResolution={pronouns:new Map,entityReferences:new Map,contextualReferences:new Map}}analyzeDiscourseContext(e,t,n){console.log("\uD83D\uDCAC Analyzing discourse context..."),this.updateTopicState(e,t,n),this.updateConversationFlow(e,t,n),this.updateReferenceResolution(e,n);let i=this.calculateTopicContinuity(e,t),o=this.detectDiscourseMarkers(e),s=this.determineExpectedResponseType(t,this.conversationFlow.currentPhase);return console.log("\uD83D\uDCAC Discourse analysis:",{currentTopic:this.topicState.currentTopic,conversationPhase:this.conversationFlow.currentPhase,topicContinuity:i,expectedResponseType:s}),{topicContinuity:i,conversationPhase:this.conversationFlow.currentPhase,expectedResponseType:s,discourseMarkers:o,referenceResolutions:this.referenceResolution.entityReferences}}updateTopicState(e,t,n){let i=this.extractTopicsFromInput(e,t);if(i.length>0){let e=i[0];this.topicState.currentTopic&&this.topicState.currentTopic!==e?(this.topicState.topicTransitions.has(this.topicState.currentTopic)||this.topicState.topicTransitions.set(this.topicState.currentTopic,[]),this.topicState.topicTransitions.get(this.topicState.currentTopic).push(e),this.topicState.topicHistory.push(this.topicState.currentTopic),this.topicState.topicDepth=0):this.topicState.currentTopic===e&&this.topicState.topicDepth++,this.topicState.currentTopic=e}this.topicState.topicCoherence=this.calculateTopicCoherence(n)}extractTopicsFromInput(e,t){let n=[];if(t.entities&&t.entities.length>0&&t.entities.forEach(e=>{let t=this.schemaVocabulary.inferEntityType(e);t?n.push(`${t.toLowerCase()}_discussion`):n.push(`${e}_topic`)}),t.intent)switch(t.intent){case"IDENTITY_INTRODUCTION":case"IDENTITY_QUERY":n.push("identity_discussion");break;case"HELP_REQUEST":n.push("assistance_request");break;case"INFORMATION_REQUEST":n.push("information_seeking");break;case"GREETING":n.push("social_interaction")}return n}updateConversationFlow(e,t,n){this.conversationFlow.turnsSincePhaseChange++;let i=this.conversationFlow.currentPhase,o=i;switch(i){case"opening":"IDENTITY_INTRODUCTION"===t.intent||"ENTITY_INTRODUCTION"===t.intent?o="exploration":this.conversationFlow.turnsSincePhaseChange>3&&(o="exploration");break;case"exploration":this.topicState.topicDepth>2?o="deepening":this.hasTopicTransition()&&(o="transition");break;case"deepening":this.hasTopicTransition()?o="transition":this.conversationFlow.turnsSincePhaseChange>8&&(o="transition");break;case"transition":this.topicState.topicDepth>0?o="exploration":this.conversationFlow.turnsSincePhaseChange>2&&(o="exploration")}o!==i&&(this.conversationFlow.currentPhase=o,this.conversationFlow.turnsSincePhaseChange=0,this.updateExpectedNextMoves(o)),this.updateConversationMomentum(t,n)}hasTopicTransition(){return this.topicState.topicHistory.length>0&&0===this.topicState.topicDepth}updateExpectedNextMoves(e){switch(e){case"opening":this.conversationFlow.expectedNextMoves=["greeting","introduction","question"];break;case"exploration":this.conversationFlow.expectedNextMoves=["information_sharing","question","elaboration"];break;case"deepening":this.conversationFlow.expectedNextMoves=["detailed_explanation","follow_up","clarification"];break;case"transition":this.conversationFlow.expectedNextMoves=["topic_change","summary","new_question"];break;case"closing":this.conversationFlow.expectedNextMoves=["farewell","summary","future_reference"]}}updateConversationMomentum(e,t){let n=this.conversationFlow.conversationMomentum;("QUESTION"===e.intent||"INFORMATION_REQUEST"===e.intent)&&(n+=.2),("ENTITY_INTRODUCTION"===e.intent||"IDENTITY_INTRODUCTION"===e.intent)&&(n+=.3),"GENERAL_CONVERSATION"===e.intent&&0===e.entities.length&&(n-=.1),n*=.95,this.conversationFlow.conversationMomentum=Math.max(0,Math.min(1,n))}updateReferenceResolution(e,t){this.resolvePronounReferences(e,t),this.updateEntityReferences(e,t),this.updateContextualReferences(e,t)}resolvePronounReferences(e,t){["it","he","she","they","that","this"].forEach(n=>{if(e.toLowerCase().includes(n)){let e=this.findMostRecentEntity(t,n);e&&this.referenceResolution.pronouns.set(n,e)}})}findMostRecentEntity(e,t){let n=e.conversationHistory.slice(-5);for(let e=n.length-1;e>=0;e--){let t=n[e];if(Object.keys(t.entities).length>0)return Object.values(t.entities)[0]}return null}updateEntityReferences(e,t){for(let[n,i]of t.entityMemory)e.toLowerCase().includes(i.value.toLowerCase())&&this.referenceResolution.entityReferences.set(i.value,{type:i.entityType||"unknown",lastMentioned:Date.now(),context:e})}updateContextualReferences(e,t){this.topicState.topicHistory.forEach(t=>{e.toLowerCase().includes(t.toLowerCase())&&this.referenceResolution.contextualReferences.set(t,{referenceType:"topic_callback",originalContext:t,currentMention:e})})}calculateTopicContinuity(e,t){if(!this.topicState.currentTopic)return 0;let n=0,i=this.getTopicKeywords(this.topicState.currentTopic);return n=e.toLowerCase().split(/\W+/).filter(e=>i.includes(e)).length/Math.max(i.length,1),t.entities&&t.entities.length>0&&(n+=.3),Math.min(1,n)}getTopicKeywords(e){return({identity_discussion:["name","identity","who","person","individual"],animal_discussion:["dog","cat","pet","animal","breed","species"],vehicle_discussion:["car","truck","vehicle","drive","transportation"],assistance_request:["help","assist","support","aid","guidance"],information_seeking:["what","how","why","when","where","question"],social_interaction:["hello","hi","greeting","nice","meet"]})[e]||[]}calculateTopicCoherence(e){if(e.conversationHistory.length<2)return 1;let t=e.conversationHistory.slice(-5),n=0,i=new Map;return t.forEach(e=>{Object.values(e.entities).forEach(e=>{i.set(e,(i.get(e)||0)+1)})}),Math.min(1,Math.max(...Array.from(i.values()),0)/t.length)}detectDiscourseMarkers(e){let t=[],n=e.toLowerCase();return Object.entries({topic_shift:["anyway","by the way","speaking of","that reminds me"],elaboration:["also","furthermore","in addition","moreover"],contrast:["but","however","on the other hand","although"],conclusion:["so","therefore","in conclusion","to summarize"],clarification:["i mean","that is","in other words","specifically"],sequence:["first","then","next","finally","after that"]}).forEach(([e,i])=>{i.forEach(i=>{n.includes(i)&&t.push(e)})}),[...new Set(t)]}determineExpectedResponseType(e,t){let n="acknowledgment";switch(e.intent){case"QUESTION":case"INFORMATION_REQUEST":case"IDENTITY_QUERY":case"ENTITY_QUERY":case"BOT_IDENTITY_QUERY":n="informative_answer";break;case"GREETING":n="social_response";break;case"IDENTITY_INTRODUCTION":case"ENTITY_INTRODUCTION":n="acknowledgment_with_followup";break;case"HELP_REQUEST":n="supportive_response";break;case"GRATITUDE":n="gracious_acknowledgment"}switch(t){case"opening":"acknowledgment"===n&&(n="welcoming_response");break;case"deepening":"informative_answer"===n&&(n="detailed_explanation");break;case"transition":"informative_answer"!==n&&(n="transitional_response")}return n}getDiscourseState(){return{topicState:{...this.topicState},conversationFlow:{...this.conversationFlow},referenceResolution:{pronouns:new Map(this.referenceResolution.pronouns),entityReferences:new Map(this.referenceResolution.entityReferences),contextualReferences:new Map(this.referenceResolution.contextualReferences)}}}resetDiscourseState(){this.topicState={currentTopic:"",topicHistory:[],topicTransitions:new Map,topicDepth:0,topicCoherence:0},this.conversationFlow={currentPhase:"opening",turnsSincePhaseChange:0,expectedNextMoves:["greeting","introduction","question"],conversationMomentum:0},this.referenceResolution={pronouns:new Map,entityReferences:new Map,contextualReferences:new Map}}}},7879:(e,t,n)=>{"use strict";n.d(t,{S:()=>i});class i{constructor(e){this.schemaVocabulary=e,this.defaultStyle={formality:"neutral",enthusiasm:"medium",verbosity:"moderate",personality:"helpful"}}generateResponse(e){console.log("\uD83C\uDFA8 Generating dynamic response..."),console.log("Response type:",e.responseType),console.log("Conversation phase:",e.discourseContext?.conversationPhase);let t=this.determineGenerationStyle(e),n=this.generateResponseComponents(e,t),i=this.assembleResponse(n,t);return console.log("\uD83C\uDFA8 Generated response:",i),i}determineGenerationStyle(e){let t={...this.defaultStyle};switch(e.discourseContext?.conversationPhase){case"opening":t.formality="neutral",t.enthusiasm="medium";break;case"exploration":t.formality="casual",t.enthusiasm="medium";break;case"deepening":t.formality="neutral",t.verbosity="detailed";break;case"transition":t.enthusiasm="low",t.verbosity="concise"}switch(e.semanticContext?.intent){case"GREETING":t.enthusiasm="high",t.personality="friendly";break;case"HELP_REQUEST":t.personality="helpful",t.enthusiasm="medium";break;case"INFORMATION_REQUEST":case"QUESTION":t.personality="analytical",t.verbosity="detailed";break;case"GRATITUDE":t.personality="friendly",t.enthusiasm="medium"}return e.discourseContext?.conversationFlow?.conversationMomentum>.7?(t.enthusiasm="high",t.verbosity="detailed"):e.discourseContext?.conversationFlow?.conversationMomentum<.3&&(t.enthusiasm="low",t.verbosity="concise"),t}generateResponseComponents(e,t){let n={opening:"",core:"",followup:"",closing:""};return n.opening=this.generateOpening(e,t),n.core=this.generateCore(e,t),n.followup=this.generateFollowup(e,t),n.closing=this.generateClosing(e,t),n}generateOpening(e,t){let n=e.responseType;e.discourseContext?.conversationPhase;let i={social_response:{friendly:["Hello!","Hi there!","Hey!","Greetings!"],helpful:["Hello!","Hi!","Welcome!"],analytical:["Hello.","Greetings."],professional:["Good day.","Hello."]},acknowledgment_with_followup:{friendly:["That's wonderful!","How nice!","Great!"],helpful:["I understand.","I see.","Got it."],analytical:["Noted.","Understood.","I see."],professional:["Acknowledged.","Understood."]},informative_answer:{friendly:["Let me help with that!","I'd be happy to explain!"],helpful:["I can help with that.","Let me assist you."],analytical:["Based on my analysis,","From my understanding,"],professional:["I can provide that information."]},supportive_response:{friendly:["I'm here to help!","I'd love to assist!"],helpful:["I'm here to help.","I can assist you."],analytical:["I can provide assistance.","I'm available to help."],professional:["I'm available to assist."]},gracious_acknowledgment:{friendly:["You're so welcome!","My pleasure!"],helpful:["You're welcome!","Happy to help!"],analytical:["You're welcome.","Glad I could help."],professional:["You're welcome."]}}[n]?.[t.personality]||[""];if(0===i.length)return"";let o=i[0];return"high"===t.enthusiasm&&i.length>1?o=i[Math.min(1,i.length-1)]:"low"===t.enthusiasm&&(o=i[i.length-1]),o}generateCore(e,t){let n=e.responseType;switch(e.semanticContext,e.pragmaticContext,n){case"social_response":return this.generateSocialCore(e,t);case"acknowledgment_with_followup":return this.generateAcknowledgmentCore(e,t);case"informative_answer":return this.generateInformativeCore(e,t);case"supportive_response":return this.generateSupportiveCore(e,t);case"gracious_acknowledgment":return this.generateGraciousCore(e,t);case"welcoming_response":return this.generateWelcomingCore(e,t);case"detailed_explanation":return this.generateDetailedCore(e,t);case"transitional_response":return this.generateTransitionalCore(e,t);default:return this.generateDefaultCore(e,t)}}generateSocialCore(e,t){let n=this.getBotIdentityDescription(t),i=this.getCapabilityDescription(t);return"detailed"===t.verbosity?`${n} ${i}`:"moderate"===t.verbosity?n:"I'm PrimeBot."}generateAcknowledgmentCore(e,t){let n=e.semanticContext?.entities||[];if(n.length>=2){let e=n[0],i=n[1],o=this.schemaVocabulary.inferEntityType(e);return this.generateEntityAcknowledgment(e,i,o,t)}if(1===n.length){let e=n[0];return this.generateNameAcknowledgment(e,t)}return this.generateGenericAcknowledgment(t)}generateEntityAcknowledgment(e,t,n,i){let o=this.getEntityAcknowledgmentTemplates(i),s=o[Math.floor(Math.random()*o.length)].replace("{entityType}",e).replace("{entityName}",t);if(n&&"concise"!==i.verbosity){let o=this.generateSchemaContext(e,t,n,i);o&&(s+=` ${o}`)}return s}getEntityAcknowledgmentTemplates(e){switch(e.personality){case"friendly":return["It's lovely to know that your {entityType} is named {entityName}!","What a wonderful name for your {entityType} - {entityName}!","I love that your {entityType} is called {entityName}!"];case"helpful":return["I understand that your {entityType} is named {entityName}.","Thank you for telling me about {entityName}, your {entityType}.","I've noted that your {entityType} is named {entityName}."];case"analytical":return["I've recorded that your {entityType} has the name {entityName}.","Entity relationship noted: {entityType} hasName {entityName}.","I understand the naming relationship for your {entityType}."];case"professional":return["I acknowledge that your {entityType} is named {entityName}.","Thank you for providing the name of your {entityType}.","I have recorded the information about {entityName}."];default:return["I understand that your {entityType} is named {entityName}."]}}generateSchemaContext(e,t,n,i){if(!this.schemaVocabulary.getEntityInfo(n))return"";switch(this.schemaVocabulary.getValidProperties(n),n){case"Animal":if("friendly"===i.personality)return`Tell me more about ${t} - what kind of ${e} is ${t}?`;if("analytical"===i.personality)return`As an Animal entity, ${t} has properties like species and breed.`;return`What kind of ${e} is ${t}?`;case"Vehicle":if("friendly"===i.personality)return`I'd love to hear more about ${t}! What kind of ${e} is it?`;return`What type of ${e} is ${t}?`;case"Person":if("friendly"===i.personality)return`It's nice to meet ${t}! Tell me more about them.`;return`Tell me more about ${t}.`;default:return`Tell me more about ${t}.`}}generateNameAcknowledgment(e,t){let n=this.getNameAcknowledgmentTemplates(t);return n[Math.floor(Math.random()*n.length)].replace("{name}",e)}getNameAcknowledgmentTemplates(e){switch(e.personality){case"friendly":return["It's wonderful to meet you, {name}!","Nice to meet you, {name}!","Hello {name}! Great to meet you!"];case"helpful":return["Nice to meet you, {name}!","Hello {name}! I'm here to help.","Welcome, {name}!"];case"analytical":return["Acknowledged, {name}.","Hello {name}.","Identity recorded: {name}."];case"professional":return["Good to meet you, {name}.","Hello {name}.","Welcome, {name}."];default:return["Nice to meet you, {name}!"]}}generateInformativeCore(e,t){let n=e.semanticContext,i=e.pragmaticContext,o=i.conversationHistory[i.conversationHistory.length-1]?.text||"",s=this.handleSemanticQuery(e,t);if(s)return s;if(n?.entities&&n.entities.length>0){let e=n.entities[0],i=this.schemaVocabulary.inferEntityType(e);if(i)return this.generateEntityInformation(e,i,t)}throw Error(`No semantic query handler found for input: "${o}". Available entity memory: ${JSON.stringify(Object.fromEntries(i.entityMemory))}`)}handleSemanticQuery(e,t){let n=e.pragmaticContext,i=n.conversationHistory[n.conversationHistory.length-1]?.text||"";if(console.log("\uD83D\uDD0D Handling semantic query for:",i),console.log("\uD83D\uDD0D Available entity memory:",Object.fromEntries(n.entityMemory)),i.toLowerCase().includes("who are you")||i.toLowerCase().includes("what is your name"))return this.handleBotIdentityQuery(t);if(i.toLowerCase().includes("what is my name"))return this.handleNameQuery(n,t);let o=i.match(/what is my (\w+)'?s? name/i);if(o){let e=o[1];return this.handleEntityNameQuery(e,n,t)}let s=i.match(/what is my (\w+)'s name/i);if(s){let e=s[1];return this.handleEntityNameQuery(e,n,t)}let a=i.match(/who is (\w+)/i);if(a){let e=a[1];return this.handleWhoIsQuery(e,n,t)}return null}handleBotIdentityQuery(e){switch(e.personality){case"friendly":return"I'm PrimeBot, your friendly AI assistant! I use mathematical prime factorization and semantic understanding to have conversations.";case"analytical":return"I am PrimeBot, an AI system that processes information through mathematical prime factorization and semantic analysis using Schema.org vocabulary.";case"professional":return"I am PrimeBot, an AI assistant specializing in semantic understanding and mathematical analysis.";default:return"I'm PrimeBot, an AI assistant powered by mathematical prime factorization and semantic understanding."}}handleNameQuery(e,t){let n=e.conversationHistory.map(e=>e.text).join(" ").toLowerCase().match(/my name is (\w+)/i);if(n){let e=n[1];switch(t.personality){case"friendly":return`Your name is ${e}! I remember you telling me that.`;case"analytical":return`Based on our conversation history, your name is ${e}.`;case"professional":return`According to our conversation, your name is ${e}.`;default:return`Your name is ${e}.`}}switch(t.personality){case"friendly":return"I don't recall you mentioning your name yet. I'd love to know what to call you!";case"helpful":default:return"I don't recall you mentioning your name. What is your name?";case"analytical":return"No name information found in conversation history. Please provide your name."}}handleEntityNameQuery(e,t,n){let i=t.conversationHistory.map(e=>e.text).join(" ").toLowerCase(),o=RegExp(`my ${e}'?s? name is (\\w+)`,"i"),s=i.match(o);if(s){let t=s[1],i=this.schemaVocabulary.inferEntityType(e),o=`Your ${e} is named ${t}.`;if(i&&"concise"!==n.verbosity){let s=this.generateContextualNote(e,t,i,n);s&&(o+=` ${s}`)}return o}switch(n.personality){case"friendly":return`I don't recall you mentioning your ${e}'s name. What is your ${e} called?`;case"helpful":default:return`I don't recall you mentioning your ${e}'s name. What is your ${e}'s name?`;case"analytical":return`No naming information found for entity type: ${e}. Please provide the name.`}}handleWhoIsQuery(e,t,n){for(let[i,o]of t.entityMemory)if(o.value.toLowerCase()===e.toLowerCase()){if(i.endsWith("_name")){let t=i.replace("_name","");switch(n.personality){case"friendly":return`${e} is your ${t}! I remember you telling me about them.`;case"analytical":return`Based on our conversation history, ${e} is identified as your ${t}.`;case"professional":return`According to our conversation, ${e} is your ${t}.`;default:return`${e} is your ${t}.`}}else if("user_name"===i)return`${e} is you! That's your name.`}switch(n.personality){case"friendly":return`I don't recall you mentioning anyone named ${e}. Could you tell me more about them?`;case"helpful":return`I don't have information about ${e}. Who is ${e}?`;case"analytical":return`No entity information found for "${e}" in conversation history.`;default:return`I don't recall you mentioning ${e}. Who is ${e}?`}}generateContextualNote(e,t,n,i){switch(n){case"Animal":if("friendly"===i.personality)return`That's a lovely name for ${"Animal"===e?"an animal":"a "+e}!`;return`${t} is classified as an Animal entity.`;case"Vehicle":return"friendly"===i.personality?`${t} sounds like a great ${e}!`:`${t} is classified as a Vehicle entity.`;default:return""}}generateEntityInformation(e,t,n){let i=this.schemaVocabulary.getEntityInfo(t);return"analytical"===n.personality&&i?`I'm analyzing "${e}" as ${"Animal"===t?"an":"a"} ${t} entity. This type has properties like ${i.properties.slice(0,3).join(", ")}.`:"friendly"===n.personality?`I notice you mentioned "${e}" - I understand that as ${"Animal"===t?"an":"a"} ${t}. That's interesting!`:`I'm processing information about "${e}" as ${"Animal"===t?"an":"a"} ${t}.`}generateGenericInformativeResponse(e){switch(e.personality){case"friendly":return"That's a great question! I'm working through the information to give you a helpful answer.";case"analytical":return"I'm analyzing the semantic relationships and mathematical patterns to provide an accurate response.";case"professional":return"I'm processing your request to provide you with the appropriate information.";default:return"I'm analyzing the information to provide you with an answer."}}generateSupportiveCore(e,t){let n=this.getCapabilityDescription(t);switch(t.personality){case"friendly":return`I can understand relationships between people, animals, places, and things. ${n}`;case"analytical":return`I process information through semantic analysis and mathematical prime factorization. ${n}`;case"professional":return`I'm equipped to assist with information processing and semantic understanding. ${n}`;default:return`I can help with understanding relationships and processing information. ${n}`}}generateGraciousCore(e,t){switch(t.personality){case"friendly":return"I'm so glad I could help with my semantic understanding!";case"analytical":return"I'm pleased that my mathematical analysis was useful.";case"professional":return"I'm glad I could provide the assistance you needed.";default:return"I'm glad I could help!"}}generateWelcomingCore(e,t){let n=this.getBotIdentityDescription(t),i=this.getCapabilityDescription(t);return`${n} ${i}`}generateDetailedCore(e,t){let n=this.generateInformativeCore(e,t),i=this.getTechnicalDetails(e,t);return`${n} ${i}`}generateTransitionalCore(e,t){let n=e.discourseContext;if(n?.topicState?.topicHistory?.length>0){let e=n.topicState.topicHistory[n.topicState.topicHistory.length-1];return`I notice we've moved from discussing ${e} to a new topic.`}return"I'm ready to explore whatever you'd like to discuss."}generateDefaultCore(e,t){switch(t.personality){case"friendly":return"I'm listening and ready to understand what you're telling me!";case"analytical":return"I'm processing the semantic relationships in your message.";case"professional":return"I'm ready to assist with your inquiry.";default:return"I'm listening and ready to help."}}generateFollowup(e,t){let n=e.responseType,i=e.discourseContext?.conversationPhase;return"acknowledgment_with_followup"===n||"welcoming_response"===n||"exploration"===i?this.generateContextualFollowup(e,t):""}generateContextualFollowup(e,t){switch(e.discourseContext?.conversationPhase){case"opening":return this.generateOpeningFollowup(t);case"exploration":return this.generateExplorationFollowup(e,t);case"deepening":return this.generateDeepeningFollowup(e,t);default:return this.generateGenericFollowup(t)}}generateOpeningFollowup(e){switch(e.personality){case"friendly":return"How can I help you today?";case"helpful":return"What can I assist you with?";case"analytical":return"What would you like to explore?";case"professional":return"How may I assist you?";default:return"How can I help?"}}generateExplorationFollowup(e,t){let n=e.semanticContext?.entities||[];if(n.length>0){let e=n[n.length-1];switch(t.personality){case"friendly":return`Tell me more about ${e}!`;case"analytical":return`What additional information can you provide about ${e}?`;case"professional":return`Please share more details about ${e}.`;default:return`Tell me more about ${e}.`}}return this.generateGenericFollowup(t)}generateDeepeningFollowup(e,t){switch(t.personality){case"friendly":return"What else would you like to explore about this?";case"analytical":return"Are there specific aspects you'd like me to analyze further?";case"professional":return"What additional details would be helpful?";default:return"What else would you like to know?"}}generateGenericFollowup(e){switch(e.personality){case"friendly":default:return"What would you like to discuss?";case"analytical":return"What would you like to analyze?";case"professional":return"What would you like to explore?"}}generateClosing(e,t){if("detailed"===t.verbosity&&("welcoming_response"===e.responseType||"detailed_explanation"===e.responseType))switch(t.personality){case"friendly":return"I'm excited to learn more!";case"analytical":return"I'm ready to process more information.";case"professional":return"I look forward to assisting you further."}return""}assembleResponse(e,t){let n=[];return e.opening&&n.push(e.opening),e.core&&n.push(e.core),e.followup&&n.push(e.followup),e.closing&&n.push(e.closing),n.join(" ")}getBotIdentityDescription(e){switch(e.personality){case"friendly":return"I'm PrimeBot, your friendly AI assistant powered by mathematical prime factorization and semantic understanding.";case"analytical":return"I'm PrimeBot, an AI system that processes information through mathematical prime factorization and semantic analysis.";case"professional":return"I'm PrimeBot, an AI assistant specializing in semantic understanding and mathematical analysis.";default:return"I'm PrimeBot, powered by mathematical prime factorization and semantic understanding."}}getCapabilityDescription(e){switch(e.verbosity){case"detailed":return"I can understand relationships between people, animals, places, and things using Schema.org vocabulary, maintain conversation memory, and provide contextual responses based on mathematical prime resonance.";case"moderate":return"I can understand relationships between entities and maintain conversation context.";case"concise":return"I understand entity relationships and context.";default:return"I can help with understanding relationships and processing information."}}getTechnicalDetails(e,t){return"analytical"!==t.personality?"":"Using mathematical prime factorization and Schema.org semantic relationships for analysis."}generateGenericAcknowledgment(e){switch(e.personality){case"friendly":return"That's interesting! I'm learning about what you're telling me.";case"analytical":return"Information processed and stored in semantic memory.";case"professional":return"I acknowledge the information you've provided.";default:return"I understand. Thank you for sharing that with me."}}}},8071:(e,t,n)=>{"use strict";n.d(t,{E:()=>i});class i{findMostResonantWords(e,t,n=3){console.log("\uD83D\uDD22 Finding resonant words using direct prime comparison..."),console.log("Input primes:",this.formatPrimes(e));let i=[];for(let[n,o]of t){let t=this.calculatePrimeResonance(e,o),s=this.findSharedPrimes(e,o),a=this.findHarmonicMatches(e,o),r=this.calculateCoherenceScore(e,o);i.push({word:n,resonance:t,sharedPrimes:s,harmonicMatches:a,coherenceScore:r})}let o=i.sort((e,t)=>t.resonance-e.resonance).slice(0,2*n).filter(e=>e.resonance>0);return console.log("Top resonance results:",o.slice(0,5).map(e=>`${e.word}: ${e.resonance.toFixed(1)} (shared: ${e.sharedPrimes.length}, harmonic: ${e.harmonicMatches.length})`)),o.slice(0,n)}calculatePrimeResonance(e,t){let n=0;for(let[i,o]of Object.entries(e)){let e=t[parseInt(i)];e&&(n+=Math.sqrt(o*e))}return n+.3*this.calculateHarmonicResonance(e,t)}findSharedPrimes(e,t){let n=[];for(let i of Object.keys(e)){let e=parseInt(i);t[e]&&n.push(e)}return n.sort((e,t)=>e-t)}findHarmonicMatches(e,t){let n=[];for(let[i]of Object.entries(e)){let e=parseInt(i);for(let i of[2*e,3*e,e+2,e-2,Math.floor(e/2),Math.floor(e/3)].filter(e=>e>1&&Number.isInteger(e)))t[i]&&n.push(i)}return[...new Set(n)].sort((e,t)=>e-t)}calculateHarmonicResonance(e,t){let n=0;for(let[i,o]of Object.entries(e)){let e=parseInt(i);for(let i of[2*e,e+2,e-2]){let e=t[i];e&&(n+=.5*Math.sqrt(o*e))}}return n}calculateCoherenceScore(e,t){let n={};for(let[i,o]of Object.entries(e)){let e=parseInt(i),s=t[e];s&&(n[e]=Math.sqrt(o*s))}let i=this.calculateMagnitude(n),o=Math.sqrt(this.calculateMagnitude(e)*this.calculateMagnitude(t));return o>0?i/o:0}calculateMagnitude(e){return Math.sqrt(Object.values(e).reduce((e,t)=>e+t*t,0))}formatPrimes(e){let t=Object.entries(e).sort(([,e],[,t])=>t-e).slice(0,5).map(([e,t])=>`${e}:${Math.floor(t)}`);return`{${t.join(", ")}}`}applyContextualWeighting(e,t,n=1.5){let i=t.join(" ").toLowerCase().split(/\W+/).filter(e=>e.length>2);return e.map(e=>{let t=e.resonance;return i.includes(e.word.toLowerCase())&&(t*=n,console.log(`🎯 Context boost for "${e.word}": ${e.resonance.toFixed(1)} → ${t.toFixed(1)}`)),{...e,resonance:t}})}}},8173:(e,t,n)=>{"use strict";n.d(t,{s:()=>i});class i{static{this.primes=[]}static generatePrimes(e){if(this.primes.length>=e)return this.primes.slice(0,e);let t=[2],n=3;for(;t.length<e;){let e=!0;for(let i=0;i<t.length&&t[i]*t[i]<=n;i++)if(n%t[i]==0){e=!1;break}e&&t.push(n),n+=2}return this.primes=t,t}static embeddingsToPrimes(e,t=.02){let n=this.generatePrimes(e.length),i={};return e.forEach((e,o)=>{if(Math.abs(e)>t){let t=n[o%n.length],s=Math.floor(1e3*Math.abs(e))+1;i[t]=(i[t]||0)+s}}),i}static calculateCoherence(e,t){let n={};Object.keys(e).forEach(i=>{let o=parseInt(i);t[o]&&(n[o]=Math.sqrt(e[o]*t[o]))});let i=this.calculateMagnitude(n),o=Math.sqrt(this.calculateMagnitude(e)*this.calculateMagnitude(t));return o>0?i/o:0}static calculateMagnitude(e){return Math.sqrt(Object.values(e).reduce((e,t)=>e+t*t,0))}static combineFactors(e,t,n=.5){let i={};return Object.entries(e).forEach(([e,t])=>{i[parseInt(e)]=Math.floor(t*n)}),Object.entries(t).forEach(([e,t])=>{let o=parseInt(e);i[o]=(i[o]||0)+Math.floor(t*(1-n))}),i}}},9121:e=>{"use strict";e.exports=require("next/dist/server/app-render/action-async-storage.external.js")},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},9298:(e,t,n)=>{Promise.resolve().then(n.bind(n,5694))},9634:(e,t,n)=>{"use strict";n.d(t,{d:()=>i});class i{constructor(e){this.embeddingPipeline=e}async bootstrapFromTokenizer(){console.log("\uD83D\uDD27 Bootstrapping chatbot knowledge from tokenizer...");try{let e=await this.extractTokenizerVocabulary();console.log(`📚 Extracted ${e.length} vocabulary words`);let t=await this.generateVocabularyEmbeddings(e);console.log(`🧠 Generated embeddings for ${t.size} words`);let n=this.buildSemanticClusters(t);console.log(`🔗 Built semantic clusters for ${n.size} concepts`);let i=this.createKnowledgeBase(t,n);return console.log("✅ Knowledge base bootstrap complete"),i}catch(e){throw console.error("❌ Knowledge bootstrap failed:",e),Error(`Knowledge bootstrap failed: ${e instanceof Error?e.message:String(e)}`)}}async extractTokenizerVocabulary(){console.log("\uD83D\uDD0D Attempting to extract tokenizer vocabulary...");let e=this.embeddingPipeline.tokenizer;if(console.log("Tokenizer available:",!!e),!e)throw Error("Tokenizer not available in embedding pipeline");console.log("Tokenizer properties:",Object.keys(e));let t=null;if(e.model&&e.model.vocab){let n=e.model.vocab;console.log("Vocab object type:",typeof n),console.log("Vocab object keys sample:",Object.keys(n).slice(0,20));let i=Object.keys(n)[0],o=n[i];console.log("First vocab entry:",i,"->",o),"number"==typeof o?(t=Object.keys(n),console.log("Found word->ID mapping, using keys as vocabulary")):"string"==typeof i&&/^\d+$/.test(i)?(t=Object.values(n),console.log("Found ID->word mapping, using values as vocabulary")):(t=Object.keys(n),console.log("Using keys as vocabulary (default)")),console.log("Extracted vocab length:",t.length),console.log("Sample vocab words:",t.slice(0,20))}else if(e.vocab)console.log("Found vocab via tokenizer.vocab:",(t=Object.keys(e.vocab)).length);else if(e.getVocab)console.log("Found vocab via tokenizer.getVocab():",(t=Object.keys(e.getVocab())).length);else throw Error("Unable to access tokenizer vocabulary - no known vocabulary access method found");if(!t||0===t.length)throw Error("Tokenizer vocabulary is empty or null");let n=this.filterMeaningfulWords(t);if(console.log("Filtered vocabulary:",n.length),0===n.length)throw Error("No meaningful words found in tokenizer vocabulary after filtering");return n}filterMeaningfulWords(e){if(console.log("\uD83D\uDD0D Filtering vocabulary from",e.length,"words"),console.log("Sample vocab words:",e.slice(0,20)),e.slice(0,100).every(e=>/^\d+$/.test(e)))throw Error("Detected numeric tokenizer with token IDs instead of vocabulary words - cannot extract meaningful vocabulary");let t=e.filter(e=>!(e.startsWith("[")||e.startsWith("<")||e.startsWith("##")||e.length<2||e.length>15||/^\d+$/.test(e))&&!!/^[a-zA-Z]+$/.test(e)).slice(0,800);return console.log("Filtered to",t.length,"meaningful words"),console.log("Sample filtered words:",t.slice(0,20)),t}async generateVocabularyEmbeddings(e){let t=new Map;for(let n=0;n<e.length;n+=50){for(let i of e.slice(n,n+50))try{let e=await this.embeddingPipeline(i),n=Array.from(e.data);t.set(i,n)}catch(e){console.warn(`⚠️ Failed to generate embedding for word: ${i}`)}n+50<e.length&&await new Promise(e=>setTimeout(e,10))}return t}buildSemanticClusters(e){let t=new Map;for(let[n,i]of e){let o=this.findSimilarWords(n,i,e);t.set(n,o)}return t}findSimilarWords(e,t,n){let i=[];for(let[o,s]of n)if(o!==e){let e=this.calculateCosineSimilarity(t,s);i.push({word:o,similarity:e})}return i.sort((e,t)=>t.similarity-e.similarity).slice(0,5).map(e=>e.word)}calculateCosineSimilarity(e,t){let n=e.reduce((e,n,i)=>e+n*t[i],0),i=Math.sqrt(e.reduce((e,t)=>e+t*t,0)),o=Math.sqrt(t.reduce((e,t)=>e+t*t,0));return i&&o?n/(i*o):0}createKnowledgeBase(e,t){let n=new Map,i=new Map;for(let[o,s]of e){let e=this.embeddingsToPrimes(s),a=t.get(o)||[];n.set(o,{word:o,embedding:s,primeFactors:e,similarWords:a}),i.set(o,e)}return{vocabulary:n,semanticClusters:t,conceptEmbeddings:e,vocabularyPrimes:i}}embeddingsToPrimes(e,t=.02){let n=this.generatePrimes(e.length),i={};return e.forEach((e,o)=>{if(Math.abs(e)>t){let t=n[o%n.length],s=Math.floor(1e3*Math.abs(e))+1;i[t]=(i[t]||0)+s}}),i}generatePrimes(e){let t=[2],n=3;for(;t.length<e;){let e=!0;for(let i=0;i<t.length&&t[i]*t[i]<=n;i++)if(n%t[i]==0){e=!1;break}e&&t.push(n),n+=2}return t}}}};var t=require("../webpack-runtime.js");t.C(e);var n=e=>t(t.s=e),i=t.X(0,[825],()=>n(377));module.exports=i})();